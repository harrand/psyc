sval_tag ::= enum
{
	.literal := 1;
	.structliteral := 2;
};

sval_struct ::= struct
{
	data : v0&;
	size : u64;
	cap : u64;
};

sval ::= struct
{
	tag : sval_tag;
	literal : ast_literal_expr;
	strct : sval_struct;
};

sval_struct_add_member ::= func(v : sval mut&, mem : sval, a : arena mut&) -> v0
{
	strct ::= ref(v->strct);
	if((strct->data) == null)
	{
		(strct->cap) = 8;
		(strct->data) = arena_push(a, __sizeof(sval) * (strct->cap));
	}
	while((strct->size) >= (strct->cap))
	{
		oldcap ::= strct->cap;
		olddata ::= strct->data;
		(strct->cap) = (strct->cap) * 2;
		(strct->data) = arena_push(a, __sizeof(sval) * (strct->cap));
		__memcpy(strct->data, olddata, __sizeof(sval) * oldcap);
	}
	data ::= (strct->data)@sval mut&;
	deref(data at (strct->size)) = mem;
	(strct->size) = (strct->size) + 1;
};

== build ==
{
	add_source_file("ast.psy");
}
