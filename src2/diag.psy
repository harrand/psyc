psyc_stage ::= enum
{
	.setup := 0;
	.lex := 1;
	.parse := 2;
	.semal := 3;
	.codegen := 4;
	.assembly := 5;
	.link := 6;
};

current_stage : psyc_stage mut;

psyc_stage_times : f32 mut[7];

psyc_colour_red ::= func(-> v0)
{
	putchar(27); // esc character
	putchar('[');
	putchar('3');
    putchar('1');
    putchar('m');
};

psyc_colour_yellow ::= func(-> v0)
{
	putchar(27); // esc character
	putchar('[');
	putchar('3');
    putchar('3');
    putchar('m');
};

psyc_colour_blue ::= func(-> v0)
{
	putchar(27); // esc character
	putchar('[');
	putchar('3');
    putchar('4');
    putchar('m');
};

psyc_colour_reset ::= func(-> v0)
{
	putchar(27); // esc character
	putchar('[');
    putchar('0');
    putchar('m');
};

print_srcloc ::= func(l : srcloc -> v0)
{
	if((l.file) != zero)
	{
		puts("at ");
		puts(l.file);
		putchar(' ');
		puts(l.fn);
		putchar('(');
		putuint(l.line);
		putchar(':');
		putuint(l.column);
		putchar(')');
	}
};

psyc_exit_failure ::= func(-> v0)
{
	__debugbreak();
};

psyc_panic_begin ::= func(my_srcloc : srcloc -> v0)
{
	psyc_colour_red();
	puts("panic ");
	print_srcloc(my_srcloc);
	putchar(':');
	putchar(' ');
};

psyc_diag_end ::= func(-> v0)
{
	putchar(10);
	psyc_colour_reset();
};

psyc_error_begin ::= func(loc : srcloc -> v0)
{
	psyc_colour_red();
	puts(__enumname(current_stage));
	puts(" error ");
	print_srcloc(loc);
	puts(": ");
};

psyc_warning_begin ::= func(loc : srcloc -> v0)
{
	psyc_colour_yellow();
	puts("warning ");
	print_srcloc(loc);
	puts(": ");
};

psyc_message_begin ::= func(loc : srcloc -> v0)
{
	psyc_colour_blue();
	puts("message ");
	print_srcloc(loc);
	puts(": ");
};

psyc_panic ::= func(my_srcloc : srcloc, msg : u8& -> v0)
{
	psyc_panic_begin(my_srcloc);
	puts(msg);
	psyc_diag_end();
	psyc_exit_failure();
};


if static(_win32)
{
	QueryPerformanceCounter ::= func(lpPerformanceCount : s64 mut& -> s32) := extern;
	QueryPerformanceFrequency ::= func(lpPerformanceCount : s64 mut& -> s32) := extern;
}

psyc_gettime ::= func(-> s64)
{
	if static(_win32)
	{
		ret : s64 mut;
		QueryPerformanceCounter(ref ret);
		return ret;
	}
};

psyc_set_stage ::= func(stage : psyc_stage -> v0)
{
	current_stage = stage;
};

/*
psyc_timed ::= macro(stage : psyc_stage -> v0)
{
	psyc_set_stage(stage);
	defer psyc_set_stage(psyc_stage.setup);
	_f : s64 mut;
	QueryPerformanceFrequency(ref _f);
	_t ::= psyc_gettime();
	_s ::= stage@s64;
	defer _diff ::= ((psyc_gettime() - _t) * 1000000) / _f;
	defer _diff_f32 ::= _diff / 1000000.0;
	defer(deref(psyc_stage_times at _s) = (deref(psyc_stage_times at _s) + _diff_f32));
};
*/

psyc_report_a_timing ::= func(stage : psyc_stage -> v0)
{
	puts(__enumname(stage));
	puts(": ");
	putfloat(deref(psyc_stage_times at (stage@s64)));
	putchar('s');
	putchar(10);
};

psyc_report_timings ::= func(-> v0)
{
	count ::= __sizeof(psyc_stage_times) / __sizeof(deref(psyc_stage_times at 0));
	i : u32 mut;

	total_timing : f32 mut := 0.0;
	for(i = 0, i < count, i = i + 1)
	{
		psyc_report_a_timing(i@psyc_stage);
		total_timing = (total_timing + deref(psyc_stage_times at i));
	}
	puts("total: ");
	putfloat(total_timing);
	putchar('s');
	putchar(10);
};
