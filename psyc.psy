global_arena_val : arena mut;
global_arena : arena mut? mut;

frame_arena_val : arena mut;
frame_arena : arena mut? mut;

setup_arenas ::= func( -> v0)
{
	global_arena_val = arena_create(4096 * 1024);
	global_arena = ref global_arena_val;

	frame_arena_val = arena_create(4096 * 1024);
	frame_arena = ref frame_arena_val;
};

destroy_arenas ::= func( -> v0)
{
	putzstr("arena free: ");
	putuint(global_arena_val.cur);
	putzstr("B");
	putchar(10);
	arena_destroy(ref global_arena_val);
	arena_destroy(ref frame_arena_val);
};

// read a file path. allocates for the whole file data. returns zero if file didnt exist.
fully_read_file ::= func(path : u8?, a : arena mut? -> u8 mut?)
{
	if(!file_exists(path))
	{
		psyc_error_begin(zero);
		putzstr("file ");
		putchar('"');
		putzstr(path);
		putchar('"');
		putzstr(" could not be located");
		psyc_diag_end();
		psyc_exit_failure();
	}
	len ::= file_size_bytes(path);
	if(len == 0)
	{
		psyc_warning_begin(zero);
		putzstr("file ");
		putchar('"');
		putzstr(path);
		putchar('"');
		putzstr(" exists but is empty");
		psyc_diag_end();
	}
	data : u8 mut? := arena_alloc(a, len + 1);
	file_read(path, data, len);
	deref(data # len) = 0;
	return data;
};

precompile_build_file ::= func(prog : program mut?, path : u8?, a : arena mut? -> v0)
{
	len ::= zstrlen(path);
	source ::= fully_read_file(path, a);
	args ::= ref(prog->compile_args);
	l ::= lex(path, source, args->verbose_lex);
	p ::= parse(ref l, args->verbose_parse);
	file_scope ::= progwalk_file(prog, ref(p.root), path, len);

	region ::= scope_find_region(file_scope, args->build_config, zstrlen(args->build_config));
	if(region == zero)
	{
		psyc_error_begin(zero);
		putzstr("build file ");
		putchar('"');
		putzstr(path);
		putchar('"');
		putzstr(" had no build region named ");
		putchar('"');
		putzstr(args->build_config);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	interpret_build_region(prog, region, file_scope);
};

add_source_file ::= func(progptr : v0? weak, path : u8?, len : u64, a : arena mut? -> v0)
{
	prog ::= progptr@program mut?;
	args ::= ref(prog->compile_args);
	// unfortunately file will need the path as a zero terminated string.
	// alloc time
	pathstr : u8 mut? := arena_alloc(a, len + 1);
	memcopy(pathstr, path, len);
	deref(pathstr # (len)) = 0;

	source ::= fully_read_file(pathstr, a);
	l ::= lex(pathstr, source, args->verbose_lex);
	p ::= parse(ref l, args->verbose_parse);
	progwalk_file(prog, ref(p.root), path, len);
};

add_build_file ::= func(progptr : v0? weak, path : u8?, len : u64, build_config : u8?, build_config_len : u64, a : arena mut? -> v0)
{
	prog ::= progptr@program mut?;
	args ::= ref(prog->compile_args);
	// unfortunately file will need the path as a zero terminated string.
	// alloc time
	pathstr : u8 mut? := arena_alloc(a, len + 1);
	memcopy(pathstr, path, len);
	deref(pathstr # (len)) = 0;

	source ::= fully_read_file(pathstr, a);
	l ::= lex(pathstr, source, args->verbose_lex);
	p ::= parse(ref l, args->verbose_parse);
	file_scope ::= progwalk_file(prog, ref(p.root), path, len);

	region ::= scope_find_region(file_scope, build_config, build_config_len);
	if(region == zero)
	{
		psyc_error_begin(zero);
		putzstr("build file ");
		putchar('"');
		putzstr(pathstr);
		putchar('"');
		putzstr(" had no build region named ");
		putchar('"');
		putbytes(build_config, build_config_len);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	interpret_build_region(prog, region, file_scope);
};

add_preload ::= func(prog : program mut?, a : arena mut? -> v0)
{
	static if(_win32)
	{
		source ::= "_win32 ::= true; _linux ::= false; embed_data ::= struct{data : u8?; size : u64;}; srcloc ::= struct{file : u8?; line : u64; column : u64;};";
	}
	else
	{
		source ::= "_win32 ::= false; _linux ::= true; embed_data ::= struct{data : u8?; size : u64;}; srcloc ::= struct{file : u8?; line : u64; column : u64;};";
	}
	l ::= lex("preload.psy", source, false);
	p ::= parse(ref l, false);
	progwalk_file(prog, ref(p.root), "preload.psy", zstrlen("preload.psy"));

	args ::= prog->compile_args;

	config_bit ::= "_config ::= ";
	len1 ::= zstrlen(config_bit);
	len2 ::= zstrlen(args.build_config);
	src2 : u8 mut? mut := arena_alloc(a, len1 + len2 + 4);
	memcopy(src2, config_bit, len1);
	deref(src2 # len1) = '"';
	memcopy(src2 # (len1 + 1), args.build_config, len2);
	deref(src2 # (len1 + 1 + len2)) = '"';
	deref(src2 # (len1 + 1 + len2 + 1)) = ';';
	deref(src2 # (len1 + 1 + len2 + 2)) = 0;

	l2 ::= lex("preconfig.psy", src2, false);
	p2 ::= parse(ref l2, false);
	progwalk_file(prog, ref(p2.root), "preconfig.psy", zstrlen("preconfig.psy"));
};

add_entrypoint ::= func(prog : program mut? -> v0)
{
	static if(_win32)
	{
		source ::= "
		GetCommandLineW ::= func( -> u16? ):= extern;
		CommandLineToArgvW ::= func(lpCmdLine : u16?, pNumArgs : s32 mut? -> u16?? ):= extern;
		WideCharToMultiByte ::= func(CodePage : u32, dwFlags : s32, lpWideCharStr : u16?, cchWideChar : s32, lpMultiByteStr : u8 mut?, cbMultiByte : s32, lpDefaultChar : u16?, lpUsedDefaultChar : s32 mut? -> s32 ):= extern;
		LocalAlloc ::= func(uFlags : u32, uBytes : u64 -> v0? weak) := extern;
		LocalFree ::= func(hMem : u64 -> u64 ):= extern;

		impl_win32_get_args ::= func(oargc : s32 mut?, oargv : u8?? mut? -> v0)
		{
			cmd_line ::= GetCommandLineW();
			wide_argc : s32 mut;
			wide_argv ::= CommandLineToArgvW(cmd_line, ref wide_argc);

			if(wide_argv == zero)
			{
				deref(oargc) = 0;
			}

			args_cap : u64 mut := wide_argc@_;
			args : u8 mut? mut? mut := LocalAlloc(zero, __sizeof(u8?) * wide_argc);
			args_size : u64 mut := 0;

			i : s32 mut;
			for(i = 0, i < wide_argc, i = i + 1)
			{
				size_needed ::= WideCharToMultiByte(0, 0, deref(wide_argv # i), -1, zero, 0, zero, zero);
				if(size_needed > 0)
				{
					deref(args # args_size) = LocalAlloc(zero, __sizeof(u8) * size_needed);
					WideCharToMultiByte(0, 0, deref(wide_argv # i), -1, deref(args # args_size), size_needed, zero, zero);
					args_size = args_size + 1;
				}
			}

			LocalFree(wide_argv@u64);

			deref(oargc) = wide_argc;
			deref(oargv) = args@_;
		};

		ExitProcess ::= func(uExitCode : u32 -> v0) := extern;
		_psymain ::= func(-> v0)
		{
			local_argc : s32 mut;
			local_argv : u8?? mut;
			impl_win32_get_args(ref local_argc, ref local_argv);
			ExitProcess(main(local_argc, local_argv, zero)@u32);
		};
		";
	}
	else
	{
		source ::= "
			_psymain ::= asm(-> u64) :=
			'
				mov (%rsp), %rdi
				lea 8(%rsp), %rsi
				mov (%rsp), %rax
				lea 1(%rax), %rax
				shl $$3, %rax
				add %rsi, %rax
				mov %rax, %rdx
				call main
				mov %eax, %edi
				mov $$60, %rax
				syscall
			' : '~{rax},~{rdi},~{rsi},~{rdx},~{rcx},~{r11},~{memory}';

			_start ::= func( -> v0)
			{
				iargc : s32 mut;
				iargv : u8?? mut;
				ienvp : u8?? mut;
				ret : s32;

				_psymain();
			};
		";
	}
	l ::= lex("entrypoint.psy", source, false);
	p ::= parse(ref l, false);
	progwalk_file(prog, ref(p.root), "entrypoint.psy", zstrlen("entrypoint.psy"));
};

compile_program ::= func(prog : program mut?, a : arena mut? -> v0)
{
	putzstr("Precompiling...     ");
	putchar(13);
	args ::= ref(prog->compile_args);
	add_preload(prog, a);
	precompile_build_file(prog, args->build_file, a);
	if((prog->type) == (program_type.executable))
	{
		add_entrypoint(prog);
	}
	putzstr("Semantic Analysis...");
	putchar(13);
	semal(prog);

	putzstr("Code Generation...  ");
	putchar(13);
	codegen(prog);

	putzstr("Assembly...         ");
	putchar(13);
	assemble(prog);

	putzstr("Link...             ");
	putchar(13);
	link(prog);
};

do_postbuild ::= func(prog : program mut? -> v0)
{
	psyc_timed_begin(psyc_stage.build);
	defer psyc_timed_end();

	i : u64 mut;
	for(i = 0, i < prog->postbuild_commands_size, i = i + 1)
	{
		cmd ::= deref(prog->postbuild_commands # i);
		len ::= deref(prog->postbuild_command_lens # i);

		sys_shell_command(cmd, len, envp, global_arena);
	}
};

argc : s32 mut;
argv : u8?? mut;
envp : u8?? mut;

main ::= func(iargc : s32, iargv : u8??, ienvp : u8?? -> s32)
{
	argc = iargc;
	argv = iargv;
	envp = ienvp;
	setup_arenas();
	defer destroy_arenas();

	lex_setup();
	grammar_setup();
	progwalk_setup();
	build_setup();
	sval_setup();
	codegen_setup();

	prog : program mut := zero;
	default_progname ::= "program";
	prog.name = default_progname;
	prog.name_len = zstrlen(default_progname);
	prog.on_add_source_file = add_source_file;
	prog.on_add_build_file = add_build_file;
	args ::= ref(prog.compile_args);
	deref(args) = psyc_parse_args(global_arena);
	if(args->verbose_parse)
	{
		putzstr("grammar size: ");
		putuint(grammar_install_count);
		putchar(10);
	}

	if(args->build_file == zero)
	{
		if(args->requested_version)
		{
			// probably just did psyc -v
			// print the version and return silently
			ver ::= __embed("ver.txt");
			putzstr("Psyc ");
			putbytes(ver.data, ver.size);
			putchar(10);
			return 0;
		}
		psyc_error_begin(zero);
		putzstr("no build file specified");
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(!file_exists(args->build_file))
	{
		psyc_error_begin(zero);
		putzstr("build file ");
		putchar('"');
		putzstr(args->build_file);
		putchar('"');
		putzstr(" could not be located");
		psyc_diag_end();
		psyc_exit_failure();
	}
	compile_program(ref prog, global_arena);

	do_postbuild(ref prog);
	psyc_report_timings();
	return 0;
};

== debug ==
{
	_base();
	set_optimization(0);
	debug_symbols(true);
}

== release ==
{
	_base();
	set_optimization(3);
}

== default ==
{
	warning("no build config specified, defaulting to 'debug'");
	debug();
}

== _base ==
{
	add_source_directory("src/stdlib");
	add_source_directory("src");

	set_executable("psyc_out");
	static if(_win32)
	{
		add_link_library("Kernel32.lib");
		add_link_library("Shell32.lib");

		add_link_library("LLVM-C.lib");
		add_link_library("lldCOFF.lib");
		add_link_library("lldCommon.lib");
		add_link_library("lldELF.lib");
		add_link_library("lldMachO.lib");
		add_link_library("lldMinGW.lib");
		add_link_library("lldWasm.lib");
		add_link_library("LLVMAArch64AsmParser.lib");
		add_link_library("LLVMAArch64CodeGen.lib");
		add_link_library("LLVMAArch64Desc.lib");
		add_link_library("LLVMAArch64Disassembler.lib");
		add_link_library("LLVMAArch64Info.lib");
		add_link_library("LLVMAArch64Utils.lib");
		add_link_library("LLVMAggressiveInstCombine.lib");
		add_link_library("LLVMAMDGPUAsmParser.lib");
		add_link_library("LLVMAMDGPUCodeGen.lib");
		add_link_library("LLVMAMDGPUDesc.lib");
		add_link_library("LLVMAMDGPUDisassembler.lib");
		add_link_library("LLVMAMDGPUInfo.lib");
		add_link_library("LLVMAMDGPUTargetMCA.lib");
		add_link_library("LLVMAMDGPUUtils.lib");
		add_link_library("LLVMAnalysis.lib");
		add_link_library("LLVMARMAsmParser.lib");
		add_link_library("LLVMARMCodeGen.lib");
		add_link_library("LLVMARMDesc.lib");
		add_link_library("LLVMARMDisassembler.lib");
		add_link_library("LLVMARMInfo.lib");
		add_link_library("LLVMARMUtils.lib");
		add_link_library("LLVMAsmParser.lib");
		add_link_library("LLVMAsmPrinter.lib");
		add_link_library("LLVMAVRAsmParser.lib");
		add_link_library("LLVMAVRCodeGen.lib");
		add_link_library("LLVMAVRDesc.lib");
		add_link_library("LLVMAVRDisassembler.lib");
		add_link_library("LLVMAVRInfo.lib");
		add_link_library("LLVMBinaryFormat.lib");
		add_link_library("LLVMBitReader.lib");
		add_link_library("LLVMBitstreamReader.lib");
		add_link_library("LLVMBitWriter.lib");
		add_link_library("LLVMBPFAsmParser.lib");
		add_link_library("LLVMBPFCodeGen.lib");
		add_link_library("LLVMBPFDesc.lib");
		add_link_library("LLVMBPFDisassembler.lib");
		add_link_library("LLVMBPFInfo.lib");
		add_link_library("LLVMCFGuard.lib");
		add_link_library("LLVMCFIVerify.lib");
		add_link_library("LLVMCodeGen.lib");
		//add_link_library("LLVMCodeGenData.lib");
		add_link_library("LLVMCodeGenTypes.lib");
		add_link_library("LLVMCore.lib");
		add_link_library("LLVMCoroutines.lib");
		add_link_library("LLVMCoverage.lib");
		add_link_library("LLVMDebugInfoBTF.lib");
		add_link_library("LLVMDebugInfoCodeView.lib");
		add_link_library("LLVMDebuginfod.lib");
		add_link_library("LLVMDebugInfoDWARF.lib");
		add_link_library("LLVMDebugInfoGSYM.lib");
		add_link_library("LLVMDebugInfoLogicalView.lib");
		add_link_library("LLVMDebugInfoMSF.lib");
		add_link_library("LLVMDebugInfoPDB.lib");
		add_link_library("LLVMDemangle.lib");
		add_link_library("LLVMDiff.lib");
		add_link_library("LLVMDlltoolDriver.lib");
		add_link_library("LLVMDWARFLinker.lib");
		add_link_library("LLVMDWARFLinkerClassic.lib");
		add_link_library("LLVMDWARFLinkerParallel.lib");
		add_link_library("LLVMDWP.lib");
		add_link_library("LLVMExecutionEngine.lib");
		add_link_library("LLVMExegesis.lib");
		add_link_library("LLVMExegesisAArch64.lib");
		add_link_library("LLVMExegesisMips.lib");
		add_link_library("LLVMExegesisPowerPC.lib");
		add_link_library("LLVMExegesisX86.lib");
		add_link_library("LLVMExtensions.lib");
		add_link_library("LLVMFileCheck.lib");
		add_link_library("LLVMFrontendDriver.lib");
		add_link_library("LLVMFrontendHLSL.lib");
		add_link_library("LLVMFrontendOffloading.lib");
		add_link_library("LLVMFrontendOpenACC.lib");
		add_link_library("LLVMFrontendOpenMP.lib");
		add_link_library("LLVMFuzzerCLI.lib");
		add_link_library("LLVMFuzzMutate.lib");
		add_link_library("LLVMGlobalISel.lib");
		add_link_library("LLVMHexagonAsmParser.lib");
		add_link_library("LLVMHexagonCodeGen.lib");
		add_link_library("LLVMHexagonDesc.lib");
		add_link_library("LLVMHexagonDisassembler.lib");
		add_link_library("LLVMHexagonInfo.lib");
		add_link_library("LLVMHipStdPar.lib");
		add_link_library("LLVMInstCombine.lib");
		add_link_library("LLVMInstrumentation.lib");
		add_link_library("LLVMInterfaceStub.lib");
		add_link_library("LLVMInterpreter.lib");
		add_link_library("LLVMipo.lib");
		add_link_library("LLVMIRPrinter.lib");
		add_link_library("LLVMIRReader.lib");
		add_link_library("LLVMJITLink.lib");
		add_link_library("LLVMLanaiAsmParser.lib");
		add_link_library("LLVMLanaiCodeGen.lib");
		add_link_library("LLVMLanaiDesc.lib");
		add_link_library("LLVMLanaiDisassembler.lib");
		add_link_library("LLVMLanaiInfo.lib");
		add_link_library("LLVMLibDriver.lib");
		add_link_library("LLVMLineEditor.lib");
		add_link_library("LLVMLinker.lib");
		add_link_library("LLVMLoongArchAsmParser.lib");
		add_link_library("LLVMLoongArchCodeGen.lib");
		add_link_library("LLVMLoongArchDesc.lib");
		add_link_library("LLVMLoongArchDisassembler.lib");
		add_link_library("LLVMLoongArchInfo.lib");
		add_link_library("LLVMLTO.lib");
		add_link_library("LLVMMC.lib");
		add_link_library("LLVMMCA.lib");
		//add_link_library("LVMMCDisassembler.lib");
		add_link_library("LLVMMCJIT.lib");
		add_link_library("LLVMMCParser.lib");
		add_link_library("LLVMMipsAsmParser.lib");
		add_link_library("LLVMMipsCodeGen.lib");
		add_link_library("LLVMMipsDesc.lib");
		add_link_library("LLVMMipsDisassembler.lib");
		add_link_library("LLVMMipsInfo.lib");
		add_link_library("LLVMMIRParser.lib");
		add_link_library("LLVMMSP430AsmParser.lib");
		add_link_library("LLVMMSP430CodeGen.lib");
		add_link_library("LLVMMSP430Desc.lib");
		add_link_library("LLVMMSP430Disassembler.lib");
		add_link_library("LLVMMSP430Info.lib");
		add_link_library("LLVMNVPTXCodeGen.lib");
		add_link_library("LLVMNVPTXDesc.lib");
		add_link_library("LLVMNVPTXInfo.lib");
		add_link_library("LLVMObjCARCOpts.lib");
		add_link_library("LLVMObjCopy.lib");
		add_link_library("LLVMObject.lib");
		add_link_library("LLVMObjectYAML.lib");
		//add_link_library("LLVMOptDriver.lib");
		add_link_library("LLVMOption.lib");
		add_link_library("LLVMOrcDebugging.lib");
		add_link_library("LLVMOrcJIT.lib");
		add_link_library("LLVMOrcShared.lib");
		add_link_library("LLVMOrcTargetProcess.lib");
		add_link_library("LLVMPasses.lib");
		add_link_library("LLVMPowerPCAsmParser.lib");
		add_link_library("LLVMPowerPCCodeGen.lib");
		add_link_library("LLVMPowerPCDesc.lib");
		add_link_library("LLVMPowerPCDisassembler.lib");
		add_link_library("LLVMPowerPCInfo.lib");
		add_link_library("LLVMProfileData.lib");
		add_link_library("LLVMRemarks.lib");
		add_link_library("LLVMRISCVAsmParser.lib");
		add_link_library("LLVMRISCVCodeGen.lib");
		add_link_library("LLVMRISCVDesc.lib");
		add_link_library("LLVMRISCVDisassembler.lib");
		add_link_library("LLVMRISCVInfo.lib");
		add_link_library("LLVMRISCVTargetMCA.lib");
		add_link_library("LLVMRuntimeDyld.lib");
		//add_link_library("LLVMSandboxIR.lib");
		add_link_library("LLVMScalarOpts.lib");
		add_link_library("LLVMSelectionDAG.lib");
		add_link_library("LLVMSparcAsmParser.lib");
		add_link_library("LLVMSparcCodeGen.lib");
		add_link_library("LLVMSparcDesc.lib");
		add_link_library("LLVMSparcDisassembler.lib");
		add_link_library("LLVMSparcInfo.lib");
		add_link_library("LLVMSupport.lib");
		add_link_library("LLVMSymbolize.lib");
		add_link_library("LLVMSystemZAsmParser.lib");
		add_link_library("LLVMSystemZCodeGen.lib");
		add_link_library("LLVMSystemZDesc.lib");
		add_link_library("LLVMSystemZDisassembler.lib");
		add_link_library("LLVMSystemZInfo.lib");
		add_link_library("LLVMTableGen.lib");
		//add_link_library("LLVMTableGenBasic.lib");
		add_link_library("LLVMTableGenCommon.lib");
		add_link_library("LLVMTarget.lib");
		add_link_library("LLVMTargetParser.lib");
		add_link_library("LLVMTextAPI.lib");
		add_link_library("LLVMTextAPIBinaryReader.lib");
		add_link_library("LLVMTransformUtils.lib");
		add_link_library("LLVMVEAsmParser.lib");
		add_link_library("LLVMVECodeGen.lib");
		add_link_library("LLVMVectorize.lib");
		add_link_library("LLVMVEDesc.lib");
		add_link_library("LLVMVEDisassembler.lib");
		add_link_library("LLVMVEInfo.lib");
		add_link_library("LLVMWebAssemblyAsmParser.lib");
		add_link_library("LLVMWebAssemblyCodeGen.lib");
		add_link_library("LLVMWebAssemblyDesc.lib");
		add_link_library("LLVMWebAssemblyDisassembler.lib");
		add_link_library("LLVMWebAssemblyInfo.lib");
		add_link_library("LLVMWebAssemblyUtils.lib");
		add_link_library("LLVMWindowsDriver.lib");
		add_link_library("LLVMWindowsManifest.lib");
		add_link_library("LLVMX86AsmParser.lib");
		add_link_library("LLVMX86CodeGen.lib");
		add_link_library("LLVMX86Desc.lib");
		add_link_library("LLVMX86Disassembler.lib");
		add_link_library("LLVMX86Info.lib");
		add_link_library("LLVMX86TargetMCA.lib");
		add_link_library("LLVMXCoreCodeGen.lib");
		add_link_library("LLVMXCoreDesc.lib");
		add_link_library("LLVMXCoreDisassembler.lib");
		add_link_library("LLVMXCoreInfo.lib");
		add_link_library("LLVMXRay.lib");
		add_link_library("LTO.lib");
		add_link_library("Remarks.lib");
	}
	else
	{
		// libc/crt
		add_link_library("-lc -dynamic-linker /lib64/ld-linux-x86-64.so.2");
		add_link_library("/usr/lib/x86_64-linux-gnu/crti.o");
		add_link_library("/usr/lib/x86_64-linux-gnu/crtn.o");

		// llvm libs
		add_link_library("$(llvm-config-19 --ldflags --libs --system-libs all) -no-pie");
	}
}
