cli :: namespace
{
	default_target_name ::= "default";
	compiler_args :: struct
	{
		input_files : u8& const& := null;
		input_files_count := 0@u64;
		output_dirpath : u8& const;
		target_name : u8& const;
		linker_name : u8& const;
		dump_ast ::= false;
		dump_ir ::= false;
	};

	parse_args :: (argc : i64, argv : u8& const&) -> compiler_args
	{
		ret ::= compiler_args{};
		defer return ret;

		for(i ::= 0, i < argc, i = i + 1)
		{
			arg = (argv + i);
			argnext = (argv + 1 + i);
			argnext_avail ::= i < (argc - 1);

			if(arg == "-v")
			{
				print_version_info();
			}
			else if(arg == "-o")
			{
				assert(argnext_avail, "output \"{}\" requires a proceeding argument value, which you didn't provide", arg);
				ret.output_dirpath = argnext;
			}
			else if(arg == "-t")
			{
				ret.target_name = argnext;
			}
			else if(arg == "-l")
			{
				ret.linker_name = argnext;
			}
			else if(arg == "--dump-ast")
			{
				ret.dump_ast = true;
			}
			else if(arg == "--dump-ir")
			{
				ret.dump_ir = true;
			}
			else
			{
				// assume now a list of filenames starts...
				ret.input_files = arg;
				ret.input_files_count = argc - i;
				// todo: validate that these strings represent valid paths.
			}
		}
	}

	print_version_info :: () -> u0
	{
		io::print("""
		OVERVIEW: Psy Compiler

		USAGE: psyc [options] files...

		OPTIONS:
		-v                    display version info and help.
		-o [dir]              designates an output directory.
		-t [target-name]      tell the compiler to find a build meta-region of the given name to treat as build instructions.
		-l [linker-name]      specifies which linker to use.

		FILES:
		- Must be absolute or relative paths (with respect to current working directory).
		- Contain valid psy source code.
		""");
	}
}