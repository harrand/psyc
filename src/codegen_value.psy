// preamble
ir : u64 mut;

cg_helper_functions ::= struct
{
	children : func(ctx : context mut, prog : program mut&, offset : u64, back_offset : u64) -> v0;
	type : func(t : ty, prog : program mut&) -> u64;
};
cg : cg_helper_functions mut;

// cgv code begins here

cgvtag ::= enum
{
	.misc := 1;
	.var := 2;
	.valzero := 3;
};

cgv ::= struct
{
	tag : cgvtag;
	ll : u64;
	type : ty;
};

cgv_is_zero ::= func(v : cgv) -> bool
{
	return (v.tag) == (cgvtag.valzero);
};

cgv_conv_fn ::= struct
{
	fn : func(v : cgv, to : ty, prog : program mut&, loc : srcloc) -> cgv;
};
cgv_conv_table : cgv_conv_fn mut#16;

cgv_zero_as ::= func(type : ty, prog : program mut&) -> cgv
{
	ret : cgv mut := cgv
	{
		.tag := cgvtag.misc;
		.type := type;
	};
	if((type.tag) == (tytag.ptr))
	{
		ptr ::= type.ptr;
		underlying ::= deref((ptr.underlying)@ty&);
		cg_u ::= cg.type(underlying, prog);
		(ret.ll) = LLVMConstPointerNull(LLVMPointerType(cg_u, 0));
		return ret;
	}
	cg_t ::= cg.type(type, prog);
	(ret.ll) = LLVMConstNull(cg_t);
	return ret;
};

cgv_convert ::= func(v : cgv, to : ty, prog : program mut&, loc : srcloc) -> cgv
{
	if(cgv_is_zero(v))
	{
		return cgv_zero_as(to, prog);
	}
	from ::= v.type;
	conv ::= ty_get_conv(from, to);

	do_conv ::= deref(cgv_conv_table at (conv@s64));
	ret : cgv mut := do_conv.fn(v, to, prog, loc);
	(ret.type) = to;
	return ret;
};

cgv_load ::= func(v : cgv mut, prog : program mut&) -> cgv
{
	(v.ll) = LLVMBuildLoad2(ir, cg.type(v.type, prog), v.ll, "");
	return v;
};

cgv_load_if_variable ::= func(v : cgv mut&, prog : program mut&) -> v0
{
	if((v->tag) == (cgvtag.var))
	{
		deref(v) = cgv_load(deref v, prog);
	}
};

putll ::= func(ll : u64) -> v0
{
	puts(LLVMPrintValueToString(ll));
};

== build ==
{
	add_source_file("type.psy");
	add_source_file("llvm.psy");
}
