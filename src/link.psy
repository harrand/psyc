lar : arena mut& mut;

ShellExecuteA ::= func(wnd : u64, operation : u8&, file : u8&, params : u8&, directory : u8&, showCmd : s32) -> u64 := extern;
SECURITY_ATTRIBUTES ::= struct
{
	nLength : u32;
	lpSecurityDescriptor : v0&;
	bInheritHandle : s32;
};
STARTUPINFOA ::= struct
{
	cb : u32;
	lpReserved : u8&;
	lpDesktop : u8&;
	lpTitle : u8&;
	dwX : u32;
	dwY : u32;
	dwXSize : u32;
	dwYSize : u32;
	dwXCountChars : u32;
	dwYCountChars : u32;
	dwFillAttribute : u32;
	dwFlags : u32;
	wShowWindow : u16;
	cbReserved2 : u16;
	lpReserved2 : u8&;
	hStdInput : u64;
	hStdOutput : u64;
	hStdError : u64;
};
PROCESS_INFORMATION ::= struct
{
	hProcess : u64;
	hThread : u64;
	dwProcessId : u32;
	dwThreadId : u32;
};
CreateProcessA ::= func(lpApplicationName : u8&, lpCommandLine : u8&, lpProcessAttributes : SECURITY_ATTRIBUTES&, lpThreadAttributes : SECURITY_ATTRIBUTES&, bInheritHandles : s32, dwCreationFlags : s32, lpEnvironment : v0&, lpCurrentDirectory : u8&, lpStartupInfo : STARTUPINFOA&, lpProcessInformation : PROCESS_INFORMATION&) -> s32 := extern;

append_link_library_string ::= func(prog : program&, str : u8 mut& mut&) -> v0
{
	oldstr ::= deref str;
	if((prog->link_library_size) == 0)
	{
		return;
	}
	// figure out how much space we need
	space_needed : u64 mut := 0;
	i : u64 mut;
	for(i = 0, i < (prog->link_library_size), i = i + 1)
	{
		space_needed = (space_needed + (deref((prog->link_library_lens) at i)) + 1);
	}
	oldlen ::= cstrlen(oldstr);
	newstr : u8 mut& := arena_push(lar, space_needed + oldlen);
	__memcpy(newstr, oldstr, oldlen);
	// turn the null terminator in the old string to a space
	deref(newstr at oldlen) = ' ';
	offset : u64 mut := 0;
	for(i = 0, i < (prog->link_library_size), i = i + 1)
	{
		curstr ::= deref((prog->link_libraries) at i);
		curlen ::= deref((prog->link_library_lens) at i);
		__memcpy(newstr at (oldlen + offset), curstr, curlen);
		deref(newstr at (oldlen + offset + curlen)) = ' ';
		offset = (offset + curlen + 1);
	}
	deref(newstr at (space_needed + oldlen - 1)) = 0;
	deref(str) = newstr;
};

append_msvc_flags ::= func(str : u8 mut& mut&) -> v0
{
	oldstr ::= deref str;
	oldlen ::= cstrlen(oldstr);

	msvc_flags ::= " /NODEFAULTLIB /SUBSYTEM:CONSOLE /ENTRY:_psymain";
	space_needed ::= cstrlen(msvc_flags);

	newstr : u8 mut& := arena_push(lar, space_needed + oldlen + 1);
	__memcpy(newstr, oldstr, oldlen);
	__memcpy(newstr at oldlen, msvc_flags, cstrlen(msvc_flags));
	deref(newstr at (space_needed + oldlen)) = 0;
	deref(str) = newstr;
};

append_output ::= func(prog : program&, str : u8 mut& mut&) -> v0
{
	oldstr ::= deref str;
	oldlen ::= cstrlen(oldstr);

	out_flags ::= " /OUT:";
	out_name ::= prog->name;
	extension ::= default_exe_extension;
	space_needed ::= cstrlen(out_flags) + (prog->name_len) + cstrlen(extension);

	newstr : u8 mut& := arena_push(lar, space_needed + oldlen + 1);
	__memcpy(newstr, oldstr, oldlen);
	__memcpy(newstr at oldlen, out_flags, cstrlen(out_flags));
	__memcpy(newstr at (oldlen + cstrlen(out_flags)), out_name, prog->name_len);
	__memcpy(newstr at (oldlen + cstrlen(out_flags) + (prog->name_len)), extension, cstrlen(extension));
	deref(newstr at (space_needed + oldlen)) = 0;
	deref(str) = newstr;
};

prepend_linker_name ::= func(str : u8 mut& mut&) -> v0
{
	oldstr ::= deref str;
	oldlen ::= cstrlen(oldstr);

	lnkname ::= "lld-link ";
	space_needed ::= cstrlen(lnkname);

	newstr : u8 mut& := arena_push(lar, space_needed + oldlen + 1);
	__memcpy(newstr, lnkname, space_needed);
	__memcpy(newstr at space_needed, oldstr, oldlen);
	deref(newstr at (space_needed + oldlen)) = 0;
	deref(str) = newstr;
};

link_executable ::= func(prog : program mut&) -> v0
{
};

link_library ::= func(prog : program mut&) -> v0
{
};

link ::= func(prog : program mut&) -> v0
{
	psyc_timed(psyc_stage.link);	

	path_len ::= (prog->name_len) + cstrlen(default_obj_extension);
	cmd : u8 mut& mut := arena_push(lar, path_len + 2);
	__memcpy(cmd at 0, prog->name, prog->name_len);
	__memcpy(cmd at (prog->name_len), default_obj_extension, cstrlen(default_obj_extension));
	deref(cmd at path_len) = ' ';
	deref(cmd at (path_len + 1)) = 0;

	append_link_library_string(prog, ref cmd);
	append_msvc_flags(ref cmd);
	prepend_linker_name(ref cmd);
	append_output(prog, ref cmd);

	args ::= ref(prog->compile_args);
	if(args->verbose_link)
	{
		puts("Linker Command: ");
		putchar(10);
		puts(cmd);
		putchar(10);
	}

	ShellExecuteA(0, "open", cmd, null, null, 5);

	if((prog->type) == (program_type.executable))
	{
		link_executable(prog);
	}
	if((prog->type) == (program_type.library))
	{
		link_library(prog);
	}
};

link_setup ::= func(a : arena mut&) -> v0
{
	lar = a;
};

== build ==
{
	add_source_file("diag.psy");
	add_source_file("program.psy");
	add_link_library("Kernel32.lib");
}
