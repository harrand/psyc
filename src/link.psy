append_link_library_string ::= func(prog : program?, str : u8 mut? mut? -> v0)
{
	oldstr ::= deref str;
	if((prog->link_library_size) == 0)
	{
		return;
	}
	// figure out how much space we need
	space_needed : u64 mut := 0;
	i : u64 mut;
	for(i = 0, i < (prog->link_library_size), i = i + 1)
	{
		space_needed = (space_needed + (deref((prog->link_library_lens) # i)) + 1);
	}
	oldlen ::= zstrlen(oldstr);
	newstr : u8 mut? := arena_alloc(global_arena, space_needed + oldlen);
	memcopy(newstr, oldstr, oldlen);
	// turn the zero terminator in the old string to a space
	deref(newstr # oldlen) = ' ';
	offset : u64 mut := 0;
	for(i = 0, i < (prog->link_library_size), i = i + 1)
	{
		curstr ::= deref((prog->link_libraries) # i);
		curlen ::= deref((prog->link_library_lens) # i);
		memcopy(newstr # (oldlen + offset), curstr, curlen);
		deref(newstr # (oldlen + offset + curlen)) = ' ';
		offset = (offset + curlen + 1);
	}
	deref(newstr # (space_needed + oldlen - 1)) = 0;
	deref(str) = newstr;
};

append_msvc_flags ::= func(str : u8 mut? mut? -> v0)
{
	oldstr ::= deref str;
	oldlen ::= zstrlen(oldstr);

	msvc_flags ::= " /NODEFAULTLIB /SUBSYSTEM:CONSOLE /ENTRY:_psymain /STACK:8000000,8000000 Kernel32.lib";
	space_needed ::= zstrlen(msvc_flags);

	newstr : u8 mut? := arena_alloc(global_arena, space_needed + oldlen + 1);
	memcopy(newstr, oldstr, oldlen);
	memcopy(newstr # oldlen, msvc_flags, zstrlen(msvc_flags));
	deref(newstr # (space_needed + oldlen)) = 0;
	deref(str) = newstr;
};

append_output ::= func(prog : program?, str : u8 mut? mut? -> v0)
{
	oldstr ::= deref str;
	oldlen ::= zstrlen(oldstr);

	out_flags ::= " /OUT:";
	out_name ::= prog->name;
	extension ::= default_exe_extension;
	space_needed ::= zstrlen(out_flags) + (prog->name_len) + zstrlen(extension);

	newstr : u8 mut? := arena_alloc(global_arena, space_needed + oldlen + 1);
	memcopy(newstr, oldstr, oldlen);
	memcopy(newstr # oldlen, out_flags, zstrlen(out_flags));
	memcopy(newstr # (oldlen + zstrlen(out_flags)), out_name, prog->name_len);
	memcopy(newstr # (oldlen + zstrlen(out_flags) + (prog->name_len)), extension, zstrlen(extension));
	deref(newstr # (space_needed + oldlen)) = 0;
	deref(str) = newstr;
};

prepend_linker_name ::= func(str : u8 mut? mut? -> v0)
{
	oldstr ::= deref str;
	oldlen ::= zstrlen(oldstr);

	lnkname ::= "lld-link ";
	space_needed ::= zstrlen(lnkname);

	newstr : u8 mut? := arena_alloc(global_arena, space_needed + oldlen + 1);
	memcopy(newstr, lnkname, space_needed);
	memcopy(newstr # space_needed, oldstr, oldlen);
	deref(newstr # (space_needed + oldlen)) = 0;
	deref(str) = newstr;
};

prepend_archiver_name ::= func(str : u8 mut? mut? -> v0)
{
	oldstr ::= deref str;
	oldlen ::= zstrlen(oldstr);

	lnkname ::= "llvm-lib ";
	space_needed ::= zstrlen(lnkname);

	newstr : u8 mut? := arena_alloc(global_arena, space_needed + oldlen + 1);
	memcopy(newstr, lnkname, space_needed);
	memcopy(newstr # space_needed, oldstr, oldlen);
	deref(newstr # (space_needed + oldlen)) = 0;
	deref(str) = newstr;
};

link ::= func(prog : program mut? -> v0)
{
	if((prog->type) == (program_type.object))
	{
		return;
	}
	psyc_timed_begin(psyc_stage.link);	
	defer psyc_timed_end();

	path_len ::= (prog->name_len) + zstrlen(default_obj_extension);
	cmd : u8 mut? mut := arena_alloc(global_arena, path_len + 2);
	memcopy(cmd # 0, prog->name, prog->name_len);
	memcopy(cmd # (prog->name_len), default_obj_extension, zstrlen(default_obj_extension));
	deref(cmd # path_len) = ' ';
	deref(cmd # (path_len + 1)) = 0;

	if((prog->type) == (program_type.executable))
	{
		append_link_library_string(prog, ref cmd);
		append_msvc_flags(ref cmd);
		prepend_linker_name(ref cmd);
		append_output(prog, ref cmd);
	}

	if((prog->type) == (program_type.library))
	{
		prepend_archiver_name(ref cmd);
	}

	args ::= ref(prog->compile_args);
	if(args->verbose_link)
	{
		putzstr("Linker Command: ");
		putchar(10);
		putzstr(cmd);
		putchar(10);
	}

	invoke_command(cmd);
};

== build ==
{
	add_source_file("diag.psy");
	add_source_file("program.psy");
	add_link_library("Kernel32.lib");
}
