parse_state ::= struct
{
	lex : lex_state&;
	lex_cursor : u64 mut;

	node_array : ast mut&;
	node_array_cap : u64;
	node_array_size : u64;

	recursive_offset : u64 mut;
};

[[private]]
node_array_reserve ::= func(s : parse_state mut&, cap : u64) -> v0
{
	lex ::= s->lex;
	a ::= lex->ar;

	oldptr ::= s->node_array;
	oldcap ::= s->node_array_cap;

	(s->node_array_cap) = cap;
	(s->node_array) = arena_push(a, __sizeof(deref (s->node_array)) * (s->node_array_cap));
	if(oldptr != null)
	{
		__memcpy(s->node_array, oldptr, oldcap);
	}
};

[[private]]
node_array_add ::= func(s : parse_state mut&, node : ast) -> v0
{
	cap ::= s->node_array_cap;
	if((s->node_array_size) >= cap)
	{
		node_array_reserve(s, cap * 2);
	}

	deref((s->node_array) at (s->node_array_size)) = node;
	(s->node_array_size) = (s->node_array_size) + 1;
};

parse_state_hash ::= func(s : parse_state mut&) -> u64
{
	return hash_state(s->node_array, s->node_array_size);
};

parse_state_print ::= func(s : parse_state mut&) -> v0
{
	i : u64 mut;
	putchar('{');
	putchar(10);
	for(i = 0, i < (s->node_array_size), i = i + 1)
	{
		putchar(9);
		cur_node ::= (s->node_array) at i;
		if((cur_node->type) != (ast_type.unparsed_token))
		{
			puts(__enumname(cur_node->type));
			if((cur_node->type) == (ast_type.root))
			{
				root ::= cur_node->root;
				puts(" [");
				puts(root.path);
				puts("]");
			}
		}
		if((cur_node->type) == (ast_type.unparsed_token))
		{
			utok ::= cur_node->utok;
			tokdata ::= utok.tok;
			puts(__enumname(tokdata.tok));
		}
		putchar(' ');
		print_srcloc(cur_node->loc);
		putchar(10);
	}
	putchar(10);
	putchar('}');
};

parse_slice ::= alias lex_slice;

shift ::= func(s : parse_state mut&) -> v0
{
	// make unparsed token.
	lex ::= s->lex;
	tokdata ::= deref ((lex->tokens) at (s->lex_cursor));
	tok ::= tokdata.tok;
	if(token_affects_code(tok))
	{
		node_array_add(s, make_unparsed_token_ast(tokdata));
	}
	(s->lex_cursor) = (s->lex_cursor) + 1;
};

commit ::= func(s : parse_state mut&, nodes_to_commit : parse_slice) -> v0
{
	if((nodes_to_commit.off) == 0)
	{
		if((s->recursive_offset) == 0)
		{
			psyc_panic(srcloc_current(), "attempt to commit the 0th node (the root node)");
		}
	}
	lex ::= s->lex;
	root ::= (s->node_array) at 0;
	i : u64 mut;
	for(i = 0, i < (nodes_to_commit.len), i = i + 1)
	{
		off ::= (nodes_to_commit.off) + i;
		cur ::= ((s->node_array) at off);
		ast_add_child(root, deref cur, lex->ar);
	}
	// remove children.
	(s->node_array_size) = (s->node_array_size) - (nodes_to_commit.len);
	offsetted_nodes_begin ::= (s->node_array) at (nodes_to_commit.off);
	offsetted_nodes_end ::= (s->node_array) at ((nodes_to_commit.off) + (nodes_to_commit.len));
	__memcpy(offsetted_nodes_begin, offsetted_nodes_end, __sizeof(ast) * (nodes_to_commit.len));

	(s->recursive_offset) = zero;
};

[[private]]
mirrored_memcpy ::= func(dst : u8 mut&, src : u8&, count : u64) -> v0
{
	i : u64 mut;
	for(i = (count - 1), i > 0, i = i - 1)
	{
		deref(dst at i) = deref(src at i);
	}
};

[[private]]
impl_shift_nodes_right ::= func(s : parse_state mut&, pivot : u64, shift_amount : u64) -> v0
{
	// say our nodes are:
	// 0, 1, 2, 3, 4
	// the pivot represents some index in this list
	// the shift_amount will shift all elements at and rightwards of the pivot by that amount, adding extra space which will be zero'd out.
	// so: impl_shift_nodes_right(my_nodes, 3, 2) =>
	// 0, 1, 2, 0, 0, 3, 4
	newsize ::= (s->node_array_size) + shift_amount;
	if(newsize >= (s->node_array_cap))
	{
		// dont technically need to double it but lets try to amortise this edge-case away.
		node_array_reserve(s, newsize * 2);
	}

	// shift stuff to the right. because we're shifting to the right we could overwrite overlapping regions
	// so we do it in backwards order.
	copy_src ::= (s->node_array) at pivot;
	copy_dst ::= copy_src at shift_amount;
	mirrored_memcpy(copy_dst@_, copy_src@_, __sizeof(deref (s->node_array)) * ((s->node_array_size) - (pivot + shift_amount)));
	// zero out the gap
	__memset(copy_src, 0, __sizeof(deref (s->node_array)) * shift_amount);
	(s->node_array_size) = (s->node_array_size) + shift_amount;
};

[[private]]
impl_shift_nodes_left ::= func(s : parse_state mut&, pivot : u64, shift_amount : u64) -> v0
{
	// say our nodes are:
	// 0, 1, 2, 3, 4, 5, 6
	// the pivot represents some index in this list
	// we overwrite 'shift_amount' elements at and rightwards of the pivot by the same number of proceeding elements
	// so: impl_shift_nodes_left(my_nodes, 3, 2) =>
	// 0, 1, 2, 5, 6
	copydst ::= (s->node_array) at pivot;
	copysrc ::= copydst at shift_amount;
	// we're going leftwards so memcpy is safe.
	count ::= (s->node_array_size) - (pivot + shift_amount);
	__memcpy(copydst, copysrc, __sizeof(deref (s->node_array)) * count);
	(s->node_array_size) = (s->node_array_size) - shift_amount;
};

reduce ::= func(s : parse_state mut&, destroy : parse_slice, new_nodes : ast&, new_nodes_size : u64) -> v0
{
	off ::= (destroy.off) + (s->recursive_offset);
	// remove children
	nodes_diff ::= ((destroy.len)@s64) - (new_nodes_size@s64);
	if(nodes_diff < 0)
	{
		// adding more nodes than we destroyed. lets shift everything after the offset by that amount.
		posdiff ::= -nodes_diff;
		impl_shift_nodes_right(s, off, posdiff@u64);
		// do the whole copy, i allow the new data to stomp over the old.
		__memcpy((s->node_array) at off, new_nodes, __sizeof(deref (s->node_array)) * new_nodes_size);
	}
	if(nodes_diff == 0)
	{
		// do the whole copy, i allow the new data to stomp over the old.
		__memcpy((s->node_array) at off, new_nodes, __sizeof(deref (s->node_array)) * new_nodes_size);
	}
	if(nodes_diff > 0)
	{
		// destroying more nodes than we're adding.
		impl_shift_nodes_left(s, off, nodes_diff@u64);
		__memcpy((s->node_array) at off, new_nodes, __sizeof(deref (s->node_array)) * new_nodes_size);
	}

	(s->recursive_offset) = zero;
};

parse_complete ::= func(p : parse_state&) -> bool
{
	lex ::= p->lex;
	return (p->lex_cursor) >= (lex->tokens_size);
};

parse ::= func(lex : lex_state&, verbose_parse : bool) -> parse_state
{
	psyc_timed(psyc_stage.parse);
	root : ast mut := make_root_ast(lex->path);

	state : parse_state mut := zero;
	state.lex = lex;

	node_array_reserve(ref state, 1024);
	node_array_add(ref state, root);

	while(!parse_complete(ref state))
	{
		hash ::= parse_state_hash(ref state);
		chord ::= grammar_find_chord(hash);
		if(chord == null)
		{
			psyc_error(zero, "could not find chord matching state:");
			psyc_colour_yellow();
			parse_state_print(ref state);
			psyc_colour_reset();
			psyc_exit_failure();
		}
		fn ::= chord->fn;
		if(fn == null)
		{
			psyc_error(zero, "could not find chord matching state:");
			psyc_colour_yellow();
			parse_state_print(ref state);
			psyc_colour_reset();
			psyc_exit_failure();
		}
		result ::= fn(state.node_array, state.node_array_size);
		if((result.action) == (parse_action.shift))
		{
			shift(ref state);
		}
		if((result.action) == (parse_action.recurse))
		{
			psyc_panic(srcloc_current(), "todo: recurse");
		}
		if((result.action) == (parse_action.commit))
		{
			psyc_panic(srcloc_current(), "todo: commit");
		}
		if((result.action) == (parse_action.error))
		{
			psyc_fatal_error(zero, result.errmsg);
		}
	}

	//my_new_nodes : ast mut#2 := zero;
	//reduce(ref state, parse_slice{.off := 2; .len := 1;}, my_new_nodes at 0, 2);
	//commit(ref state, parse_slice{.off := 2; .len := 3;});
	//ast_add_child(ref root, make_unparsed_token_ast(deref ((lex->tokens) at 0)), lex->ar);

	if(verbose_parse)
	{
		i : u64 mut;
		for(i = 0, i < (state.node_array_size), i = i + 1)
		{
			ast_verbose_print((state.node_array) at i, 0);
		}
	}

	return state;
};

== build ==
{
	add_source_file("lex.psy");
	add_source_file("diag.psy");
	add_source_file("hash.psy");
	add_source_file("grammar.psy");
}
