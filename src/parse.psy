parse_state ::= struct
{
	lex : lex_state&;
	lex_cursor : u64 mut;

	lookahead : ast mut;

	node_array : ast mut&;
	node_array_cap : u64;
	node_array_size : u64;

	recursive_offset : u64 mut;
	root : ast mut;
};

[[private]]
node_array_reserve ::= func(s : parse_state mut&, cap : u64) -> v0
{
	lex ::= s->lex;
	a ::= lex->ar;

	oldptr ::= s->node_array;
	oldcap ::= s->node_array_cap;

	(s->node_array_cap) = cap;
	(s->node_array) = arena_push(a, __sizeof(deref (s->node_array)) * (s->node_array_cap));
	if(oldptr != null)
	{
		__memcpy(s->node_array, oldptr, oldcap);
	}
};

[[private]]
node_array_add ::= func(s : parse_state mut&, node : ast) -> v0
{
	cap ::= s->node_array_cap;
	if((s->node_array_size) >= cap)
	{
		node_array_reserve(s, cap * 2);
	}

	deref((s->node_array) at (s->node_array_size)) = node;
	(s->node_array_size) = (s->node_array_size) + 1;
};

parse_get_lookahead ::= func(s : parse_state&, cursor_delta : u64 mut&) -> ast
{
	lex ::= s->lex;
	delta : u64 mut := 1;
	cursor ::= (s->lex_cursor) + delta;
	if(cursor < (lex->tokens_size))
	{
		// just get the next token and convert it to an unparsed ast
		tokdata : token_data mut := deref((lex->tokens) at ((s->lex_cursor) + delta));
		while(!token_affects_code(tokdata.tok))
		{
			delta = delta + 1;
			tokdata = deref((lex->tokens) at ((s->lex_cursor) + delta));
		}
		if(cursor_delta != null)
		{
			deref(cursor_delta) = delta;
		}
		return make_unparsed_token_ast(tokdata);
	}
	return zero;
};

parse_state_hash ::= func(s : parse_state mut&, include_lookahead : bool, allow_begin_state : bool) -> u64
{
	array_start ::= (s->node_array) at (s->recursive_offset);
	array_len ::= (s->node_array_size) - (s->recursive_offset);
	hash : u64 mut := hash_state(array_start, array_len);

	la ::= s->lookahead;
	if(include_lookahead)
	{
		hash = hash ^ (!hash_state(ref la, 1));
	}
	if(allow_begin_state)
	{
		return !hash;
	}
	return hash;
};

parse_state_print ::= func(s : parse_state mut&) -> v0
{
	i : u64 mut;
	putchar('{');
	putchar(10);
	for(i = 0, i < (s->node_array_size), i = i + 1)
	{
		if(i == (s->recursive_offset))
		{
			puts("*");
		}
		putchar(9);
		cur_node ::= (s->node_array) at i;
		if((cur_node->type) != (ast_type.unparsed_token))
		{
			puts(__enumname(cur_node->type));
		}
		if((cur_node->type) == (ast_type.unparsed_token))
		{
			utok ::= cur_node->utok;
			tokdata ::= utok.tok;
			puts("token.");
			puts(__enumname(tokdata.tok));
		}
		if((cur_node->type) == (ast_type.expr))
		{
			puts("(");
			expr ::= cur_node->expr;
			puts(__enumname(expr.type));
			puts(")");
		}
		putchar(' ');
		print_srcloc(cur_node->loc);
		putchar(10);
	}
	la ::= s->lookahead;
	if((la.type) != (ast_type.unknown))
	{
		putchar(9);
		puts("lookahead: ");
		if((la.type) != (ast_type.unparsed_token))
		{
			puts(__enumname(la.type));
		}
		if((la.type) == (ast_type.unparsed_token))
		{
			utok ::= la.utok;
			tokdata ::= utok.tok;
			puts("token.");
			puts(__enumname(tokdata.tok));
		}
		putchar(' ');
		print_srcloc(la.loc);
		putchar(10);
	}
	putchar('}');
	putchar(10);
};

parse_slice ::= alias lex_slice;

shift ::= func(s : parse_state mut&) -> v0
{
	// make unparsed token.
	delta : u64 mut;
	node_array_add(s, parse_get_lookahead(s, ref delta));
	(s->lex_cursor) = (s->lex_cursor) + delta + 1;
};

[[private]]
mirrored_memcpy ::= func(dst : u8 mut&, src : u8&, count : u64) -> v0
{
	i : u64 mut;
	for(i = (count - 1), i > 0, i = i - 1)
	{
		deref(dst at i) = deref(src at i);
	}
};

[[private]]
impl_shift_nodes_right ::= func(s : parse_state mut&, pivot : u64, shift_amount : u64) -> v0
{
	// say our nodes are:
	// 0, 1, 2, 3, 4
	// the pivot represents some index in this list
	// the shift_amount will shift all elements at and rightwards of the pivot by that amount, adding extra space which will be zero'd out.
	// so: impl_shift_nodes_right(my_nodes, 3, 2) =>
	// 0, 1, 2, 0, 0, 3, 4
	newsize ::= (s->node_array_size) + shift_amount;
	if(newsize >= (s->node_array_cap))
	{
		// dont technically need to double it but lets try to amortise this edge-case away.
		node_array_reserve(s, newsize * 2);
	}

	// shift stuff to the right. because we're shifting to the right we could overwrite overlapping regions
	// so we do it in backwards order.
	copy_src ::= (s->node_array) at pivot;
	copy_dst ::= copy_src at shift_amount;
	mirrored_memcpy(copy_dst@_, copy_src@_, __sizeof(deref (s->node_array)) * ((s->node_array_size) - (pivot + shift_amount)));
	// zero out the gap
	__memset(copy_src, 0, __sizeof(deref (s->node_array)) * shift_amount);
	(s->node_array_size) = (s->node_array_size) + shift_amount;
};

[[private]]
impl_shift_nodes_left ::= func(s : parse_state mut&, pivot : u64, shift_amount : u64) -> v0
{
	// say our nodes are:
	// 0, 1, 2, 3, 4, 5, 6
	// the pivot represents some index in this list
	// we overwrite 'shift_amount' elements at and rightwards of the pivot by the same number of proceeding elements
	// so: impl_shift_nodes_left(my_nodes, 3, 2) =>
	// 0, 1, 2, 5, 6
	copydst ::= (s->node_array) at pivot;
	copysrc ::= copydst at shift_amount;
	// we're going leftwards so memcpy is safe.
	count ::= (s->node_array_size) - (pivot + shift_amount);
	__memcpy(copydst, copysrc, __sizeof(deref (s->node_array)) * count);
	(s->node_array_size) = (s->node_array_size) - shift_amount;
};

reduce ::= func(s : parse_state mut&, destroy : parse_slice, new_nodes : ast&, new_nodes_size : u64) -> v0
{
	off ::= (destroy.off);
	// remove children
	nodes_diff ::= ((destroy.len)@s64) - (new_nodes_size@s64);
	if(nodes_diff < 0)
	{
		// adding more nodes than we destroyed. lets shift everything after the offset by that amount.
		posdiff ::= -nodes_diff;
		impl_shift_nodes_right(s, off, posdiff@u64);
		// do the whole copy, i allow the new data to stomp over the old.
		__memcpy((s->node_array) at off, new_nodes, __sizeof(deref (s->node_array)) * new_nodes_size);
	}
	if(nodes_diff == 0)
	{
		// do the whole copy, i allow the new data to stomp over the old.
		__memcpy((s->node_array) at off, new_nodes, __sizeof(deref (s->node_array)) * new_nodes_size);
	}
	if(nodes_diff > 0)
	{
		// destroying more nodes than we're adding.
		impl_shift_nodes_left(s, off, nodes_diff@u64);
		__memcpy((s->node_array) at off, new_nodes, __sizeof(deref (s->node_array)) * new_nodes_size);
	}

	(s->recursive_offset) = zero;
};

commit ::= func(s : parse_state mut&, nodes_to_commit : parse_slice) -> v0
{
	lex ::= s->lex;
	i : u64 mut;
	for(i = 0, i < (nodes_to_commit.len), i = i + 1)
	{
		off ::= (nodes_to_commit.off) + i;
		cur ::= ((s->node_array) at off);
		ast_add_child(ref (s->root), deref cur, lex->ar);
	}
	// remove children.
	(s->node_array_size) = (s->node_array_size) - (nodes_to_commit.len);
	offsetted_nodes_begin ::= (s->node_array) at (nodes_to_commit.off);
	offsetted_nodes_end ::= (s->node_array) at ((nodes_to_commit.off) + (nodes_to_commit.len));
	__memcpy(offsetted_nodes_begin, offsetted_nodes_end, __sizeof(ast) * (nodes_to_commit.len));

	(s->recursive_offset) = zero;
	if((s->node_array_size) == 0)
	{
		shift(s);
	}
};

parse_complete ::= func(p : parse_state&) -> bool
{
	lex ::= p->lex;
	return (p->lex_cursor) >= (lex->tokens_size);
};

sized_string ::= struct
{
	str : u8&;
	len : u64;
};

quote_source_from_indices ::= func(p : parse_state&, begin : u64, end : u64) -> sized_string
{
	lex ::= p->lex;
	return sized_string
	{
		.str := (lex->src) at begin;
		.len := (end - begin);
	};
};

quote_source_from_nodes ::= func(p : parse_state&, nodes : ast&, nodes_size : u64) -> sized_string
{
	if(nodes_size == 0)
	{
		return zero;
	}
	begin_node ::= deref(nodes at 0);
	end_node ::= deref(nodes at (nodes_size - 1));

	return quote_source_from_indices(p, begin_node.cursor_begin, end_node.cursor_end);
};

parse ::= func(lex : lex_state&, verbose_parse : bool) -> parse_state
{
	psyc_timed(psyc_stage.parse);

	state : parse_state mut := zero;
	state.lex = lex;

	root : ast mut := zero;
	(root.type) = (ast_type.stmt_list);
	(state.root) = root;

	node_array_reserve(ref state, 1024);
	shift(ref state);

	while(!parse_complete(ref state))
	{
		state.lookahead = parse_get_lookahead(ref state, null);
		allow_begin_state ::= (state.recursive_offset) == 0;
		hash : u64 mut := parse_state_hash(ref state, false, allow_begin_state);
		puts("out hash = ");
		putuint(hash);
		putchar(10);
		rule : grammar_rule mut := grammar_get_rule(hash);

		first_node ::= deref((state.node_array) at (state.recursive_offset));
		begin_loc ::= first_node.loc;

		if((rule.fn) == null)
		{
			// nothing that excludes lookahead.
			// try with lookahead.
			hash = parse_state_hash(ref state, true, allow_begin_state);
			rule = grammar_get_rule(hash);
			puts("out hash = ");
			putuint(hash);
			puts(" (incl. lookahead)");
			putchar(10);
		}
		if((rule.fn) == null)
		{
			psyc_error(begin_loc, "invalid syntax: ");
			srcmsg ::= quote_source_from_nodes(ref state, state.node_array, state.node_array_size);
			i : u64 mut;
			for(i = 0, i < (srcmsg.len), i = i + 1)
			{
				putchar(deref((srcmsg.str) at i));
			}
			putchar(10);
			psyc_colour_yellow();
			parse_state_print(ref state);
			psyc_colour_reset();
			psyc_exit_failure();
		}
		result ::= rule.fn(lex->src, state.node_array at (state.recursive_offset), state.node_array_size - (state.recursive_offset));
		if((result.action) == (parse_action.reduce))
		{
			//psyc_panic(srcloc_current(), "todo: reduce");
			replacement_begin ::= (result.nodes) at 0;
			reduce(ref state, parse_slice{.off := (state.recursive_offset) + (result.offset); .len := result.len;}, replacement_begin, result.nodes_size);
			(state.recursive_offset) = 0;
		}
		if((result.action) == (parse_action.commit))
		{
			commit(ref state, parse_slice{.off := result.offset; .len := result.len;});
		}
		if((result.action) == (parse_action.recurse))
		{
			(state.recursive_offset) = (state.recursive_offset) + (result.offset);
			tmp : u64 mut := state.recursive_offset;
			while(tmp >= (state.node_array_size))
			{
				shift(ref state);
				tmp = (state.recursive_offset);
			}
		}
		if((result.action) == (parse_action.shift))
		{
			shift(ref state);
		}
		if((result.action) == (parse_action.error))
		{
			psyc_error(begin_loc, result.errmsg);
			srcmsg ::= quote_source_from_nodes(ref state, state.node_array, state.node_array_size);
			i : u64 mut;
			for(i = 0, i < (srcmsg.len), i = i + 1)
			{
				putchar(deref((srcmsg.str) at i));
			}
			putchar(10);
			psyc_colour_yellow();
			parse_state_print(ref state);
			psyc_colour_reset();
			psyc_exit_failure();
		}
	}

	if(verbose_parse)
	{
		i : u64 mut;
		for(i = 0, i < (state.node_array_size), i = i + 1)
		{
			ast_verbose_print((state.node_array) at i, 0);
		}
	}

	return state;
};

== build ==
{
	add_source_file("lex.psy");
	add_source_file("diag.psy");
	add_source_file("hash.psy");
	add_source_file("grammar.psy");
}
