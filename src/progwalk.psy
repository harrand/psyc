callcontext ::= struct
{
	parent : ast?;
	idx : u64;
};

progwalk_function ::= struct
{
	fn : func(ctx : context mut, call : callcontext -> v0);
};

node_jump_table : progwalk_function mut[1] mut;
stmt_jump_table : progwalk_function mut[9] mut;
expr_jump_table : progwalk_function mut[1] mut;

literal_types : ty mut[5] mut;

progwalk_flatten ::= func(call : callcontext, front_index : u64, back_index : u64 -> v0)
{
	// so we have
	// parent children: [lhs..., node, rhs...]
	// node children:   [children...]
	// what we want is:
	// parent children: [lhs..., children..., rhs...]
	parent ::= call.parent;
	node ::= deref ast_get_child(parent@_, call.idx);
	rhslen ::= (parent->childcount) - (call.idx) - 1;
	// step 1: add 'n' new nodes
	// n = child count - front_index - back_index
	n ::= (node.childcount) - front_index - back_index;
	i : u64 mut;
	for(i = 0, i < n, i = i + 1)
	{
		ast_add_child(parent@_, zero, global_arena);
	}
	// parent children: [lhs..., node, rhs..., zero*n]
	// move the rhs bits to the right 'n' times
	// a memcpy will stomp on itself coz the regions could overlap
	// so we create a buffer
	buffer ::= arena_alloc(global_arena, rhslen * __sizeof(ast));
	// copy rhs... into it
	memcopy(buffer, ast_get_child(parent@_, 1 + (call.idx)), rhslen * __sizeof(ast));
	// now copy rhs... back in the buffer but a bit more forward
	memcopy(ast_get_child(parent@_, n + (call.idx)), buffer, rhslen * __sizeof(ast));
	// parent children: [lhs..., node, rhs... cutoff after 'n', rhs...]
	// finally copy the children in
	nodechildrenptr ::= (node.children)@ast?;
	memcopy(ast_get_child(parent@_, i), nodechildrenptr # front_index, n * __sizeof(ast));
	// done!
};

progwalk_delete_node ::= func(call : callcontext -> v0)
{
	parent ::= (call.parent)@ast mut?;
	idx ::= call.idx;
	len ::= (parent->childcount) - idx - 1;
	memcopy(ast_get_child(parent, idx), ast_get_child(parent, idx + 1), len * __sizeof(ast));
	(parent->childcount) = (parent->childcount) - 1;
};

progwalk_node ::= func(ctx : context mut, call : callcontext -> v0)
{
	node ::= ctx.node;

	pre_transform_idx ::= (node->type)@s64;
	subtraction ::= (ast_type.stmt)@s64;
	if(pre_transform_idx < subtraction)
	{
		return;
	}

	idx ::= pre_transform_idx - subtraction;
	if(idx >= (__sizeof(node_jump_table) / __sizeof(deref(node_jump_table # 0))))
	{
		return;
	}
	jump ::= deref(node_jump_table # idx);
	jump.fn(ctx, call);
};

progwalk_children ::= func(ctx : context mut, front_offset : u64, back_offset : u64 -> v0)
{
	node ::= ctx.node;
	childrenptr ::= (node->children)@ast?;
	count ::= node->childcount;
	i : u64 mut;
	for(i = front_offset, i < (count - back_offset), i = i + 1)
	{
		progwalk_node(context
		{
			.node := ast_get_child(node@_, i);
			.local := ctx.local;
		},
		callcontext
		{
			.parent := node;
			.idx := i;
		});
	}
};

progwalk_children_recursive ::= func(ctx : context mut -> v0)
{
	node ::= ctx.node;
	childrenptr ::= (node->children)@ast?;
	count ::= node->childcount;
	i : u64 mut;
	for(i = 0, i < count, i = i + 1)
	{
		progwalk_node(context
		{
			.node := ast_get_child(node@_, i);
			.local := ctx.local;
		},
		callcontext
		{
			.parent := node;
			.idx := i;
		});
		progwalk_children_recursive(context
		{
			.node := ast_get_child(node@_, i);
			.local := ctx.local;
		});
	}
};

progwalk_stmt ::= func(ctx : context mut, call : callcontext -> v0)
{
	node ::= ctx.node;
	pre_transform_idx ::= (node->stmt)@s64;
	subtraction ::= (ast_stmt.expr_stmt)@s64;
	if(pre_transform_idx < subtraction)
	{
		return;
	}

	idx ::= pre_transform_idx - subtraction;
	if(idx >= (__sizeof(stmt_jump_table) / __sizeof(deref(stmt_jump_table # 0))))
	{
		return;
	}
	jump ::= deref(stmt_jump_table # idx);
	jump.fn(ctx, call);
};

progwalk_expr ::= func(ctx : context mut, call : callcontext -> v0)
{
	node ::= ctx.node;
	expr ::= node->expr;
	pre_transform_idx ::= (expr.type)@s64;
	subtraction ::= (ast_expr_type.callfunc)@s64;
	if(pre_transform_idx < subtraction)
	{
		return;
	}

	idx ::= pre_transform_idx - subtraction;
	if(idx >= (__sizeof(expr_jump_table) / __sizeof(deref(expr_jump_table # 0))))
	{
		return;
	}
	jump ::= deref(expr_jump_table # idx);
	jump.fn(ctx, call);
};

progwalk_decl ::= func(ctx : context mut, call : callcontext -> v0)
{
	node ::= ctx.node;
	decl ::= node->decl;

	s ::= ctx.local;
	is_top_level_decl ::= (s->type) == (scope_type.file);
	file_scope : scope mut? mut := s;
	if(!is_top_level_decl)
	{
		file_scope = scope_get_parent_filescope(s);
	}
	var ::= variable
	{
		.node := node;
		.name := decl.name;
		.name_len := decl.name_len;
		.is_global := false; // note: this is set later on.
		.type := zero;
		.internal := false;
		.file_scope := file_scope@v0?;
		.initialiser := zero;
		.codegen := zero;
	};
	if(is_top_level_decl)
	{
		program_declare_variable(global_arena, var);
	}
	if(!is_top_level_decl)
	{
		scope_declare_variable(s, global_arena, var);
	}
};

progwalk_region ::= func(ctx : context mut, call : callcontext -> v0)
{
	node ::= ctx.node;
	reg ::= node->region;

	already ::= scope_find_region(ctx.local, reg.name, reg.name_len);
	if(already != zero)
	{
		already_node ::= already->node;
		psyc_error_begin(node->loc);
		putzstr("a region named ");
		putchar('"');
		putbytes(reg.name, reg.name_len);
		putchar('"');
		putzstr(" was already defined in the same file ");
		print_srcloc(already_node->loc);
		psyc_diag_end();
		psyc_exit_failure();
	}
	scope_declare_region(ctx.local, global_arena, region
	{
		.node := node;
		.name := reg.name;
		.name_len := reg.name_len;
	});
	progwalk_children(context
	{
		.node := node;
		.local := ctx.local;
	}, 0, 0);
};

progwalk_structdef ::= func(ctx : context mut, call : callcontext -> v0)
{
	node ::= ctx.node;
	def ::= node->structdef;
	program_declare_struct(global_arena, structdef
	{
		.node := node;
		.name := def.structname;
		.name_len := def.structname_len;
		.member_count := node->childcount;
		.type := zero;
		.in_progress := false;
		.file_scope := (ctx.local)@v0?;
		.codegen := zero;
	});
};

progwalk_enumdef ::= func(ctx : context mut, call : callcontext -> v0)
{
	node ::= ctx.node;
	def ::= node->enumdef;
	program_declare_enum(global_arena, enumdef
	{
		.node := node;
		.name := def.enumname;
		.name_len := def.enumname_len;
		.entry_count := node->childcount;
		.type := zero;
		.codegen := zero;
	});
};

progwalk_fn ::= func(ctx : context mut, call : callcontext -> v0)
{
	node ::= ctx.node;
	fn ::= node->fn;

	// so the param count is *not* just equal to the childcount if the function is not extern.
	// the statements within are also child nodes.
	// however, all ast_fn children will start off as decls (all the params) and then the contents of the implementation will follow
	i : u64 mut;
	childcount ::= node->childcount;
	beyond_param_idx : u64 mut := 0;
	param_count : u64 mut := 0;
	for(i = 0, i < childcount, i = i + 1)
	{
		cur_param_node ::= ast_get_child(node@_, i);
		if((cur_param_node->type) == (ast_type.decl))
		{
			param_count = param_count + 1;
			beyond_param_idx = beyond_param_idx + 1;
		}
		if((cur_param_node->type) == (ast_type.fnptrdecl))
		{
			param_count = param_count + 1;
			beyond_param_idx = beyond_param_idx + 1;
		}
		if((cur_param_node->type) != (ast_type.decl))
		{
			if((cur_param_node->type) != (ast_type.fnptrdecl))
			{
				// early out
				i = childcount;
			}
		}
	}

	// note: local scope is going to be (at the very most) file scope
	// this means that other files will not currently be able to see this definition
	// this can be fixed by simply using program_declare_function, but i don't feel comfortable just doing that willy-nilly

	if(fn.is_extern)
	{
		if(beyond_param_idx != childcount)
		{
			psyc_panic(node->loc, "extern fn expected all children to be decls representing params, but that seems to not be the case.");
		}
	}
	funcscope : scope mut? mut;
	funcscope = zero;
	if(!(fn.is_extern))
	{
		funcscope = program_new_scope(global_arena, ctx.local, scope_type.fn, node->loc, fn.fn_name, fn.fn_name_len);
		progwalk_children_recursive(context
		{
			.node := node;
			.local := funcscope;
		});
	}

	program_declare_function(global_arena,
		function{
			.node := ctx.node;
			.name := fn.fn_name;
			.name_len := fn.fn_name_len;
			.param_count := beyond_param_idx;
			.is_extern := fn.is_extern;
			.impl_scope := funcscope@_;
			.type := zero;
			.codegen := zero;
		});
};

progwalk_asm ::= func(ctx : context mut, call : callcontext -> v0)
{
	node ::= ctx.node;
	asmdef ::= node->asmdef;

	i : u64 mut;
	childcount ::= node->childcount;
	beyond_param_idx : u64 mut := 0;
	param_count : u64 mut := 0;
	for(i = 0, i < childcount, i = i + 1)
	{
		cur_param_node ::= ast_get_child(node@_, i);
		if((cur_param_node->type) == (ast_type.decl))
		{
			param_count = param_count + 1;
			beyond_param_idx = beyond_param_idx + 1;
		}
		if((cur_param_node->type) != (ast_type.decl))
		{
			// early out
			i = childcount;
		}
	}

	code_node ::= ast_get_child(node@_, beyond_param_idx);
	constraint_str : u8? mut := zero;
	constraint_len : u64 mut := zero;
	if(node->childcount > (beyond_param_idx + 1))
	{
		constraint_node ::= ast_get_child(node@_, beyond_param_idx + 1);
		if((constraint_node->type) == (ast_type.expr))
		{
			constraint_expr ::= constraint_node->expr;
			if(constraint_expr.type == (ast_expr_type.literal))
			{
				constraint_literal ::= constraint_expr.literal;
				if(constraint_literal.type == (ast_literal_type.string_literal))
				{
					constraint_str = constraint_literal.chars;
					constraint_len = constraint_literal.chars_len;
				}
			}
		}
	}
	if((code_node->type) == (ast_type.expr))
	{
		code_expr ::= code_node->expr;
		if((code_expr.type) == (ast_expr_type.literal))
		{
			code_literal ::= code_expr.literal;
			if((code_literal.type) == (ast_literal_type.string_literal))
			{
				program_declare_assembly(global_arena,
					assembly{
						.node := ctx.node;
						.name := asmdef.asm_name;
						.name_len := asmdef.asm_name_len;
						.param_count := beyond_param_idx;
						.code := code_literal.chars;
						.code_len := code_literal.chars_len;
						.constraint := constraint_str;
						.constraint_len := constraint_len;
						.type := zero;
						.codegen := zero;
						.codegen2 := zero;
					});
			}
		}
	}
};

progwalk_mac ::= func(ctx : context mut, call : callcontext -> v0)
{
	node ::= ctx.node;
	mac ::= node->mac;

	yield_id : u64 mut := -1;

	// so the param count is *not* just equal to the childcount if the function is not extern.
	// the statements within are also child nodes.
	// however, all ast_fn children will start off as decls (all the params) and then the contents of the implementation will follow
	i : u64 mut;
	childcount ::= node->childcount;
	beyond_param_idx : u64 mut := 0;
	param_count : u64 mut := 0;
	for(i = 0, i < childcount, i = i + 1)
	{
		cur_param_node ::= ast_get_child(node@_, i);
		if((cur_param_node->type) == (ast_type.decl))
		{
			param_count = param_count + 1;
			beyond_param_idx = beyond_param_idx + 1;
		}
		if((cur_param_node->type) != (ast_type.decl))
		{
			// early out
			i = childcount;
		}
	}

	curstmt : ast_stmt mut;
	for(i = beyond_param_idx, i < childcount, i = i + 1)
	{
		curchild ::= ast_get_child(node@_, i);
		// todo: find yield_id and set it.
		if((curchild->type) == (ast_type.stmt))
		{
			curstmt = (curchild->stmt);
			if(curstmt == (ast_stmt.expr_stmt))
			{
				curexpr ::= curchild->expr;
				if((curexpr.type) == (ast_expr_type.yld))
				{
					if(yield_id != -1)
					{
						previous_yield ::= ast_get_child(node@_, yield_id);
						psyc_error_begin(curchild->loc);
						putzstr("multiple 'yield' statements detected within the same macro, previously defined ");
						print_srcloc(previous_yield->loc);
						psyc_diag_end();
						psyc_exit_failure();
					}
					yield_id = i;
				}
			}
		}
	}

	program_declare_macro(global_arena, macrodef
	{
		.node := node;
		.name := mac.mac_name;
		.name_len := mac.mac_name_len;
		.yield_type := zero;
		.first_id := beyond_param_idx;
		.yield_id := yield_id;
	});
};

progwalk_if ::= func(ctx : context mut, call : callcontext -> v0)
{
	node ::= (ctx.node)@ast mut?;
	ifdef ::= node->ifdef;
	if(!(ifdef.is_static))
	{
		return;
	}
	cond_node ::= ast_get_child(node@_, 0);
	sv ::= sval_node(context
	{
		.node := cond_node;
		.local := ctx.local;
	});
	if((sv.tag) != (sval_tag.literal))
	{
		psyc_error_begin(cond_node->loc);
		putzstr("could not interpret static-if condition as a literal");
		psyc_diag_end();
		psyc_exit_failure();
	}
	lit ::= sv.literal;
	if((lit.type) != (ast_literal_type.bool_literal))
	{
		psyc_error_begin(cond_node->loc);
		putzstr("could not interpret static-if condition as a bool literal");
		psyc_diag_end();
		psyc_exit_failure();
	}
	lastchildidx ::= (node->childcount) - 1;
	else_node : ast mut? mut := ast_get_child(node@_, lastchildidx);
	if((else_node->type) != (ast_type.elsedef))
	{
		else_node = zero;
	}
	if(lit.boolean)
	{
		// turn it into an alive node and get rid of the first child (cond)
		childrenptr ::= (node->children)@ast mut?;
		memcopy(childrenptr, childrenptr # 1, __sizeof(ast) * ((node->childcount) - 1));
		(node->type) = (ast_type.composite);
		(node->childcount) = (node->childcount) - 1;

		// pretend the else node doesnt exist
		if(else_node != zero)
		{
			(node->childcount) = (node->childcount) - 1;
		}
	}
	if(!(lit.boolean))
	{
		// is there an elsedef?
		if(else_node != zero)
		{
			deref(node) = deref(else_node);
			(node->type) = (ast_type.composite);
		}
		// if theres no else, then we basically want to delete this node
		if(else_node == zero)
		{
			(node->type) = (ast_type.composite);
			(node->childcount) = 0;
		}
	}

	// if we're within a function then we dont need to recurse children (as it does progwalk_children_recursive)
	// however in all other cases, we do
	are_we_in_a_func : bool mut := false;
	s : scope mut? mut := ctx.local;
	while(s != zero)
	{
		if((s->type) == (scope_type.fn))
		{
			are_we_in_a_func = true;
		}
		s = ((s->parent)@scope mut?);
	}
	
	if(!are_we_in_a_func)
	{
		progwalk_children(context
		{
			.node := node;
			.local := ctx.local;
		}, 0, 0);
	}
};

progwalk_call ::= func(ctx : context mut, call : callcontext -> v0)
{
	// if the callfunc name is a macro, then we do something.
	// otherwise, there's nothing to do...
	node ::= (ctx.node)@ast mut?;
	expr ::= node->expr;
	callfunc ::= expr.callfunc;
	mac ::= program_find_macro(callfunc.funcname, callfunc.funcname_len);
	if(mac == zero)
	{
		return;
	}
	// its definitely a macro
	// turn our node into a composite
	macnode ::= mac->node;
	deref(node) = deref(macnode);
	(node->type) = (ast_type.composite);
};

progwalk_setup ::= func(-> v0)
{
	psyc_timed_begin(psyc_stage.setup);
	defer psyc_timed_end();

	deref(node_jump_table # 0) = progwalk_function{.fn := progwalk_stmt;};

	deref(stmt_jump_table # 0) = progwalk_function{.fn := progwalk_expr;};
	deref(stmt_jump_table # 1) = progwalk_function{.fn := progwalk_decl;};
	deref(stmt_jump_table # 2) = progwalk_function{.fn := progwalk_region;};
	deref(stmt_jump_table # 3) = progwalk_function{.fn := progwalk_structdef;};
	deref(stmt_jump_table # 4) = progwalk_function{.fn := progwalk_enumdef;};
	deref(stmt_jump_table # 5) = progwalk_function{.fn := progwalk_fn;};
	deref(stmt_jump_table # 6) = progwalk_function{.fn := progwalk_asm;};
	deref(stmt_jump_table # 7) = progwalk_function{.fn := progwalk_mac;};
	deref(stmt_jump_table # 8) = progwalk_function{.fn := progwalk_if;};

	deref(expr_jump_table # 0) = progwalk_function{.fn := progwalk_call;};
};

progwalk_file ::= func(source : ast?, path : u8?, len : u64 -> scope mut?)
{
	psyc_timed_begin(psyc_stage.semal);
	defer psyc_timed_end();
	global ::= ref(prog.global);

	// file scope is a child of the program scope
	file_scope ::= program_new_scope(global_arena, global, scope_type.file, source->loc, path, len);
	dbg_create_file(file_scope);

	// remember these are direct children, not recursive children
	// e.g top-level funcs/structs aswell as global variables
	progwalk_children(context
	{
		.node := source;
		.local := file_scope;
	}, 0, 0);
	return file_scope;
};
