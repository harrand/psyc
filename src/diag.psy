psyc_stage ::= enum
{
	.setup := 0;
	.lex := 1;
	.parse := 2;
	.build := 3;
	.semal := 4;
	.codegen := 5;
	.assembly := 6;
	.link := 7;
};

current_stage : psyc_stage mut;

psyc_stage_times : f32 mut[8] mut;

psyc_colour_red ::= func( -> v0)
{
	putchar(27); // esc character
	putchar('[');
	putchar('3');
    putchar('1');
    putchar('m');
};

psyc_colour_yellow ::= func( -> v0)
{
	putchar(27); // esc character
	putchar('[');
	putchar('3');
    putchar('3');
    putchar('m');
};

psyc_colour_blue ::= func( -> v0)
{
	putchar(27); // esc character
	putchar('[');
	putchar('3');
    putchar('4');
    putchar('m');
};

psyc_colour_reset ::= func( -> v0)
{
	putchar(27); // esc character
	putchar('[');
    putchar('0');
    putchar('m');
};

print_srcloc ::= func(l : srcloc -> v0)
{
	if((l.file) != zero)
	{
		putzstr("at ");
		putzstr(l.file);
		putchar('(');
		putuint(l.line);
		putchar(':');
		putuint(l.column);
		putchar(')');
	}
};

psyc_exit_failure ::= func( -> v0)
{
	__debugbreak();
};

psyc_panic_begin ::= func(my_srcloc : srcloc -> v0)
{
	psyc_colour_red();
	putzstr("panic ");
	print_srcloc(my_srcloc);
	putchar(':');
	putchar(' ');
};

psyc_diag_end ::= func( -> v0)
{
	putchar(10);
	psyc_colour_reset();
};

psyc_error_begin ::= func(loc : srcloc -> v0)
{
	psyc_colour_red();
	putzstr(__enumname(current_stage));
	putzstr(" error ");
	print_srcloc(loc);
	putzstr(": ");
};

psyc_warning_begin ::= func(loc : srcloc -> v0)
{
	psyc_colour_yellow();
	putzstr("warning ");
	print_srcloc(loc);
	putzstr(": ");
};

psyc_message_begin ::= func(loc : srcloc -> v0)
{
	psyc_colour_blue();
	putzstr("message ");
	print_srcloc(loc);
	putzstr(": ");
};

psyc_panic ::= func(my_srcloc : srcloc, msg : u8? -> v0)
{
	psyc_panic_begin(my_srcloc);
	putzstr(msg);
	psyc_diag_end();
	psyc_exit_failure();
};


static if(_win32)
{
	QueryPerformanceCounter ::= func(lpPerformanceCount : s64 mut? -> s32 ):= extern;
	QueryPerformanceFrequency ::= func(lpPerformanceCount : s64 mut? -> s32 ):= extern;
}

psyc_gettime ::= func( -> s64)
{
	static if(_win32)
	{
		t : s64 mut;
		QueryPerformanceCounter(ref t);
		f : s64 mut;
		QueryPerformanceFrequency(ref f);
		return t * 1000000 / f;
	}
};

psyc_set_stage ::= func(stage : psyc_stage -> v0)
{
	current_stage = stage;
};

_t : s64 mut;

psyc_timed_begin ::= func(stage : psyc_stage -> v0)
{
	psyc_set_stage(stage);
	_t = psyc_gettime();
};

psyc_timed_end ::= func( -> v0)
{
	s ::= current_stage@s64;
	_diff ::= (psyc_gettime() - _t)@f32 weak;
	_diff_f32 ::= _diff / (1000000.0@f32);
	deref(psyc_stage_times # s) = (deref(psyc_stage_times # s) + _diff_f32);
	psyc_set_stage(zero);
};

psyc_report_a_timing ::= func(stage : psyc_stage -> v0)
{
	putzstr(__enumname(stage));
	putzstr(": ");
	putfloat(deref(psyc_stage_times # (stage@s64)));
	putchar('s');
	putchar(10);
};

psyc_report_timings ::= func( -> v0)
{
	count ::= __sizeof(psyc_stage_times) / __sizeof(deref(psyc_stage_times # 0));
	i : u32 mut;

	total_timing : f32 mut := 0.0;
	for(i = 0, i < count, i = i + 1)
	{
		psyc_report_a_timing(i@psyc_stage);
		total_timing = (total_timing + deref(psyc_stage_times # i));
	}
	putzstr("total: ");
	putfloat(total_timing);
	putchar('s');
	putchar(10);
};

== build ==
{
	add_source_file("stdlib/io.psy");
}
