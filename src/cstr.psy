cstrlen ::= func(cstr : u8&) -> u64
{
	c : u64 mut := 0;
	if(cstr == null)
	{
		return c;
	}
	while((deref (cstr at c)) != 0)
	{
		c = c + 1;
	}
	return c;
};

strcpy ::= func(dst : u8 mut&, src : u8&, count : u64) -> v0
{
	i : u64 mut := 0;
	dstcpy : u8 mut& mut := dst;
	srccpy : u8& mut := src;
	while(i < count)
	{
		(deref dstcpy) = (deref srccpy);
		dstcpy = ((dstcpy@u64) + 1)@u8 mut& mut;
		srccpy = ((srccpy@u64) + 1)@u8& mut;
		i = i + 1;
	}
};

cstreql ::= func(lhs : u8&, rhs : u8&) -> bool
{
	llen ::= cstrlen(lhs);
	rlen ::= cstrlen(rhs);
	if(llen != rlen)
	{
		return false;
	}
	min : u64 mut := rlen;
	if(llen < rlen)
	{
		min = llen;
	}
	i : u64 mut := 0;
	lchr : u8 mut;
	rchr : u8 mut;
	while(i < min)
	{
		lchr = deref(lhs at i);
		rchr = deref(rhs at i);
		if(lchr != rchr)
		{
			return false;
		}
		i = i + 1;
	}
	return true;
};

