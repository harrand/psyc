semal_symbol_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	sym ::= expr.symbol;
	maybe_variable ::= scope_find_variable(ctx.local, sym.symbol, sym.len);
	if(maybe_variable != null)
	{
		return just_type(maybe_variable->type);
	}

	maybe_function ::= scope_find_function(ctx.local, sym.symbol, sym.len);
	if(maybe_function != null)
	{
		return just_type(maybe_function->type);
	}
	psyc_error_begin(node->loc);
	puts("unknown symbol ");
	putchar('"');
	putss(sym.symbol, sym.len);
	putchar('"');
	psyc_diag_end();
	psyc_exit_failure();
	return zero;
};

semal_literal_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval
{
	lit ::= expr.literal;
	if((lit.type) == (ast_literal_type.zero_literal))
	{
		return sval
		{
			.type := zero;
			.tag := sval_tag.val_zero;
		};
	}
	if((lit.type) == (ast_literal_type.null_literal))
	{
		nullqual ::= (tyqual.static) | (tyqual.weak);
		return sval
		{
			.type := zero;
			.tag := sval_tag.val_zero;
		};
	}
	return sval
	{
		.type := deref(literal_types at ((lit.type)@s64));
		.tag := sval_tag.literal;
		.literal := lit;
	};
};

semal_unop_minus ::= func(operand : sval mut, operand_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	if(!ty_is_integral(operand.type))
	{
		if(!ty_is_floating_point(operand.type))
		{
			psyc_error_begin(operand_loc);
			puts("operand of unary minus is of type ");
			putchar('"');
			putty(operand.type);
			putchar('"');
			puts(", but it must be either an 'integral' or 'floating-point' type");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}
	literal ::= ref(operand.literal);
	(literal->integral) = -(literal->integral);
	(literal->floating_point) = -(literal->floating_point);
	return operand;
};

semal_unop_bitwise_invert ::= func(operand : sval mut, operand_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	if(!ty_is_integral(operand.type))
	{
		psyc_error_begin(operand_loc);
		puts("operand of bitwise-invert is of type ");
		putchar('"');
		putty(operand.type);
		putchar('"');
		puts(", but it must be an 'integral' type");
		psyc_diag_end();
		psyc_exit_failure();
	}
	literal ::= ref(operand.literal);
	// todo: replace this with tilde when you build this with the bootstrap compiler
	(literal->integral) = !(literal->integral);
	return operand;
};

semal_unop_logical_invert ::= func(operand : sval mut, operand_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	if(!ty_is_boolean(operand.type))
	{
		psyc_error_begin(operand_loc);
		puts("operand of logical-invert is of type ");
		putchar('"');
		putty(operand.type);
		putchar('"');
		puts(", but it must be a 'boolean' type");
		psyc_diag_end();
		psyc_exit_failure();
	}
	literal ::= ref(operand.literal);
	(literal->boolean) = (!(literal->boolean));
	return operand;
};

semal_unop_ref ::= func(operand : sval mut, operand_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	return just_type(ty_ref(operand.type, zero));
};

semal_unop_deref ::= func(operand : sval mut, operand_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	if(!ty_is(operand.type, tytag.ptr))
	{
		psyc_error_begin(operand_loc);
		puts("operand of deref is of type ");
		putchar('"');
		putty(operand.type);
		putchar('"');
		puts(", but it must be a 'pointer' type");
		psyc_diag_end();
		psyc_exit_failure();
	}
	return just_type(ty_deref(operand.type));
};

semal_unop_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval
{
	unop ::= expr.unop;
	node ::= ctx.node;
	if((node->childcount) != 1)
	{
		psyc_error_begin(node->loc);
		puts("unop expr expects exactly 1 child representing operand. this unop expr node has ");
		putuint(node->childcount);
		puts(" children.");
		psyc_diag_end();
		psyc_exit_failure();
	}

	operand ::= ast_unop_get_operand(deref node);
	operand_val ::= semal_expr_common(operand->expr, context{.node := operand; .local := ctx.local;}, prog);
	if((unop.type) == (ast_unop_type.op_defer))
	{
		psyc_panic(node->loc, "defer unary operator was encountered without having been preprocessed. this is a serious compiler bug.");
	}
	if(ty_isbad(operand_val.type))
	{
		psyc_error_begin(operand->loc);
		puts("operand of unary operator ");
		puts(__enumname(unop.type));
		puts(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}
	pre_transform_idx ::= (unop.type)@s64;
	subtraction ::= 0;
	idx ::= pre_transform_idx - subtraction;
	jump ::= deref(unop_jump_table at idx);
	return jump.fn(operand_val, operand->loc, ctx, prog);
};

semal_biop_assign ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_ty ::= lhs_val.type;
	rhs_ty ::= rhs_val.type;
	if(ty_hasqual(lhs_ty, tyqual.static))
	{
		psyc_error_begin(lhs_loc);
		puts("cannot assign to type with the 'static' qualifier. lhs type was ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(!ty_hasqual(lhs_ty, tyqual.mut))
	{
		psyc_error_begin(lhs_loc);
		puts("cannot assign to type without the 'mut' qualifier. lhs type was ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	conv ::= ty_get_conv(rhs_ty, lhs_ty);
	if(conv == (tyconv.cant))
	{
		psyc_error_begin(lhs_loc);
		puts("assignment is invalid because rhs type ");
		putchar('"');
		putty(rhs_ty);
		putchar('"');
		puts(" cannot be converted to lhs type ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(conv == (tyconv.could_if_weak))
	{
		psyc_error_begin(lhs_loc);
		puts("assignment is invalid because rhs type ");
		putchar('"');
		putty(rhs_ty);
		putchar('"');
		puts(" cannot be converted to lhs type ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		puts(" (but it could with a cast)");
		psyc_diag_end();
		psyc_exit_failure();
	}
	return just_type(lhs_ty);
};

semal_biop_arithmetic_common ::= func(op_name : u8&, lhs_ty : ty, rhs_ty : ty, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> ty
{
	if(!ty_is_integral(lhs_ty))
	{
		if(!ty_is_floating_point(lhs_ty))
		{
			psyc_error_begin(lhs_loc);
			puts("lhs of ");
			puts(op_name);
			puts(" is of type ");
			putchar('"');
			putty(lhs_ty);
			putchar('"');
			puts(", but it must be either an 'integral' or 'floating-point' type");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}
	if(!ty_is_integral(rhs_ty))
	{
		if(!ty_is_floating_point(rhs_ty))
		{
			psyc_error_begin(rhs_loc);
			puts("rhs of ");
			puts(op_name);
			puts(" is of type ");
			putchar('"');
			putty(rhs_ty);
			putchar('"');
			puts(", but it must be either an 'integral' or 'floating-point' type");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}
	conv ::= ty_get_conv(lhs_ty, rhs_ty);
	if(conv == (tyconv.cant))
	{
		psyc_error_begin(rhs_loc);
		puts(op_name);
		puts(" is invalid because rhs type ");
		putchar('"');
		putty(rhs_ty);
		putchar('"');
		puts(" is not convertible to lhs type ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(conv == (tyconv.could_if_weak))
	{
		psyc_error_begin(rhs_loc);
		puts(op_name);
		puts(" is invalid because rhs type ");
		putchar('"');
		putty(rhs_ty);
		putchar('"');
		puts(" is not convertible to lhs type ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		puts(" (but it could with a cast)");
		psyc_diag_end();
		psyc_exit_failure();
	}
	return lhs_ty;
};

semal_biop_compare ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	rhscpy : sval mut := rhs_val;

	lhs_lit ::= lhs_val.literal;
	both_are_static : bool mut := ty_hasqual(lhs_val.type, tyqual.static);
	if(!ty_hasqual(rhscpy.type, tyqual.static))
	{
		both_are_static = false;
	}
	conv ::= ty_get_conv(rhscpy.type, lhs_val.type);
	if(conv == (tyconv.cant))
	{
		psyc_error_begin(lhs_loc);
		puts("invalid comparison operator: rhs type");
		putchar('"');
		putty(rhscpy.type);
		putchar('"');
		puts(" is not convertible to lhs type ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		puts(" (but it could with a cast)");
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(conv == (tyconv.could_if_weak))
	{
		// bad
		psyc_error_begin(rhs_loc);
		puts("invalid comparison operator: rhs type");
		putchar('"');
		putty(rhscpy.type);
		putchar('"');
		puts(" is not convertible to lhs type ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	rhscpy = sval_convert(rhscpy, lhs_val.type);
	rhs_lit ::= rhscpy.literal;

	retqual : tyqual mut := zero;
	ret_tag : sval_tag mut := zero;
	ret_lit : sval_literal mut := zero;

	if(both_are_static)
	{
		retqual = (tyqual.static);
		ret_tag = (sval_tag.literal);

		if(both(ty_is_integral(lhs_val.type), ty_is_integral(rhscpy.type)))
		{
			(ret_lit.boolean) = ((lhs_lit.integral) == (rhs_lit.integral));
		}
		if(both(ty_is_boolean(lhs_val.type), ty_is_boolean(rhscpy.type)))
		{
			(ret_lit.boolean) = ((lhs_lit.boolean) == (rhs_lit.boolean));
		}
		if(both(ty_is_floating_point(lhs_val.type), ty_is_floating_point(rhscpy.type)))
		{
			(ret_lit.boolean) = ((lhs_lit.floating_point) == (rhs_lit.floating_point));
		}
	}

	return sval
	{
		.type := ty_getprim(primty.bool, retqual);
		.tag := ret_tag;
		.literal := ret_lit;
	};
};

semal_biop_comparen ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	rhscpy : sval mut := rhs_val;

	lhs_lit ::= lhs_val.literal;
	both_are_static : bool mut := ty_hasqual(lhs_val.type, tyqual.static);
	if(!ty_hasqual(rhscpy.type, tyqual.static))
	{
		both_are_static = false;
	}
	conv ::= ty_get_conv(rhscpy.type, lhs_val.type);
	if(conv == (tyconv.cant))
	{
		psyc_error_begin(lhs_loc);
		puts("invalid comparison operator: rhs type");
		putchar('"');
		putty(rhscpy.type);
		putchar('"');
		puts(" is not convertible to lhs type ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		puts(" (but it could with a cast)");
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(conv == (tyconv.could_if_weak))
	{
		// bad
		psyc_error_begin(rhs_loc);
		puts("invalid comparison operator: rhs type");
		putchar('"');
		putty(rhscpy.type);
		putchar('"');
		puts(" is not convertible to lhs type ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	rhscpy = sval_convert(rhscpy, lhs_val.type);
	rhs_lit ::= rhscpy.literal;

	retqual : tyqual mut := zero;
	ret_tag : sval_tag mut := zero;
	ret_lit : sval_literal mut := zero;

	if(both_are_static)
	{
		retqual = (tyqual.static);
		ret_tag = (sval_tag.literal);

		if(both(ty_is_integral(lhs_val.type), ty_is_integral(rhscpy.type)))
		{
			(ret_lit.boolean) = ((lhs_lit.integral) != (rhs_lit.integral));
		}
		if(both(ty_is_boolean(lhs_val.type), ty_is_boolean(rhscpy.type)))
		{
			(ret_lit.boolean) = ((lhs_lit.boolean) != (rhs_lit.boolean));
		}
		if(both(ty_is_floating_point(lhs_val.type), ty_is_floating_point(rhscpy.type)))
		{
			(ret_lit.boolean) = ((lhs_lit.floating_point) != (rhs_lit.floating_point));
		}
	}

	return sval
	{
		.type := ty_getprim(primty.bool, retqual);
		.tag := ret_tag;
		.literal := ret_lit;
	};
};

semal_biop_plus ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	ret : sval mut := just_type(semal_biop_arithmetic_common("addition", lhs_val.type, rhs_val.type, lhs_loc, rhs_loc, ctx, prog));
	ret_lit ::= ref(ret.literal);
	(ret_lit->integral) = (lhs_lit.integral) + (rhs_lit.integral);
	(ret_lit->floating_point) = (lhs_lit.floating_point) + (rhs_lit.floating_point);
	return ret;
};

semal_biop_minus ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	ret : sval mut := just_type(semal_biop_arithmetic_common("subtraction", lhs_val.type, rhs_val.type, lhs_loc, rhs_loc, ctx, prog));
	ret_lit ::= ref(ret.literal);
	(ret_lit->integral) = (lhs_lit.integral) - (rhs_lit.integral);
	(ret_lit->floating_point) = (lhs_lit.floating_point) - (rhs_lit.floating_point);
	return ret;
};

semal_biop_multiply ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	ret : sval mut := just_type(semal_biop_arithmetic_common("multiplication", lhs_val.type, rhs_val.type, lhs_loc, rhs_loc, ctx, prog));
	ret_lit ::= ref(ret.literal);
	(ret_lit->integral) = (lhs_lit.integral) * (rhs_lit.integral);
	(ret_lit->floating_point) = (lhs_lit.floating_point) * (rhs_lit.floating_point);
	return ret;
};

semal_biop_divide ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	ret : sval mut := just_type(semal_biop_arithmetic_common("division", lhs_val.type, rhs_val.type, lhs_loc, rhs_loc, ctx, prog));
	ret_lit ::= ref(ret.literal);
	(ret_lit->integral) = (lhs_lit.integral) / (rhs_lit.integral);
	(ret_lit->floating_point) = (lhs_lit.floating_point) / (rhs_lit.floating_point);
	return ret;
};

semal_biop_bitwise_or ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	ret : sval mut := just_type(semal_biop_arithmetic_common("bitwise-or", lhs_val.type, rhs_val.type, lhs_loc, rhs_loc, ctx, prog));
	if(ty_is_floating_point(lhs_val.type))
	{
		psyc_error_begin(lhs_loc);
		puts("lhs of bitwise-or was floating point type ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		puts(", only integral types can be used in a bitwise-or.");
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(ty_is_floating_point(rhs_val.type))
	{
		psyc_error_begin(rhs_loc);
		puts("rhs of bitwise-or was floating point type ");
		putchar('"');
		putty(rhs_val.type);
		putchar('"');
		puts(", only integral types can be used in a bitwise-or.");
		psyc_diag_end();
		psyc_exit_failure();
	}
	ret_lit ::= ref(ret.literal);
	(ret_lit->integral) = (lhs_lit.integral) | (rhs_lit.integral);
	return ret;
};

semal_biop_logical_or ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	if(!ty_is_boolean(lhs_val.type))
	{
		psyc_error_begin(lhs_loc);
		puts("both sides of a logical-or binary operation must be boolean types. the lhs was ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(!ty_is_boolean(rhs_val.type))
	{
		psyc_error_begin(rhs_loc);
		puts("both sides of a logical-or binary operation must be boolean types. the rhs was ");
		putchar('"');
		putty(rhs_val.type);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	retqual : tyqual mut := zero;
	if(ty_hasqual(lhs_val.type, tyqual.static))
	{
		if(ty_hasqual(rhs_val.type, tyqual.static))
		{
			retqual = (tyqual.static);
		}
	}
	ret : sval mut := just_type(ty_getprim(primty.bool, retqual));
	ret_lit ::= ref(ret.literal);
	(ret_lit->boolean) = (lhs_lit.boolean);
	if(rhs_lit.boolean)
	{
		(ret_lit->boolean) = true;
	}
	return ret;
};

semal_biop_bitwise_and ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	ret : sval mut := just_type(semal_biop_arithmetic_common("bitwise-and", lhs_val.type, rhs_val.type, lhs_loc, rhs_loc, ctx, prog));
	if(ty_is_floating_point(lhs_val.type))
	{
		psyc_error_begin(lhs_loc);
		puts("lhs of bitwise-and was floating point type ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		puts(", only integral types can be used in a bitwise-and.");
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(ty_is_floating_point(rhs_val.type))
	{
		psyc_error_begin(rhs_loc);
		puts("rhs of bitwise-and was floating point type ");
		putchar('"');
		putty(rhs_val.type);
		putchar('"');
		puts(", only integral types can be used in a bitwise-and.");
		psyc_diag_end();
		psyc_exit_failure();
	}
	ret_lit ::= ref(ret.literal);
	(ret_lit->integral) = (lhs_lit.integral) & (rhs_lit.integral);
	return ret;
};

semal_biop_logical_and ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	if(!ty_is_boolean(lhs_val.type))
	{
		psyc_error_begin(lhs_loc);
		puts("both sides of a logical-and binary operation must be boolean types. the lhs was ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(!ty_is_boolean(rhs_val.type))
	{
		psyc_error_begin(rhs_loc);
		puts("both sides of a logical-and binary operation must be boolean types. the rhs was ");
		putchar('"');
		putty(rhs_val.type);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	retqual : tyqual mut := zero;
	if(ty_hasqual(lhs_val.type, tyqual.static))
	{
		if(ty_hasqual(rhs_val.type, tyqual.static))
		{
			retqual = (tyqual.static);
		}
	}
	ret : sval mut := just_type(ty_getprim(primty.bool, retqual));
	ret_lit ::= ref(ret.literal);
	(ret_lit->boolean) = false;
	if(lhs_lit.boolean)
	{
		if(rhs_lit.boolean)
		{
			(ret_lit->boolean) = true;
		}
	}
	return ret;
};

semal_biop_at ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_ty ::= lhs_val.type;
	rhs_ty ::= rhs_val.type;
	node ::= ctx.node;
	// lhs must be:
	//	- a ptr
	//	- an array
	retty : ty mut := zero;
	acceptable : bool mut := false;
	if(ty_is(lhs_ty, tytag.ptr))
	{
		acceptable = true;
		// return type is the same type as lhs in this case
		retty = lhs_ty;
	}
	if(ty_is(lhs_ty, tytag.arr))
	{
		acceptable = true;
		// return type is a pointer to underlying instead of an array
		arr ::= lhs_ty.arr;
		underlying ::= deref((arr.underlying)@ty&);
		retty = ty_ref(underlying, zero);
	}
	if(!acceptable)
	{
		psyc_error_begin(lhs_loc);
		puts("lhs of 'at' operator is of type ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		puts(", but it must be either a 'pointer' or 'array' type.");
		psyc_diag_end();
		psyc_exit_failure();
	}

	// rhs must be:
	//	- an integral type
	if(!ty_is_integral(rhs_ty))
	{
		psyc_error_begin(rhs_loc);
		puts("rhs of 'at' operator is of type ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		puts(", but it must be an 'integral' type.");
		psyc_diag_end();
		psyc_exit_failure();
	}
	return just_type(retty);
};

semal_biop_field_struct ::= func(lhs_ty : ty, rhs_name : u8&, rhs_len : u64, lhs_loc : srcloc, rhs_loc : srcloc) -> sval
{
	structty ::= lhs_ty.strct;
	i : u64 mut;
	memtypes ::= structty.member_types@ty&;
	mem_id : u64 mut := -1;
	for(i = 0, i < (structty.member_count), i = i + 1)
	{
		memname ::= deref((structty.member_names) at i);
		memname_len ::= deref((structty.member_name_lens) at i);
		if(memname_len == rhs_len)
		{
			if(cstreql_n(memname, rhs_name, memname_len))
			{
				// we have found the member
				// return it
				type ::= deref(memtypes at i);
				if(ty_hasqual(lhs_ty, tyqual.mut))
				{
					(type.qual) = (type.qual) | (tyqual.mut);
				}
				return just_type(type);
			}
		}
	}
	psyc_error_begin(rhs_loc);
	puts("field-access is invalid because struct data member ");
	putchar('"');
	putty(lhs_ty);
	puts("::");
	putss(rhs_name, rhs_len);
	putchar('"');
	puts(" doesn't exist");
	psyc_diag_end();
	psyc_exit_failure();
	return zero;
};

semal_field_common ::= func(lhs_ty : ty, rhs_expr : ast_expr, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	rhs_name : u8& mut;
	rhs_len : u64 mut;
	// note hh: this will accept callfunc exprs and even return the expected result for an enum too
	// however, enums shouldnt allow callfunc -> symbol like this as that syntax is only for function pointer calling.
	if(!ast_try_get_symbol_from_expr(rhs_expr, ref rhs_name, ref rhs_len))
	{
		psyc_error_begin(rhs_loc);
		puts("rhs of field-expr could not be interpreted as a data member name (struct) nor a enum entry name (enum)");
		psyc_diag_end();
		psyc_exit_failure();
	}

	if((lhs_ty.tag) == (tytag.strct))
	{
		return semal_biop_field_struct(lhs_ty, rhs_name, rhs_len, lhs_loc, rhs_loc);
	}
	if((lhs_ty.tag) == (tytag.enm))
	{
		psyc_panic(lhs_loc, "field-expr is NYI for enums");
	}
	psyc_error_begin(lhs_loc);
	puts("lhs of field-access is of non-struct type ");
	putchar('"');
	putty(lhs_ty);
	putchar('"');
	psyc_diag_end();
	psyc_exit_failure();
	return zero;
};

semal_biop_field ::= func(lhs : ast mut&, rhs : ast mut&, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;

	// the rhs of a field is expected to be an expression
	// either a symbol expression or a callfunc expression
	if((rhs->type) != (ast_type.expr))
	{
		psyc_panic(rhs->loc, "expected rhs of biop field to be an expression, but it is not");
	}
	lhs_val ::= semal_expr_common(lhs->expr, context
	{
		.node := lhs;
		.local := ctx.local;
	}, prog);
	lhs_ty ::= lhs_val.type;
	return semal_field_common(lhs_ty, rhs->expr, lhs->loc, rhs->loc, ctx, prog);
};

semal_biop_ptr_field ::= func(lhs : ast mut&, rhs : ast mut&, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;

	lhs_val ::= semal_expr_common(lhs->expr, context
	{
		.node := lhs;
		.local := ctx.local;
	}, prog);
	lhs_ty ::= lhs_val.type;

	if(!ty_is(lhs_ty, tytag.ptr))
	{
		psyc_error_begin(lhs->loc);
		puts("unexpected field (->) operator non non-pointer type ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	lhs_ptr ::= lhs_ty.ptr;
	lhs_underlying ::= deref((lhs_ptr.underlying)@ty&);

	return semal_field_common(lhs_underlying, rhs->expr, lhs->loc, rhs->loc, ctx, prog);
};

weakening_idiom ::= "_";

semal_biop_cast ::= func(lhs : ast mut&, rhs : ast mut&, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	lhs_expr ::= lhs->expr;
	rhs_expr ::= rhs->expr;
	// rhs must be a symbol expression
	if((rhs_expr.type) != (ast_expr_type.symbol))
	{
		psyc_error_begin(node->loc);
		puts("rhs of cast expression must be a 'symbol expression'. instead it is a '");
		puts(__enumname(rhs_expr.type));
		puts(" expression'");
		psyc_diag_end();
		psyc_exit_failure();
	}

	rhs_sym ::= rhs_expr.symbol;
	retty : ty mut := scope_parse_typename(ctx.local, rhs_sym.symbol, rhs_sym.len);

	lhs_val : sval mut := semal_expr_common(lhs_expr, context{.node := lhs; .local := ctx.local;}, prog);
	if(sval_iszero(lhs_val))
	{
		lhs_val = sval_convert(lhs_val, retty);
	}
	if(sval_isnull(lhs_val))
	{
		lhs_val = sval_convert(lhs_val, retty);
	}
	lhs_ty ::= lhs_val.type;
	if(ty_isbad(lhs_ty))
	{
		psyc_error_begin(lhs->loc);
		puts("lhs of binary operator cast yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}

	if((rhs_sym.len) == cstrlen(weakening_idiom))
	{
		if(cstreql_n(rhs_sym.symbol, weakening_idiom, rhs_sym.len))
		{
			// it is the weakening idiom. apply weak qualifier to lhs type and return it.
			retty = lhs_ty;
			(retty.qual) = ((retty.qual) | tyqual.weak);
			return just_type(retty);
		}
	}
	if(ty_isbad(retty))
	{
		psyc_error_begin(rhs->loc);
		puts("rhs of binary operator cast was typename ");
		putchar('"');
		putss(rhs_sym.symbol, rhs_sym.len);
		putchar('"');
		puts(" which yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}
	return just_type(retty);
};

semal_biop_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval
{
	biop ::= expr.biop;
	node ::= ctx.node;
	if((node->childcount) != 2)
	{
		psyc_error_begin(node->loc);
		puts("biop expr expects exactly 2 children representing lhs and rhs. this biop expr node has ");
		putuint(node->childcount);
		puts(" children.");
		psyc_diag_end();
		psyc_exit_failure();
	}
	lhs ::= ast_biop_get_lhs(deref node);
	rhs ::= ast_biop_get_rhs(deref node);

	if((biop.type) == (ast_biop_type.cast))
	{
		return semal_biop_cast(lhs, rhs, ctx, prog);
	}
	if((biop.type) == (ast_biop_type.field))
	{
		return semal_biop_field(lhs, rhs, ctx, prog);
	}
	if((biop.type) == (ast_biop_type.ptr_field))
	{
		return semal_biop_ptr_field(lhs, rhs, ctx, prog);
	}

	lhs_val ::= semal_expr_common(lhs->expr, context{.node := lhs; .local := ctx.local;}, prog);
	if(ty_isbad(lhs_val.type))
	{
		psyc_error_begin(lhs->loc);
		puts("lhs of binary operator ");
		puts(__enumname(biop.type));
		puts(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}
	rhs_val : sval mut := semal_expr_common(rhs->expr, context{.node := rhs; .local := ctx.local;}, prog);
	if(sval_iszero(rhs_val))
	{
		rhs_val = sval_convert(rhs_val, lhs_val.type);
	}
	if(sval_isnull(rhs_val))
	{
		rhs_val = sval_convert(rhs_val, lhs_val.type);
	}
	if(ty_isbad(rhs_val.type))
	{
		psyc_error_begin(rhs->loc);
		puts("rhs of binary operator ");
		puts(__enumname(biop.type));
		puts(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}

	pre_transform_idx ::= (biop.type)@s64;
	subtraction ::= 0;
	idx ::= pre_transform_idx - subtraction;
	jump ::= deref(biop_jump_table at idx);
	return jump.fn(lhs_val, rhs_val, lhs->loc, rhs->loc, ctx, prog);
};

semal_builtin ::= func(call : ast_callfunc_expr, ctx : context mut, prog : program mut&, found : bool mut&) -> sval
{
	prefix_len ::= cstrlen("__");
	if((call.funcname_len) <= prefix_len)
	{
		return zero;
	}
	len ::= (call.funcname_len) - prefix_len;
	offset_name ::= (call.funcname) at prefix_len;

	i : u64 mut;
	builtin_count ::= __sizeof(builtins) / __sizeof(deref(builtins at 0));
	for(i = 0, i < builtin_count, i = i + 1)
	{
		cur_builtin_name ::= __enumname(i@builtin);
		cur_builtin_len ::= cstrlen(cur_builtin_name);
		if(cur_builtin_len == len)
		{
			if(cstreql_n(cur_builtin_name, offset_name, len))
			{
				fn ::= deref(builtins at i);
				deref(found) = true;
				return fn.fn(call, ctx, prog);
			}
		}
	}
	return zero;
};

semal_call_function_pointer ::= func(callfunc : ast_callfunc_expr, ctx : context mut, prog : program mut&) -> ty
{
	node ::= ctx.node;
	fnvar ::= scope_find_variable(ctx.local, callfunc.funcname, callfunc.funcname_len);
	if(fnvar == null)
	{
		return zero;
	}
	func_type ::= (fnvar->type);
	if(!ty_is(func_type, tytag.fn))
	{
		psyc_error_begin(node->loc);
		puts("cannot call ");
		putchar('"');
		putss(callfunc.funcname, callfunc.funcname_len);
		putchar('"');
		puts(" as it is of non-function-type ");
		putchar('"');
		putty(func_type);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	return func_type;
};

semal_call_normal_function ::= func(callfunc : ast_callfunc_expr, ctx : context mut, prog : program mut&) -> ty
{
	fn ::= scope_find_function(ctx.local, callfunc.funcname, callfunc.funcname_len);
	if(fn == null)
	{
		return zero;
	}
	return fn->type;
};

semal_call_macro ::= func(callfunc : ast_callfunc_expr, ctx : context mut, prog : program mut&) -> ty
{
	node ::= ctx.node;
	mac ::= scope_find_macro(ctx.local, callfunc.funcname, callfunc.funcname_len);
	if(mac == null)
	{
		return zero;
	}
	macro_scope ::= program_new_scope(prog, semar, ctx.local, scope_type.macrocall, node->loc, callfunc.funcname, callfunc.funcname_len);
	// todo: go through every macro param.
	// - error if the decl name will shadow an existing symbol
	macnode ::= mac->node;

	// so we now need to "invoke" the macro
	// we have to be really careful in how we do this.
	// if the macro for example has a defer statement, then that defer should take it all the way to the end of the calling scope
	// proper solution: deep-copy all nodes to our position in our parents child list.
	// problem: our architecture doesnt make that easy

	// alternate solution: just start invoking the macro child nodes now
	// problem: defers wont work as expected. will have to seek them out and deep copy them

	// so we might aswell just figure out a clever way to deep-copy the whole thing.
	psyc_warning_begin(node->loc);
	puts("calling macros is NYI");
	psyc_diag_end();
	return mac->yield_type;
};

semal_callfunc_typecheck_signature ::= func(callfunc : ast_callfunc_expr, func_type : ty, ctx : context mut, prog : program mut&) -> ty
{
	node ::= ctx.node;
	func_payload ::= func_type.fn;
	return_type ::= deref((func_payload.return_type)@ty&);

	call_param_count ::= node->childcount;
	def_param_count ::= func_payload.param_count;
	if(call_param_count != def_param_count)
	{
		psyc_error_begin(node->loc);
		puts("invalid call to function ");
		putchar('"');
		putss(callfunc.funcname, callfunc.funcname_len);
		putchar('"');
		puts(": called with ");
		putuint(call_param_count);
		puts(" params, but expects ");
		putuint(def_param_count);
		puts(": ");
		putty(func_type);
		psyc_diag_end();
		psyc_exit_failure();
	}

	i : u64 mut;
	cur_param_val : sval mut;

	def_param_ty : ty mut;
	types_ptr ::= (func_payload.param_types)@ty&;
	cur_child : ast& mut;
	cur_conv : tyconv mut;
	for(i = 0, i < def_param_count, i = i + 1)
	{
		def_param_ty = deref(types_ptr at i);
		cur_child = ast_get_child(node@_, i);
		cur_param_val = semal_expr(context
		{
			.node := cur_child@_;
			.local := ctx.local;
		}, prog);
		
		cur_conv = ty_get_conv(cur_param_val.type, def_param_ty);
		if(cur_conv == (tyconv.cant))
		{
			psyc_error_begin(node->loc);
			puts("invalid call to function ");
			putchar('"');
			putss(callfunc.funcname, callfunc.funcname_len);
			putchar('"');
			puts(": parameter ");
			putuint(i);
			puts(" was of type ");
			putchar('"');
			putty(cur_param_val.type);
			putchar('"');
			puts(", which is not convertible to ");
			putchar('"');
			putty(def_param_ty);
			putchar('"');
			puts(": ");
			putty(func_type);
			psyc_diag_end();
			psyc_exit_failure();
		}
		if(cur_conv == (tyconv.could_if_weak))
		{
			psyc_error_begin(node->loc);
			puts("invalid call to function ");
			putchar('"');
			putss(callfunc.funcname, callfunc.funcname_len);
			putchar('"');
			puts(": parameter ");
			putuint(i);
			puts(" was of type ");
			putchar('"');
			putty(cur_param_val.type);
			putchar('"');
			puts(", which is not convertible to ");
			putchar('"');
			putty(def_param_ty);
			putchar('"');
			puts(" (but it could with a cast)");
			puts(": ");
			putty(func_type);
			psyc_diag_end();
			psyc_exit_failure();
		}
	}
	// type-check params.
	return return_type;
};


semal_callfunc_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	callfunc ::= expr.callfunc;

	did_builtin : bool mut := false;
	builtin_result ::= semal_builtin(callfunc, ctx, prog, ref did_builtin);
	if(did_builtin)
	{
		return builtin_result;
	}
	func_type : ty mut := semal_call_function_pointer(callfunc, ctx, prog);
	if(ty_isbad(func_type))
	{
		func_type = semal_call_normal_function(callfunc, ctx, prog);
	}
	if(ty_isbad(func_type))
	{
		// note: calling macros has its own, special, cursed behaviour. we shouldnt do the normal functionty bits after so early-out.
		return just_type(semal_call_macro(callfunc, ctx, prog));
	}

	if(ty_isbad(func_type))
	{
		psyc_error_begin(node->loc);
		puts("could not find a callable named ");
		putchar('"');
		putss(callfunc.funcname, callfunc.funcname_len);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}

	return just_type(semal_callfunc_typecheck_signature(callfunc, func_type, ctx, prog));
};


semal_ret_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	parentfn ::= scope_get_parent_function(ctx.local);
	if(parentfn == null)
	{
		psyc_error_begin(node->loc);
		puts("invalid 'return' expression - only valid within a function implementation block");
		psyc_diag_end();
		psyc_exit_failure();
	}

	if((node->childcount) > 1)
	{
		psyc_error_begin(node->loc);
		puts("return expression node had ");
		putuint(node->childcount);
		puts(" child nodes, but it should have either 0 (retvoid) or exactly 1 (retval)");
		psyc_diag_end();
		psyc_exit_failure();
	}

	parentfn_ty ::= parentfn->type;
	parentfn_fnty ::= parentfn_ty.fn;
	parentfn_retty ::= deref((parentfn_fnty.return_type)@ty&);
	if((node->childcount) == 0)
	{
		// retvoid
		// parent fn better be return type v0
		if(!ty_is_v0(parentfn_retty))
		{
			psyc_error_begin(node->loc);
			puts("return expression is invalid because enclosing function");
			putchar('"');
			putss(parentfn->name, parentfn->name_len);
			putchar('"');
			puts(" expects to return a ");
			putchar('"');
			putty(parentfn_retty);
			putchar('"');
			puts(" - you must return a value");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}

	if((node->childcount) == 1)
	{
		// get the return type.
		childnode ::= ast_get_child(node@_, 0);
		// assume its an expression
		retval ::= semal_expr(context{.node := childnode; .local := ctx.local;}, prog);
		retvalty ::= retval.type;
		if(ty_isbad(retvalty))
		{
			psyc_error_begin(node->loc);
			puts("return expression yielded badtype");
			psyc_diag_end();
			psyc_exit_failure();
		}
		if(ty_is_v0(parentfn_retty))
		{
			psyc_error_begin(node->loc);
			puts("return expression is invalid because enclosing function ");
			putchar('"');
			putss(parentfn->name, parentfn->name_len);
			putchar('"');
			puts(" returns ");
			putchar('"');
			putty(parentfn_retty);
			putchar('"');
			puts(" - you cannot return a value");
			psyc_diag_end();
			psyc_exit_failure();
		}

		conv ::= ty_get_conv(retvalty, parentfn_retty);
		if(conv == (tyconv.cant))
		{
			psyc_error_begin(childnode->loc);
			puts("return expression is invalid because expression's type ");
			putchar('"');
			putty(retvalty);
			putchar('"');
			puts(" cannot be converted to enclosing function ");
			putchar('"');
			putss(parentfn->name, parentfn->name_len);
			putchar('"');
			puts("'s return type ");
			putchar('"');
			putty(parentfn_retty);
			putchar('"');
			psyc_diag_end();
			psyc_exit_failure();
		}
		if(conv == (tyconv.could_if_weak))
		{
			psyc_error_begin(childnode->loc);
			puts("return expression is invalid because expression's type ");
			putchar('"');
			putty(retvalty);
			putchar('"');
			puts(" cannot be converted to enclosing function ");
			putchar('"');
			putss(parentfn->name, parentfn->name_len);
			putchar('"');
			puts("'s return type ");
			putchar('"');
			putty(parentfn_retty);
			putchar('"');
			puts(" (but it could with a cast)");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}

	return zero;
};

semal_structinit_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	init ::= node->init;
	type ::= scope_parse_typename(ctx.local, init.name, init.name_len);
	if(ty_isbad(type))
	{
		psyc_error_begin(node->loc);
		puts("structinit type ");
		putchar('"');
		putss(init.name, init.name_len);
		putchar('"');
		puts(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(!ty_is(type, tytag.strct))
	{
		psyc_error_begin(node->loc);
		puts("structinit type ");
		putchar('"');
		putss(init.name, init.name_len);
		putchar('"');
		puts(" was not a struct");
		psyc_diag_end();
		psyc_exit_failure();
	}
	structinit_scope ::= program_new_scope(prog, semar, ctx.local, scope_type.structinit, node->loc, init.name, init.name_len);
	semal_children(context
	{
		.node := node;
		.local := structinit_scope;
	}, prog);

	// todo: return proper sval
	return just_type(type);
};

semal_decl_common ::= func(decl : ast_decl, ctx : context mut, prog : program mut&) -> ty
{
	node ::= ctx.node;
	is_deduced_type ::= cstreql_n(decl.typename, psyc_deduced_typename, decl.typename_len);
	retty : ty mut := zero;
	if(!is_deduced_type)
	{
		retty = scope_parse_typename(ctx.local, decl.typename, decl.typename_len);
		if(ty_isbad(retty))
		{
			// try globally
			retty = program_parse_typename(prog, decl.typename, decl.typename_len);
		}
	}
	init_val : sval mut := zero;
	if((node->childcount) > 0)
	{
		init_val = semal_expr(context{.node := ast_get_child(node@_, 0); .local := ctx.local;}, prog);
	}
	if(is_deduced_type)
	{
		// deduced type.
		if(sval_isnull(init_val))
		{
			psyc_error_begin(node->loc);
			puts("invalid use of the 'null' literal as a type-deduced initialiser for decl ");
			putchar('"');
			putss(decl.name, decl.name_len);
			putchar('"');
			psyc_diag_end();
			psyc_exit_failure();
		}
		if(sval_iszero(init_val))
		{
			psyc_error_begin(node->loc);
			puts("invalid use of the 'zero' literal as a type-deduced initialiser for decl ");
			putchar('"');
			putss(decl.name, decl.name_len);
			putchar('"');
			psyc_diag_end();
			psyc_exit_failure();
		}
		if(ty_isbad(init_val.type))
		{
			psyc_error_begin(node->loc);
			puts("type-deduced decl ");
			putss(decl.name, decl.name_len);
			puts(" did not have a deduceable initialiser");
			psyc_diag_end();
			psyc_exit_failure();
		}
		retty = (init_val.type);
	}
	if(ty_isbad(retty))
	{
		psyc_error_begin(node->loc);
		puts("decl ");
		putchar('"');
		putss(decl.name, decl.name_len);
		putchar('"');
		puts(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(ty_is_v0(retty))
	{
		psyc_error_begin(node->loc);
		puts("decl ");
		putchar('"');
		putss(decl.name, decl.name_len);
		putchar('"');
		puts(" cannot be of type");
		putchar('"');
		putty(retty);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}

	if((node->childcount) > 0)
	{
		if(sval_iszero(init_val))
		{
			init_val = sval_convert(init_val, retty);
		}
		if(sval_isnull(init_val))
		{
			init_val = sval_convert(init_val, retty);
		}
		// we have an initialiser set in init_val
		// we know its not badtype
		// lets make sure its convertible to the decl type.
		conv ::= ty_get_conv(init_val.type, retty);
		if(conv == (tyconv.cant))
		{
			psyc_error_begin(node->loc);
			puts("decl ");
			putchar('"');
			putss(decl.name, decl.name_len);
			putchar('"');
			puts("'s initialiser of type ");
			putchar('"');
			putty(init_val.type);
			putchar('"');
			puts(" is not convertible to ");
			putchar('"');
			putty(retty);
			putchar('"');
			psyc_diag_end();
			psyc_exit_failure();
		}
		if(conv == (tyconv.could_if_weak))
		{
			psyc_error_begin(node->loc);
			puts("decl ");
			putchar('"');
			putss(decl.name, decl.name_len);
			putchar('"');
			puts("'s initialiser of type ");
			putchar('"');
			putty(init_val.type);
			putchar('"');
			puts(" is not convertible to ");
			putchar('"');
			putty(retty);
			putchar('"');
			puts(" (but it could with a cast)");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}

	scope_declare_variable(ctx.local, semar, variable
	{
		.name := decl.name;
		.name_len := decl.name_len;
		.type := retty;
		.location := node->loc;
	});
	return retty;
};

semal_decl ::= func(ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	return sval
	{
		.type := semal_decl_common(node->decl, ctx, prog);
	};
};
