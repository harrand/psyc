mod : u64 mut;

str2cstr ::= func(str : u8&, len : u64, a : arena mut&) -> u8&
{
	cstr : u8 mut& := arena_push(a, len + 1);
	__memcpy(cstr, str, len);
	deref(cstr at len) = 0;
	return cstr;
};

cg_finish ::= func() -> v0
{
	err : u8& mut;
	if(LLVMVerifyModule(mod, 2, ref err) != 0)
	{
		psyc_error_begin(zero);
		puts("LLVM Internal Codegen Failed:");
		putchar(10);
		puts(err);
		putchar(10);
		psyc_diag_end();
		psyc_exit_failure();
	}
};

cg_primty ::= func(p : primty) -> u64
{
	arr : u64 mut#13;
	deref(arr at ((primty.s64)@s64)) = LLVMInt64Type();
	deref(arr at ((primty.s32)@s64)) = LLVMInt32Type();
	deref(arr at ((primty.s16)@s64)) = LLVMInt16Type();
	deref(arr at ((primty.s8)@s64)) = LLVMInt8Type();

	deref(arr at ((primty.u64)@s64)) = LLVMInt64Type();
	deref(arr at ((primty.u32)@s64)) = LLVMInt32Type();
	deref(arr at ((primty.u16)@s64)) = LLVMInt16Type();
	deref(arr at ((primty.u8)@s64)) = LLVMInt8Type();

	deref(arr at ((primty.bool)@s64)) = LLVMInt1Type();
	deref(arr at ((primty.f64)@s64)) = LLVMDoubleType();
	deref(arr at ((primty.f32)@s64)) = LLVMFloatType();

	deref(arr at ((primty.v0)@s64)) = LLVMVoidType();
	return deref(arr at (p@s64));
};

cg_struct_ptr_t ::= struct
{
	fn : func(def : structdef mut&, prog : program mut&) -> v0;
};
cg_struct_ptr : cg_struct_ptr_t mut;
// convert psyc 'ty' to LLVMTypeRef
cg_type ::= func(t : ty, prog : program mut&) -> u64
{
	if(ty_isbad(t))
	{
		psyc_panic(zero, "attempted to codegen cg_type(badtype). semal should've caught this. compiler bug.");
	}
	if((t.tag) == (tytag.prim))
	{
		return cg_primty(t.prim);
	}
	if((t.tag) == (tytag.enm))
	{
		return cg_primty(primty.s64);
	}
	if((t.tag) == (tytag.ptr))
	{
		ptr ::= t.ptr;
		u ::= deref((ptr.underlying)@ty&);
		cg_u ::= cg_type(u, prog);
		return LLVMPointerType(cg_u, 0);
	}
	if((t.tag) == (tytag.strct))
	{
		strct ::= t.strct;
		def ::= program_find_struct(prog, strct.name, strct.name_len);
		if((def->codegen) == 0)
		{
			// todo: need to cg_struct here.
			cg_struct_ptr.fn(def@_, prog);
		}
		return def->codegen;
	}
	psyc_panic(zero, "control flow reached end of cg_type - compiler bug.");
	return 0;
};

cg_children ::= func(ctx : context mut, prog : program mut&, offset : u64, back_offset : u64) -> v0
{
	node ::= ctx.node;
	i : u64 mut;
	childcount ::= node->childcount;
	if(childcount == 0)
	{
		return;
	}
	for(i = offset, i < (childcount - back_offset), i = i + 1)
	{
		cg_node(context
		{
			.node := ast_get_child(node@_, i);
			.local := ctx.local;
		}, prog);
	}
};

cg_struct ::= func(def : structdef mut&, prog : program mut&) -> v0
{
	if((def->codegen) != 0)
	{
		return;
	}
	node ::= def->node;
	type ::= def->type;
	if(ty_isbad(type))
	{
		psyc_panic(node->loc, "cg_struct structdef's type was badtype. semal should've sorted this - compiler bug.");
	}
	strct ::= type.strct;
	memcount ::= strct.member_count;
	// make an array for all the members.
	memarr : u64 mut& := arena_push(cgar, __sizeof(u64) * memcount);
	memtys ::= (strct.member_types)@ty&;
	i : u64 mut;
	for(i = 0, i < memcount, i = i + 1)
	{
		deref(memarr at i) = cg_type(deref(memtys at i), prog);
	}
	(def->codegen) = LLVMStructType(memarr, memcount@u32, false@s32);
};

cg_declare_func ::= func(fn : function mut&, s : scope mut&, prog : program mut&) -> v0
{
	type ::= fn->type;
	fnty ::= type.fn;
	param_count ::= (fn->param_count);
	paramdata : u64 mut& := arena_push(cgar, __sizeof(u64) * param_count);
	i : u64 mut;

	ret_tycg ::= cg_type(deref((fnty.return_type)@ty&), prog);
	param_tys ::= (fnty.param_types)@ty&;
	for(i = 0, i < param_count, i = i + 1)
	{
		deref(paramdata at i) = cg_type(deref(param_tys at i), prog);
	}

	func_tycg ::= LLVMFunctionType(ret_tycg, paramdata, param_count@u32, false@s32);
	(fn->codegen) = LLVMAddFunction(mod, str2cstr(fn->name, fn->name_len, cgar), func_tycg);
};

cg_define_func ::= func(fn : function mut&, s : scope mut&, prog : program mut&) -> v0
{
	if(fn->is_extern)
	{
		return;
	}
	node ::= fn->node;
	funcscope ::= program_new_scope(prog, cgar, s, scope_type.fn, node->loc, fn->name, fn->name_len);
	(funcscope->codegen) = LLVMAppendBasicBlock(fn->codegen, "entry");
	LLVMPositionBuilderAtEnd(ir, funcscope->codegen);
	defer LLVMClearInsertionPosition(ir);

	child_iterate_offset ::= fn->param_count;
	cg_children(context
	{
		.node := node;
		.local := funcscope;
	}, prog, child_iterate_offset, 0);

};

cg_verbose_print ::= func() -> v0
{
	str ::= LLVMPrintModuleToString(mod);
	puts("Codegen: ");
	putchar(10);
	puts(str);
	putchar(10);
};

codegen ::= func(prog : program mut&) -> v0
{
	psyc_timed(psyc_stage.codegen);
	mod = LLVMModuleCreateWithName("Psy Program");
	ir = LLVMCreateBuilder();

	args ::= ref(prog->compile_args);

	glob ::= ref(prog->global);
	structs ::= ref(glob->structs);
	funcs ::= ref(glob->funcs);

	i : u64 mut;
	for(i = 0, i < (structs->size), i = i + 1)
	{
		cg_struct((structs->data) at i, prog);
	}

	for(i = 0, i < (funcs->size), i = i + 1)
	{
		cg_declare_func((funcs->data) at i, glob, prog);
	}

	for(i = 0, i < (funcs->size), i = i + 1)
	{
		cg_define_func((funcs->data) at i, glob, prog);
	}

	if(args->verbose_codegen)
	{
		cg_verbose_print();
	}
	
	cg_finish();
};

codegen_setup ::= func(a : arena mut&) -> v0
{
	codegen_node_setup(a, cg_helper_functions
	{
		.children := cg_children;
		.type := cg_type;
	});
	cg_struct_ptr = cg_struct_ptr_t{.fn := cg_struct;};

	i : u64 mut;
	// fill in cgv conv tables.
	cgv_conv_table_size ::= __sizeof(cgv_conv_table) / __sizeof(deref(cgv_conv_table at 0));
	for(i = 0, i < cgv_conv_table_size, i = i + 1)
	{
		deref(cgv_conv_table at i) = cgv_conv_fn{.fn := cgv_conv_undef;};
	}
	deref(cgv_conv_table at ((tyconv.i2i)@s64)) = cgv_conv_fn{.fn := cgv_conv_i2i;};
};

== build ==
{
	add_source_file("llvm.psy");
	add_source_file("program.psy");

	add_source_file("codegen_node.psy");
	add_source_file("codegen_conv.psy");
}
