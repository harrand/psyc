str2cstr ::= func(str : u8&, len : u64, a : arena mut&) -> u8&
{
	cstr : u8 mut& := arena_push(a, len + 1);
	__memcpy(cstr, str, len);
	deref(cstr at len) = 0;
	return cstr;
};

cg_finish ::= func() -> v0
{
	err : u8& mut;
	if(LLVMVerifyModule(mod, 2, ref err) != 0)
	{
		psyc_error_begin(zero);
		puts("LLVM Internal Codegen Failed:");
		putchar(10);
		puts(err);
		putchar(10);
		psyc_diag_end();
		psyc_exit_failure();
	}

	/*
	if(LLVMWriteBitcodeToFile(mod, "a.bc") != 0)
	{
		psyc_error_begin(zero);
		puts("LLVM Failed to Write Bitcode file...");
		putchar(10);
		psyc_diag_end();
		psyc_exit_failure();
	}
	*/
};

cg_primty ::= func(p : primty) -> u64
{
	arr : u64 mut#13;
	deref(arr at ((primty.s64)@s64)) = LLVMInt64Type();
	deref(arr at ((primty.s32)@s64)) = LLVMInt32Type();
	deref(arr at ((primty.s16)@s64)) = LLVMInt16Type();
	deref(arr at ((primty.s8)@s64)) = LLVMInt8Type();

	deref(arr at ((primty.u64)@s64)) = LLVMInt64Type();
	deref(arr at ((primty.u32)@s64)) = LLVMInt32Type();
	deref(arr at ((primty.u16)@s64)) = LLVMInt16Type();
	deref(arr at ((primty.u8)@s64)) = LLVMInt8Type();

	deref(arr at ((primty.bool)@s64)) = LLVMInt1Type();
	deref(arr at ((primty.f64)@s64)) = LLVMDoubleType();
	deref(arr at ((primty.f32)@s64)) = LLVMFloatType();

	deref(arr at ((primty.v0)@s64)) = LLVMVoidType();
	return deref(arr at (p@s64));
};

cg_struct_ptr_t ::= struct
{
	fn : func(def : structdef mut&, prog : program mut&) -> v0;
};
cg_struct_ptr : cg_struct_ptr_t mut;
// convert psyc 'ty' to LLVMTypeRef
cg_type ::= func(t : ty, prog : program mut&) -> u64
{
	if(ty_isbad(t))
	{
		psyc_panic(zero, "attempted to codegen cg_type(badtype). semal should've caught this. compiler bug.");
	}
	if((t.tag) == (tytag.prim))
	{
		return cg_primty(t.prim);
	}
	if((t.tag) == (tytag.enm))
	{
		return cg_primty(primty.s64);
	}
	if((t.tag) == (tytag.ptr))
	{
		ptr ::= t.ptr;
		u ::= deref((ptr.underlying)@ty&);
		cg_u ::= cg_type(u, prog);
		return LLVMPointerType(cg_u, 0);
	}
	if((t.tag) == (tytag.strct))
	{
		strct ::= t.strct;
		def ::= program_find_struct(prog, strct.name, strct.name_len);
		if((def->codegen) == 0)
		{
			// todo: need to cg_struct here.
			cg_struct_ptr.fn(def@_, prog);
		}
		return def->codegen;
	}
	if((t.tag) == (tytag.fn))
	{
		fn ::= t.fn;
		paramdata : u64 mut& := arena_push(cgar, __sizeof(u64) * (fn.param_count));

		ret_cg ::= cg_type(deref((fn.return_type)@ty&), prog);
		param_tys ::= (fn.param_types)@ty&;

		i : u64 mut;
		for(i = 0, i < (fn.param_count), i = i + 1)
		{
			deref(paramdata at i) = cg_type(deref(param_tys at i), prog);
		}

		parcountu32 ::= (fn.param_count)@u32;
		return LLVMFunctionType(ret_cg, paramdata, parcountu32, false@s32);
	}
	if((t.tag) == (tytag.arr))
	{
		arr ::= t.arr;
		u_cg ::= cg_type(deref((arr.underlying)@ty&), prog);
		return LLVMArrayType2(u_cg, arr.len);
	}
	psyc_panic(zero, "control flow reached end of cg_type - compiler bug.");
	return 0;
};

cgu_is_defer ::= func(node : ast&) -> bool
{
	if(ast_is_expr(node, ast_expr_type.unop))
	{
		expr ::= node->expr;
		unop ::= expr.unop;
		if((unop.type) == (ast_unop_type.op_defer))
		{
			return true;
		}
	}
	return false;
};

cgu_is_ret ::= func(node : ast&) -> bool
{
	return ast_is_expr(node, ast_expr_type.ret);
};

cg_handle_defer ::= func(node : ast mut&, offset : u64, back_offset : u64) -> v0
{
	childcount ::= node->childcount;
	pivot : u64 mut := childcount - back_offset - 1;
	// initially put pivot as the last node

	while(cgu_is_ret(ast_get_child(node, pivot)))
	{
		pivot = pivot - 1;
	}

	i : u64 mut;
	childptr ::= (node->children)@ast mut&;
	for(i = 0, i <= pivot, i = i)
	{
		child ::= ast_get_child(node, i);
		if(!cgu_is_defer(child))
		{
			i = i + 1;
		}
		if(cgu_is_defer(child))
		{
			// cache the defer'd thing and just remove the defer
			cache ::= deref ast_get_child(child@_, 0);
			// move range i+1-(pivot-1) left once, then copy cache just before pivot
			copy_len ::= pivot - i;
			__memcpy(childptr at i, childptr at (i + 1), copy_len * __sizeof(ast));
			deref(childptr at pivot) = cache;
		}
	}
};

cg_children ::= func(ctx : context mut, prog : program mut&, offset : u64, back_offset : u64) -> v0
{
	node ::= ctx.node;
	i : u64 mut;
	childcount ::= node->childcount;
	if(childcount == 0)
	{
		return;
	}
	cg_handle_defer(node@_, offset, back_offset);
	for(i = offset, i < (childcount - back_offset), i = i + 1)
	{
		cg_node(context
		{
			.node := ast_get_child(node@_, i);
			.local := ctx.local;
		}, prog);
	}
};

cg_struct ::= func(def : structdef mut&, prog : program mut&) -> v0
{
	if((def->codegen) != 0)
	{
		return;
	}
	node ::= def->node;
	type ::= def->type;
	if(ty_isbad(type))
	{
		psyc_panic(node->loc, "cg_struct structdef's type was badtype. semal should've sorted this - compiler bug.");
	}
	strct ::= type.strct;
	memcount ::= strct.member_count;
	// make an array for all the members.
	memarr : u64 mut& := arena_push(cgar, __sizeof(u64) * memcount);
	memtys ::= (strct.member_types)@ty&;
	i : u64 mut;
	for(i = 0, i < memcount, i = i + 1)
	{
		deref(memarr at i) = cg_type(deref(memtys at i), prog);
	}
	name_zstr : u8 mut& := arena_push(cgar, 1 + (strct.name_len));
	__memcpy(name_zstr, strct.name, strct.name_len);
	deref(name_zstr at (strct.name_len)) = 0;
	(def->codegen) = LLVMStructCreateNamed(LLVMGetGlobalContext(), name_zstr);
	LLVMStructSetBody(def->codegen, memarr, memcount@u32, false@s32);
};

cg_declare_func ::= func(fn : function mut&, s : scope mut&, prog : program mut&) -> v0
{
	type ::= fn->type;
	fnty ::= type.fn;
	param_count ::= (fn->param_count);
	func_tycg ::= cg_type(type, prog);
	(fn->codegen) = LLVMAddFunction(mod, str2cstr(fn->name, fn->name_len, cgar), func_tycg);

	param : u64 mut := LLVMGetFirstParam(fn->codegen);
	fnnode ::= fn->node;
	i : u64 mut;
	for(i = 0, i < param_count, i = i + 1)
	{
		param_node ::= ast_get_child(fnnode@_, i);
		param_decl ::= param_node->decl;
		param_zstr : u8 mut& := arena_push(cgar, 1 + (param_decl.name_len));
		__memcpy(param_zstr, param_decl.name, param_decl.name_len);
		deref(param_zstr at (param_decl.name_len)) = 0;
		LLVMSetValueName(param, param_zstr);
		param = LLVMGetNextParam(param);
	}
};

cg_define_func ::= func(fn : function mut&, s : scope mut&, prog : program mut&) -> v0
{
	if(fn->is_extern)
	{
		return;
	}

	// firstly, disable stack probes (NOCRT)
	gctx ::= LLVMGetGlobalContext();
	no_stack_probe_str ::= "no-stack-arg-probe";
	no_stack_probe ::= LLVMCreateStringAttribute(gctx, no_stack_probe_str, cstrlen(no_stack_probe_str)@u32, "", 0);
	LLVMAddAttributeAtIndex(fn->codegen, LLVMAttributeFunctionIndex, no_stack_probe);

	node ::= fn->node;
	funcscope ::= (fn->impl_scope)@scope mut&;
	(funcscope->codegen) = LLVMAppendBasicBlock(fn->codegen, "entry");
	LLVMPositionBuilderAtEnd(ir, funcscope->codegen);
	defer LLVMClearInsertionPosition(ir);

	i : u64 mut;

	// we dont back parameters with allocas unlike in the prototype.
	// this means that store'ing into them is no longer allowed i.e they are always mutable
	// to semal check this, we will make sure params are never marked as 'mut'
	fntype ::= fn->type;
	fnpayload ::= fntype.fn;
	fnparamtys ::= (fnpayload.param_types)@ty&;
	for(i = 0, i < (fn->param_count), i = i + 1)
	{
		childnode ::= ast_get_child(node@_, i);
		childdecl ::= childnode->decl;
		childty ::= deref(fnparamtys at i);
		if(ty_isbad(childty))
		{
			psyc_error_begin(childnode->loc);
			puts("parameter ");
			putchar('"');
			putss(childdecl.name, childdecl.name_len);
			putchar('"');
			puts(" yielded badtype");
			psyc_diag_end();
			psyc_exit_failure();
		}
		if(ty_hasqual(childty, tyqual.mut))
		{
			psyc_error_begin(childnode->loc);
			puts("parameter ");
			putchar('"');
			putss(childdecl.name, childdecl.name_len);
			putchar('"');
			puts(" has been marked as 'mut'. function parameters can never be mutable");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}

	// assume this contains all vars (recursively iterated) in all subscopes
	// a LLVM frontend should hoist (alloca all its local variables at function start), which is what we do here
	// instead of alloca'ing them as we see them naturally as decl stmts.
	vars ::= ref(funcscope->vars);
	for(i = 0, i < (vars->size), i = i + 1)
	{
		curvar ::= (vars->data) at i;
		cg_decl(context
		{
			.node := curvar->node;
			.local := funcscope;
		}, prog);
	}

	child_iterate_offset ::= fn->param_count;
	cg_children(context
	{
		.node := node;
		.local := funcscope;
	}, prog, child_iterate_offset, 0);

	fn_retty ::= deref((fnpayload.return_type)@ty&);
	lastchildidx ::= (node->childcount) - 1;
	if((funcscope->terminator) != (ast_get_child(node@_, lastchildidx)))
	{
		// need a terminator
		if(ty_is_v0(fn_retty))
		{
			// add a retvoid here.
			LLVMBuildRetVoid(ir);
		}
		if(!ty_is_v0(fn_retty))
		{
			psyc_error_begin(node->loc);
			puts("function ");
			putchar('"');
			putss(fn->name, fn->name_len);
			putchar('"');
			puts(" is missing a final return value");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}
};

codegen ::= func(prog : program mut&) -> v0
{
	psyc_timed(psyc_stage.codegen);
	mod = LLVMModuleCreateWithName("Psy Program");
	ir = LLVMCreateBuilder();

	args ::= ref(prog->compile_args);

	glob ::= ref(prog->global);
	structs ::= ref(glob->structs);
	funcs ::= ref(glob->funcs);
	gvars ::= ref(glob->vars);

	i : u64 mut;
	for(i = 0, i < (structs->size), i = i + 1)
	{
		cg_struct((structs->data) at i, prog);
	}

	for(i = 0, i < (funcs->size), i = i + 1)
	{
		cg_declare_func((funcs->data) at i, glob, prog);
	}

	for(i = 0, i < (gvars->size), i = i + 1)
	{
		gvar ::= (gvars->data) at i;
		(gvar->is_global) = true;
		cg_decl(context
		{
			.node := gvar->node;
			.local := glob;
		}, prog);
	}

	for(i = 0, i < (funcs->size), i = i + 1)
	{
		cg_define_func((funcs->data) at i, glob, prog);
	}

	fltused_cgty ::= cg_type(ty_getprim(primty.s64, zero), prog);
	fltused ::= LLVMAddGlobal(mod, fltused_cgty, "_fltused");
	LLVMSetLinkage(fltused, LLVMCommonLinkage);
	LLVMSetExternallyInitialized(fltused, 0);
	LLVMSetInitializer(fltused, LLVMConstNull(fltused_cgty));

	cg_finish();
	(prog->codegen) = mod;
};

codegen_setup ::= func(a : arena mut&) -> v0
{
	codegen_node_setup(a, cg_helper_functions
	{
		.children := cg_children;
		.type := cg_type;
	});
	cg_struct_ptr = cg_struct_ptr_t{.fn := cg_struct;};

	i : u64 mut;
	// fill in cgv conv tables.
	cgv_conv_table_size ::= __sizeof(cgv_conv_table) / __sizeof(deref(cgv_conv_table at 0));
	for(i = 0, i < cgv_conv_table_size, i = i + 1)
	{
		deref(cgv_conv_table at i) = cgv_conv_fn{.fn := cgv_conv_undef;};
	}
	deref(cgv_conv_table at ((tyconv.cant)@s64)) = cgv_conv_fn{.fn := cgv_conv_cant;};
	deref(cgv_conv_table at ((tyconv.could_if_weak)@s64)) = cgv_conv_fn{.fn := cgv_conv_could_if_weak;};
	deref(cgv_conv_table at ((tyconv.i2i)@s64)) = cgv_conv_fn{.fn := cgv_conv_i2i;};
	deref(cgv_conv_table at ((tyconv.i2f)@s64)) = cgv_conv_fn{.fn := cgv_conv_i2f;};
	deref(cgv_conv_table at ((tyconv.i2p)@s64)) = cgv_conv_fn{.fn := cgv_conv_i2p;};
	deref(cgv_conv_table at ((tyconv.i2e)@s64)) = cgv_conv_fn{.fn := cgv_conv_i2e;};
	deref(cgv_conv_table at ((tyconv.i2b)@s64)) = cgv_conv_fn{.fn := cgv_conv_i2b;};
	deref(cgv_conv_table at ((tyconv.e2i)@s64)) = cgv_conv_fn{.fn := cgv_conv_e2i;};
	deref(cgv_conv_table at ((tyconv.p2i)@s64)) = cgv_conv_fn{.fn := cgv_conv_p2i;};
	deref(cgv_conv_table at ((tyconv.p2fn)@s64)) = cgv_conv_fn{.fn := cgv_conv_p2fn;};
	deref(cgv_conv_table at ((tyconv.p2p)@s64)) = cgv_conv_fn{.fn := cgv_conv_p2p;};
	deref(cgv_conv_table at ((tyconv.fn2p)@s64)) = cgv_conv_fn{.fn := cgv_conv_fn2p;};
	deref(cgv_conv_table at ((tyconv.f2i)@s64)) = cgv_conv_fn{.fn := cgv_conv_f2i;};
	deref(cgv_conv_table at ((tyconv.f2f)@s64)) = cgv_conv_fn{.fn := cgv_conv_f2f;};
	deref(cgv_conv_table at ((tyconv.b2i)@s64)) = cgv_conv_fn{.fn := cgv_conv_b2i;};
	deref(cgv_conv_table at ((tyconv.same)@s64)) = cgv_conv_fn{.fn := cgv_conv_same;};

	cg_builtin_table_size ::= __sizeof(cg_builtin_table) / __sizeof(deref(cg_builtin_table at 0));
	for(i = 0, i < cg_builtin_table_size, i = i + 1)
	{
		deref(cg_builtin_table at i) = cg_builtin_fn{.fn := cg_builtinfn_error;};
	}
	deref(cg_builtin_table at ((builtin.debugbreak)@s64)) = cg_builtin_fn{.fn := cg_builtin_debugbreak;};
	deref(cg_builtin_table at ((builtin.memcpy)@s64)) = cg_builtin_fn{.fn := cg_builtin_memcpy;};
	deref(cg_builtin_table at ((builtin.memset)@s64)) = cg_builtin_fn{.fn := cg_builtin_memset;};
};

== build ==
{
	add_source_file("llvm.psy");
	add_source_file("program.psy");

	add_source_file("codegen_node.psy");
	add_source_file("codegen_conv.psy");
	add_source_file("codegen_builtin.psy");
}
