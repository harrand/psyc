debugtrap_fn : u64 mut;

cg_builtin_debugbreak ::= func(ctx : context mut, prog : program mut? -> cgv)
{
	node ::= ctx.node;
	
	fn_type ::= LLVMFunctionType(LLVMVoidType(), zero, 0, false@s32);
	if(debugtrap_fn == 0)
	{
		debugtrap_fn = LLVMAddFunction(mod, "llvm.debugtrap", fn_type);
	}
	LLVMBuildCall2(ir, fn_type, debugtrap_fn, zero, 0, "");
	return zero;
};

cg_builtin_sizeof ::= func(ctx : context mut, prog : program mut? -> cgv)
{
	type : ty mut := zero;

	dstnode ::= ast_get_child((ctx.node)@_, 0);
	if(ast_is_expr(dstnode, ast_expr_type.symbol))
	{
		expr ::= dstnode->expr;
		sym ::= expr.symbol;
		type = scope_parse_typename(ctx.local, sym.symbol, sym.len);
	}
	if(ty_isbad(type))
	{
		val : cgv mut := cg_expr(context
		{
			.node := dstnode;
			.local := ctx.local;
		}, prog);
		type = (val.type);
	}

	dl ::= LLVMGetModuleDataLayout(mod);
	return cg_literal(make_literal_expr(ast_literal_expr
	{
		.type := ast_literal_type.integral;
		.integral := LLVMABISizeOfType(dl, cg.type(type, prog))@_;
	}), ctx, prog);
};

cg_builtin_alignof ::= func(ctx : context mut, prog : program mut? -> cgv)
{
	type : ty mut := zero;

	dstnode ::= ast_get_child((ctx.node)@_, 0);
	if(ast_is_expr(dstnode, ast_expr_type.symbol))
	{
		expr ::= dstnode->expr;
		sym ::= expr.symbol;
		type = scope_parse_typename(ctx.local, sym.symbol, sym.len);
	}
	if(ty_isbad(type))
	{
		val : cgv mut := cg_expr(context
		{
			.node := dstnode;
			.local := ctx.local;
		}, prog);
		type = (val.type);
	}

	dl ::= LLVMGetModuleDataLayout(mod);
	return cg_literal(make_literal_expr(ast_literal_expr
	{
		.type := ast_literal_type.integral;
		.integral := LLVMABIAlignmentOfType(dl, cg.type(type, prog))@_;
	}), ctx, prog);
};

cg_builtin_arrcpy ::= func(ctx : context mut, prog : program mut? -> cgv)
{
	if(ctx.typecheck_only)
	{
		return zero;
	}
	node ::= ctx.node;
	if((node->childcount) < 2)
	{
		psyc_error_begin(node->loc);
		putzstr("__arrcpy requires # least 2 parameters");
		psyc_diag_end();
		psyc_exit_failure();
	}
	arrlen ::= (node->childcount) - 2;
	// first param is a pointer to something mutable
	// second param is a typename representing a type of the array
	// rest are the array values to copy...
	firstnode ::= ast_get_child(node@_, 0);
	ptr : cgv mut := cg_expr(context
	{
		.node := firstnode;
		.local := ctx.local;
	}, prog);
	cgv_load_if_variable(ref ptr, prog);
	if(!ty_is(ptr.type, tytag.ptr))
	{
		psyc_error_begin(firstnode->loc);
		putzstr("parameter 0 to __arrcpy must be a pointer type, you have passed a ");
		putchar('"');
		putty(ptr.type);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}

	secondnode ::= ast_get_child(node@_, 1);
	if(!ast_is_expr(secondnode, ast_expr_type.symbol))
	{
		psyc_error_begin(firstnode->loc);
		putzstr("parameter 1 to __arrcpy must be a valid typename represented as a symbol expression");
		psyc_diag_end();
		psyc_exit_failure();
	}
	expr ::= secondnode->expr;
	sym ::= expr.symbol;
	type : ty mut := scope_parse_typename(ctx.local, sym.symbol, sym.len);
	if(ty_isbad(type))
	{
		psyc_error_begin(firstnode->loc);
		putzstr("parameter 1 to __arrcpy must be a valid typename - ");
		putchar('"');
		putbytes(sym.symbol, sym.len);
		putchar('"');
		putzstr(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}
	(type.qual) = (type.qual) | (tyqual.mut);

	index_list : u64 mut[2];
	deref(index_list # 0) = LLVMConstInt(LLVMInt64Type(), 0, false@s32);
	i : u64 mut;
	offset_ll : u64 mut;
	curnode : ast mut? mut;
	curval : cgv mut;
	for(i = 0, i < arrlen, i = i + 1)
	{
		deref(index_list # 1) = LLVMConstInt(cg.type(ty_getprim(primty.s64, zero), prog), i, false@s32);
		offset_ll = LLVMBuildGEP2(ir, cg.type(type, prog), ptr.ll, index_list # 1, 1, "");

		curnode = ast_get_child(node@_, 2 + i);
		
		curval = cg_expr(context
		{
			.node := curnode;
			.local := ctx.local;
		}, prog);
		
		curval = cgv_convert(curval, type, prog, curnode->loc, false);
		LLVMBuildStore(ir, curval.ll, offset_ll);
	}
	return cg_literal(make_literal_expr(ast_literal_expr
	{
		.type := ast_literal_type.integral;
		.integral := arrlen@_;
	}), ctx, prog);
};

cg_builtin_enumname ::= func(ctx : context mut, prog : program mut? -> cgv)
{
	node ::= ctx.node;
	enumnode ::= ast_get_child(node@_, 0);
	enumval : cgv mut := cg_expr(context
	{
		.node := enumnode;
		.local := ctx.local;
		.typecheck_only := false;
	}, prog);
	cgv_load_if_variable(ref enumval, prog);
	if(!ty_is(enumval.type, tytag.enm))
	{
		psyc_error_begin(enumnode->loc);
		putzstr("parameter to __enumname must be an enum type, you have provided a ");
		putchar('"');
		putty(enumval.type);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	fn ::= scope_get_parent_function(ctx.local, prog);

	type ::= enumval.type;
	enm ::= type.enm;
	retty ::= ty_ref(ty_getprim(primty.u8, zero), zero);
	llty ::= cg.type(retty, prog);
	ll ::= LLVMBuildAlloca(ir, llty, "__enumname_dynamic");
	badenumval ::= LLVMBuildGlobalString(ir, "badenum", "badenum");
	LLVMBuildStore(ir, badenumval, ll);
	i : u64 mut;
	for(i = 0, i < (enm.entry_count), i = i + 1)
	{
		val ::= deref((enm.entry_values) # i);
		name ::= deref((enm.entry_names) # i);
		name_len ::= deref((enm.entry_name_lens) # i);
		val_ll ::= LLVMConstInt(cg.type(ty_getprim(primty.s64, zero), prog), val, false@s32);
		cond ::= LLVMBuildICmp(ir, 32, val_ll, enumval.ll, "");

		cond_blk ::= LLVMAppendBasicBlock(fn->codegen, "enumname_if");
		cont_blk ::= LLVMAppendBasicBlock(fn->codegen, "__enumname cont");

		LLVMBuildCondBr(ir, cond, cond_blk, cont_blk);
		LLVMPositionBuilderAtEnd(ir, cond_blk);
		// store this value into the alloca
		zstr : u8 mut? mut := arena_alloc(cgar, name_len + 1);
		memcopy(zstr, name, name_len);
		deref(zstr # name_len) = 0;
		strval ::= LLVMBuildGlobalString(ir, zstr, "");
		LLVMBuildStore(ir, strval, ll);
		LLVMBuildBr(ir, cont_blk);
		LLVMPositionBuilderAtEnd(ir, cont_blk);
	}
	return cgv
	{
		.tag := cgvtag.misc;
		.ll := LLVMBuildLoad2(ir, llty, ll, "");
		.type := retty;
	};
};

cg_builtin_error ::= func(ctx : context mut, prog : program mut? -> cgv)
{
	node ::= ctx.node;
	msgnode ::= ast_get_child(node@_, 0);
	msg ::= sval_node(context
	{
		.node := msgnode;
		.local := ctx.local;
	}, prog);
	if((msg.tag) != (sval_tag.literal))
	{
		psyc_error_begin(node->loc);
		putzstr("Invalid call to builtin - param 0 must be a literal");
		psyc_diag_end();
		psyc_exit_failure();
	}
	lit ::= msg.literal;
	if((lit.type) != (ast_literal_type.string_literal))
	{
		psyc_error_begin(node->loc);
		putzstr("Invalid call to builtin - param 0 must be a string literal");
		psyc_diag_end();
		psyc_exit_failure();
	}
	psyc_colour_red();
	putzstr("custom");
	putzstr(" error ");
	print_srcloc(node->loc);
	putzstr(": ");
	putbytes(lit.chars, lit.chars_len);
	psyc_diag_end();
	psyc_exit_failure();
	return zero;
};

== build ==
{
	add_source_file("codegen_node.psy");
	add_source_file("diag.psy");
}
