sval_expr_fn ::= struct
{
	fn : func(expr : ast_expr, ctx : context mut, prog : program mut? -> sval);
};
sval_exprfn_error ::= func(expr : ast_expr, ctx : context mut, prog : program mut? -> sval)
{
	defer return zero;
	node ::= ctx.node;

	psyc_error_begin(node->loc);
	putzstr("erroneous sval-exprfn invoked for expr type ");
	putchar('"');
	putzstr(__enumname(expr.type));
	putzstr(" (");
	putuint((expr.type)@s64);
	putzstr(")");
	putchar('"');
	putzstr(" -- please report this as a compiler bug");
	putchar(10);
	psyc_diag_end();
	psyc_exit_failure();
};
sval_expr_table : sval_expr_fn mut[10] mut;

sval_node ::= func(ctx : context mut, prog : program mut? -> sval)
{
	node ::= ctx.node;
	expr ::= node->expr;
	fn ::= deref(sval_expr_table # ((expr.type)@s64));
	return fn.fn(expr, ctx, prog);
};

sval_symbol ::= func(expr : ast_expr, ctx : context mut, prog : program mut? -> sval)
{
	node ::= ctx.node;
	sym ::= expr.symbol;
	var ::= scope_find_variable(ctx.local, sym.symbol, sym.len);
	if(var == zero)
	{
		return zero;
	}
	declnode ::= var->node;
	if((declnode->childcount) == 0)
	{
		psyc_error_begin(node->loc);
		putzstr("variable ");
		putchar('"');
		putbytes(var->name, var->name_len);
		putchar('"');
		putzstr(" does not yield a constant-expression because it has no initialiser");
		psyc_diag_end();
		psyc_exit_failure();
	}
	return sval_node(context
	{
		.node := ast_get_child(declnode@_, 0);
		.local := ctx.local;
	}, prog);
};

sval_literal ::= func(expr : ast_expr, ctx : context mut, prog : program mut? -> sval)
{
	return sval
	{
		.tag := sval_tag.literal;
		.literal := expr.literal;
	};
};

sval_biop ::= func(expr : ast_expr, ctx : context mut, prog : program mut? -> sval)
{
	node ::= ctx.node;
	lhsnode ::= ast_get_child(node@_, 0);
	lhs : sval mut := sval_node(context{.node := lhsnode; .local := ctx.local;}, prog);
	rhsnode ::= ast_get_child(node@_, 1);
	rhs : sval mut := sval_node(context{.node := rhsnode; .local := ctx.local;}, prog);

	llit ::= ref(lhs.literal);
	rlit ::= ref(rhs.literal);

	b ::= expr.biop;
	t ::= b.type;
	if(t == (ast_biop_type.compare))
	{
		if((llit->type) != (rlit->type))
		{
			psyc_error_begin(node->loc);
			putzstr("comparison between ");
			putchar('"');
			putzstr(__enumname(llit->type));
			putchar('"');
			putzstr(" and ");
			putchar('"');
			putzstr(__enumname(rlit->type));
			putchar('"');
			putzstr(" is either invalid or NYI in a static context");
			psyc_diag_end();
			psyc_exit_failure();
		}
		if((llit->type) == (ast_literal_type.string_literal))
		{
			(llit->type) = (ast_literal_type.bool_literal);
			if((llit->chars_len) == (rlit->chars_len))
			{
				(llit->boolean) = streql_n(llit->chars, rlit->chars, llit->chars_len);
			}
			if((llit->chars_len) != (rlit->chars_len))
			{
				(llit->boolean) = false;
			}
			return lhs;
		}
		if((llit->type) == (ast_literal_type.integral))
		{
			(llit->boolean) = ((llit->integral) == (rlit->integral));
			(llit->type) = (ast_literal_type.bool_literal);
			return lhs;
		}
		if((llit->type) == (ast_literal_type.floating_point))
		{
			(llit->boolean) = ((llit->integral) == (rlit->integral));
			(llit->type) = (ast_literal_type.bool_literal);
			return lhs;
		}
		if((llit->type) == (ast_literal_type.bool_literal))
		{
			(llit->boolean) = ((llit->boolean) == (rlit->boolean));
			return lhs;
		}
		if((llit->type) == (ast_literal_type.char_literal))
		{
			(llit->type) = (ast_literal_type.bool_literal);
			if((llit->chars_len) == (rlit->chars_len))
			{
				(llit->boolean) = streql_n(llit->chars, rlit->chars, llit->chars_len);
			}
			if((llit->chars_len) != (rlit->chars_len))
			{
				(llit->boolean) = false;
			}
			return lhs;
		}
	}
	if(t == (ast_biop_type.plus))
	{
		(llit->integral) = (llit->integral) + (rlit->integral);
		(llit->floating_point) = (llit->floating_point) + (rlit->floating_point);
		return lhs;
	}
	if(t == (ast_biop_type.minus))
	{
		(llit->integral) = (llit->integral) - (rlit->integral);
		(llit->floating_point) = (llit->floating_point) - (rlit->floating_point);
		return lhs;
	}
	if(t == (ast_biop_type.multiply))
	{
		(llit->integral) = (llit->integral) * (rlit->integral);
		(llit->floating_point) = (llit->floating_point) * (rlit->floating_point);
		return lhs;
	}
	if(t == (ast_biop_type.divide))
	{
		(llit->integral) = (llit->integral) / (rlit->integral);
		(llit->floating_point) = (llit->floating_point) / (rlit->floating_point);
		return lhs;
	}
	if(t == (ast_biop_type.bitwise_or))
	{
		(llit->integral) = (llit->integral) | (rlit->integral);
		return lhs;
	}
	if(t == (ast_biop_type.bitwise_and))
	{
		(llit->integral) = (llit->integral) | (rlit->integral);
		return lhs;
	}
	if(t == (ast_biop_type.exor))
	{
		(llit->integral) = (llit->integral) ^ (rlit->integral);
		return lhs;
	}
	if(t == (ast_biop_type.bitleft))
	{
		//(llit->integral) = (llit->integral) << (rlit->integral);
		// todo: implement
	}
	if(t == (ast_biop_type.bitright))
	{
		//(llit->integral) = (llit->integral) << (rlit->integral);
		// todo: implement
	}
	if(t == (ast_biop_type.modulo))
	{
		(llit->integral) = (llit->integral) % (rlit->integral);
		return lhs;
	}
	psyc_error_begin(node->loc);
	putzstr("binary operator ");
	putchar('"');
	putzstr(__enumname(t));
	putzstr(" (");
	putuint(t@s64);
	putzstr(")");
	putchar('"');
	putzstr(" is invalid (or NYI) within a static context.");
	putchar(10);
	psyc_diag_end();
	psyc_exit_failure();
	return zero;
};

sval_unop ::= func(expr : ast_expr, ctx : context mut, prog : program mut? -> sval)
{
	node ::= ctx.node;
	operand ::= ast_get_child(node@_, 0);
	val : sval mut := sval_node(context
	{
		.node := operand;
		.local := ctx.local;
	}, prog);
	lit ::= ref(val.literal);

	u ::= expr.unop;
	t ::= u.type;
	if(t == (ast_unop_type.minus))
	{
		(lit->integral) = (-(lit->integral));
		(lit->floating_point) = (-(lit->floating_point));
		return val;
	}
	if(t == (ast_unop_type.bitwise_invert))
	{
		(lit->integral) = ~(lit->integral);
		return val;
	}
	if(t == (ast_unop_type.logical_invert))
	{
		(lit->boolean) = !(lit->boolean);
		return val;
	}
	psyc_error_begin(node->loc);
	putzstr("unary operator ");
	putchar('"');
	putzstr(__enumname(t));
	putzstr(" (");
	putuint(t@s64);
	putzstr(")");
	putchar('"');
	putzstr(" is invalid (or NYI) within a static context.");
	putchar(10);
	psyc_diag_end();
	psyc_exit_failure();
	return zero;
};

sval_setup ::= func( -> v0)
{
	sval_expr_table_size ::= __sizeof(sval_expr_table) / __sizeof(deref(sval_expr_table # 0));
	i : u64 mut;
	for(i = 0, i < sval_expr_table_size, i = i + 1)
	{
		deref(sval_expr_table # i) = sval_expr_fn{.fn := sval_exprfn_error;};
	}
	deref(sval_expr_table # ((ast_expr_type.symbol)@s64)) = sval_expr_fn{.fn := sval_symbol;};
	deref(sval_expr_table # ((ast_expr_type.biop)@s64)) = sval_expr_fn{.fn := sval_biop;};
	deref(sval_expr_table # ((ast_expr_type.unop)@s64)) = sval_expr_fn{.fn := sval_unop;};
	deref(sval_expr_table # ((ast_expr_type.literal)@s64)) = sval_expr_fn{.fn := sval_literal;};

};

== build ==
{
	add_source_file("sval.psy");
}
