static if(_win32)
{
	GetCommandLineW ::= func( -> u16? ):= extern;
	CommandLineToArgvW ::= func(lpCmdLine : u16?, pNumArgs : s32 mut? -> u16?? ):= extern;
	WideCharToMultiByte ::= func(CodePage : u32, dwFlags : s32, lpWideCharStr : u16?, cchWideChar : s32, lpMultiByteStr : u8 mut?, cbMultiByte : s32, lpDefaultChar : u16?, lpUsedDefaultChar : s32 mut? -> s32 ):= extern;
	LocalFree ::= func(hMem : u64 -> u64 ):= extern;
}

impl_win32_get_args ::= func(argc : s32 mut?, argv : u8?? mut?, a : arena mut? -> v0)
{
	cmd_line ::= GetCommandLineW();
	wide_argc : s32 mut;
	wide_argv ::= CommandLineToArgvW(cmd_line, ref wide_argc);

	if(wide_argv == zero)
	{
		deref(argc) = 0;
	}

	args_cap : u64 mut := wide_argc@_;
	args : u8 mut? mut? mut := arena_alloc(a, __sizeof(u8?) * wide_argc);
	args_size : u64 mut := 0;

	i : s32 mut;
	for(i = 0, i < wide_argc, i = i + 1)
	{
		size_needed ::= WideCharToMultiByte(0, 0, deref(wide_argv # i), -1, zero, 0, zero, zero);
		if(size_needed > 0)
		{
			deref(args # args_size) = arena_alloc(a, __sizeof(u8) * size_needed);
			WideCharToMultiByte(0, 0, deref(wide_argv # i), -1, deref(args # args_size), size_needed, zero, zero);
			args_size = args_size + 1;
		}
	}

	LocalFree(wide_argv@u64);

	deref(argc) = wide_argc;
	deref(argv) = args@_;
};

psyc_build_target ::= enum
{
	.objects := 0;
	.executable := 1;
	.library := 2;
};

psyc_compile_args ::= struct
{
	build_file : u8?;
	build_config : u8?;
	output_dir : u8?;
	output_name : u8?;
	output_name_len : u64;
	verbose_lex : bool;
	verbose_parse : bool;
	verbose_codegen : bool;
	verbose_link : bool;
};

psyc_parse_args ::= func(a : arena mut? -> psyc_compile_args)
{
	psyc_timed_begin(psyc_stage.setup);
	defer psyc_timed_end();

	argc : s32 mut;
	argv : u8?? mut;
	static if(_win32)
	{
		impl_win32_get_args(ref argc, ref argv, a);
	}

	ret : psyc_compile_args mut := zero@psyc_compile_args;
	(ret.build_config) = "default";

	i : s32 mut;
	for(i = 1, i < argc, i = i + 1)
	{
		curarg ::= deref(argv # i);
		isopt ::= zstr_starts_with(curarg, "-");
		if(!isopt)
		{
			// must be a build file then.
			if((ret.build_file) != zero)
			{
				psyc_error_begin(zero);
				putzstr("specified second build file ");
				putchar('"');
				putzstr(curarg);
				putchar('"');
				putzstr(" after initial build file ");
				putchar('"');
				putzstr(ret.build_file);
				putchar('"');
				putzstr(". you can only specify a single build file");
				psyc_diag_end();
				psyc_exit_failure();
			}
			(ret.build_file) = curarg;
		}
		if(isopt)
		{
			nextarg ::= argv # (i + 1);
			if(zstreql(curarg, "--verbose-lex"))
			{
				(ret.verbose_lex) = true;
			}
			if(zstreql(curarg, "--verbose-parse"))
			{
				(ret.verbose_parse) = true;
			}
			if(zstreql(curarg, "--verbose-codegen"))
			{
				(ret.verbose_codegen) = true;
			}
			if(zstreql(curarg, "--verbose-link"))
			{
				(ret.verbose_link) = true;
			}
			if(zstreql(curarg, "-b"))
			{
				(ret.build_config) = (deref nextarg);
				i = i + 1;
			}
		}
	}

	return ret;
};

== build ==
{
	add_source_file("stdlib/arena.psy");

	add_source_file("diag.psy");
}
