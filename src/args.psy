psyc_build_target ::= enum
{
	.objects := 0;
	.executable := 1;
	.library := 2;
};

psyc_compile_args ::= struct
{
	build_file : u8?;
	build_config : u8?;
	output_dir : u8?;
	output_name : u8?;
	output_name_len : u64;
	verbose_lex : bool;
	verbose_parse : bool;
	verbose_codegen : bool;
	verbose_link : bool;

	requested_version : bool;
};

psyc_parse_args ::= func(a : arena mut? -> psyc_compile_args)
{
	psyc_timed_begin(psyc_stage.setup);
	defer psyc_timed_end();

	ret : psyc_compile_args mut := zero@psyc_compile_args;
	(ret.build_config) = "default";
	(ret.output_dir) = "build";

	i : s32 mut;
	for(i = 1, i < argc, i = i + 1)
	{
		curarg ::= deref(argv # i);
		isopt ::= zstr_starts_with(curarg, "-");
		if(!isopt)
		{
			// must be a build file then.
			if((ret.build_file) != zero)
			{
				psyc_error_begin(zero);
				putzstr("specified second build file ");
				putchar('"');
				putzstr(curarg);
				putchar('"');
				putzstr(" after initial build file ");
				putchar('"');
				putzstr(ret.build_file);
				putchar('"');
				putzstr(". you can only specify a single build file");
				psyc_diag_end();
				psyc_exit_failure();
			}
			(ret.build_file) = curarg;
		}
		if(isopt)
		{
			nextarg ::= argv # (i + 1);
			if(zstreql(curarg, "--verbose-lex"))
			{
				(ret.verbose_lex) = true;
			}
			if(zstreql(curarg, "--verbose-parse"))
			{
				(ret.verbose_parse) = true;
			}
			if(zstreql(curarg, "--verbose-codegen"))
			{
				(ret.verbose_codegen) = true;
			}
			if(zstreql(curarg, "--verbose-link"))
			{
				(ret.verbose_link) = true;
			}
			if(zstreql(curarg, "-v"))
			{
				ret.requested_version = true;
			}
			if(zstreql(curarg, "-b"))
			{
				if(i + 1 >= argc)
				{
					psyc_error_begin(zero);
					putzstr("-b must be followed by a parameter");
					psyc_diag_end();
					psyc_exit_failure();
				}
				(ret.build_config) = (deref nextarg);
				i = i + 1;
			}
		}
	}

	return ret;
};

== build ==
{
	add_source_file("stdlib/arena.psy");

	add_source_file("diag.psy");
}
