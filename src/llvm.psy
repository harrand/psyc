// top level module bits
LLVMModuleCreateWithName ::= func(name : u8&) -> u64 := extern;
LLVMCreateBuilder ::= func() -> u64 := extern;

LLVMGetGlobalContext ::= func() -> u64 := extern;

LLVMAddFunction ::= func(module : u64, name : u8&, func_ty : u64) -> u64 := extern;
LLVMAddGlobal ::= func(module : u64, type : u64, name : u8&) -> u64 := extern;
LLVMSetExternallyInitialized ::= func(glob : u64, is_externally_initialized : s32) -> v0 := extern;
LLVMSetInitializer ::= func(glob : u64, constant_val : u64) -> v0 := extern;
LLVMSetGlobalConstant ::= func(glob : u64, is_const : s32) -> v0 := extern;

LLVMPrivateLinkage : s32 static := 9;
LLVMSetLinkage ::= func(glob : u64, linkage : s32) -> v0 := extern;

LLVMVerifyModule ::= func(module : u64, action : s32, out_message : u8& mut&) -> s32 := extern;
LLVMPrintModuleToString ::= func(module : u64) -> u8& := extern;

LLVMPrintValueToString ::= func(val : u64) -> u8& := extern;

// types
LLVMInt1Type ::= func() -> u64 := extern;
LLVMInt8Type ::= func() -> u64 := extern;
LLVMInt16Type ::= func() -> u64 := extern;
LLVMInt32Type ::= func() -> u64 := extern;
LLVMInt64Type ::= func() -> u64 := extern;
LLVMDoubleType ::= func() -> u64 := extern;
LLVMFloatType ::= func() -> u64 := extern;
LLVMVoidType ::= func() -> u64 := extern;

// this is the most obvious way of creating structs, but it has no option for naming it...
// LLVMStructType ::= func(element_types : u64&, element_count : u32, packed : s32) -> u64 := extern;
// this does, but requires us to explicitly pass the context and then populate the contents in a second call... stupid...
LLVMStructCreateNamed ::= func(ctx : u64, name : u8&) -> u64 := extern;
LLVMStructSetBody ::= func(structty : u64, element_types : u64&, element_count : u32, packed : s32) -> v0 := extern;

LLVMPointerType ::= func(element_type : u64, address_space : u32) -> u64 := extern;
LLVMFunctionType ::= func(ret_type : u64, param_types : u64&, param_count : u32, is_var_arg : s32) -> u64 := extern;

// Constants
LLVMConstInt ::= func(int_type : u64, N : u64 weak, sign_extend : s32) -> u64 := extern;
LLVMConstReal ::= func(real_type : u64, N : f64 weak) -> u64 := extern;
LLVMConstString ::= func(str : u8&, len : u32, dont_null_terminate : s32) -> u64 := extern;

LLVMConstNull ::= func(type : u64) -> u64 := extern;
LLVMConstPointerNull ::= func(type : u64) -> u64 := extern;
LLVMGetUndef ::= func(type : u64) -> u64 := extern;

// Functions and basic blocks
LLVMAppendBasicBlock ::= func(fn : u64, name : u8&) -> u64 := extern;
LLVMPositionBuilderAtEnd ::= func(builder : u64, block : u64) -> v0 := extern;
LLVMClearInsertionPosition ::= func(builder : u64) -> v0 := extern;

// Instructions
LLVMBuildAlloca ::= func(builder : u64, type : u64, name : u8&) -> u64 := extern;
LLVMBuildStore ::= func(builder : u64, val : u64, ptr : u64) -> u64 := extern;
LLVMBuildLoad2 ::= func(builder : u64, type : u64, pointer_val : u64, name : u8&) -> u64 := extern;

LLVMBuildAdd ::= func(builder : u64, lhs : u64, rhs : u64, name : u8&) -> u64 := extern;
LLVMBuildFAdd ::= func(builder : u64, lhs : u64, rhs : u64, name : u8&) -> u64 := extern;
LLVMBuildSub ::= func(builder : u64, lhs : u64, rhs : u64, name : u8&) -> u64 := extern;
LLVMBuildFSub ::= func(builder : u64, lhs : u64, rhs : u64, name : u8&) -> u64 := extern;
LLVMBuildMul ::= func(builder : u64, lhs : u64, rhs : u64, name : u8&) -> u64 := extern;
LLVMBuildFMul ::= func(builder : u64, lhs : u64, rhs : u64, name : u8&) -> u64 := extern;
LLVMBuildSDiv ::= func(builder : u64, lhs : u64, rhs : u64, name : u8&) -> u64 := extern;
LLVMBuildUDiv ::= func(builder : u64, lhs : u64, rhs : u64, name : u8&) -> u64 := extern;
LLVMBuildFDiv ::= func(builder : u64, lhs : u64, rhs : u64, name : u8&) -> u64 := extern;
LLVMBuildRetVoid ::= func(builder : u64) -> u64 := extern;
LLVMBuildRet ::= func(builder : u64, v : u64) -> u64 := extern;

LLVMBuildZExt ::= func(builder : u64, val : u64, dest_ty : u64, name : u8&) -> u64 := extern;
LLVMBuildSExt ::= func(builder : u64, val : u64, dest_ty : u64, name : u8&) -> u64 := extern;
LLVMBuildTrunc ::= func(builder : u64, val : u64, dest_ty : u64, name : u8&) -> u64 := extern;
LLVMBuildBitCast ::= func(builder : u64, val : u64, dest_ty : u64, name : u8&) -> u64 := extern;
LLVMBuildSIToFP ::= func(builder : u64, val : u64, dest_ty : u64, name : u8&) -> u64 := extern;
LLVMBuildUIToFP ::= func(builder : u64, val : u64, dest_ty : u64, name : u8&) -> u64 := extern;
LLVMBuildFPToSI ::= func(builder : u64, val : u64, dest_ty : u64, name : u8&) -> u64 := extern;
LLVMBuildFPToUI ::= func(builder : u64, val : u64, dest_ty : u64, name : u8&) -> u64 := extern;
LLVMBuildFPExt ::= func(builder : u64, val : u64, dest_ty : u64, name : u8&) -> u64 := extern;
LLVMBuildFPTrunc ::= func(builder : u64, val : u64, dest_ty : u64, name : u8&) -> u64 := extern;
LLVMBuildPtrToInt ::= func(builder : u64, val : u64, dest_ty : u64, name : u8&) -> u64 := extern;
LLVMBuildIntToPtr ::= func(builder : u64, val : u64, dest_ty : u64, name : u8&) -> u64 := extern;

== build ==
{
	add_link_library("LLVM-C.lib");
}
