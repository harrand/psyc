// top level module bits
LLVMModuleCreateWithName ::= func(name : u8? -> u64 ):= extern;
LLVMGetModuleDataLayout ::= func(mod : u64 -> u64 ):= extern;
LLVMCreateBuilder ::= func( -> u64 ):= extern;
LLVMWriteBitcodeToFile ::= func(mod : u64, path : u8? -> s32 ):= extern;

LLVMGetGlobalContext ::= func( -> u64 ):= extern;

LLVMAddFunction ::= func(module : u64, name : u8?, func_ty : u64 -> u64 ):= extern;
LLVMAddGlobal ::= func(module : u64, type : u64, name : u8? -> u64 ):= extern;
LLVMSetExternallyInitialized ::= func(glob : u64, is_externally_initialized : s32 -> v0 ):= extern;
LLVMSetInitializer ::= func(glob : u64, constant_val : u64 -> v0 ):= extern;
LLVMSetGlobalConstant ::= func(glob : u64, is_const : s32 -> v0 ):= extern;

LLVMPrivateLinkage : s32 static := 9;
LLVMExternalLinkage : s32 static := 0;
LLVMCommonLinkage : s32 static := 14;
LLVMSetLinkage ::= func(glob : u64, linkage : s32 -> v0 ):= extern;

LLVMCreateStringAttribute ::= func(ctx : u64, k : u8?, klen : u32, v : u8?, vlen : u32 -> u64 ):= extern;
LLVMAttributeFunctionIndex ::= -1;
LLVMAddAttributeAtIndex ::= func(f : u64, idx : u32, attr : u64 -> v0 ):= extern;

LLVMTypeOf ::= func(val : u64 -> u64 ):= extern;

LLVMVerifyModule ::= func(module : u64, action : s32, out_message : u8? mut? -> s32 ):= extern;
LLVMPrintModuleToString ::= func(module : u64 -> u8? ):= extern;
LLVMAddModuleFlag ::= func(mod : u64, behaviour : s32, key : u8?, keylen : u64, val_metadata : u64 -> v0) := extern;

LLVMMDStringInContext2 ::= func(ctx : u64, str : u8?, len : u64 -> u64) := extern;
LLVMValueAsMetadata ::= func(val : u64 -> u64) := extern;

LLVMPrintValueToString ::= func(val : u64 -> u8? ):= extern;
LLVMSetValueName ::= func(val : u64, name : u8? -> v0 ):= extern;

// types
LLVMInt1Type ::= func( -> u64 ):= extern;
LLVMInt8Type ::= func( -> u64 ):= extern;
LLVMInt16Type ::= func( -> u64 ):= extern;
LLVMInt32Type ::= func( -> u64 ):= extern;
LLVMInt64Type ::= func( -> u64 ):= extern;
LLVMDoubleType ::= func( -> u64 ):= extern;
LLVMFloatType ::= func( -> u64 ):= extern;
LLVMVoidType ::= func( -> u64 ):= extern;

LLVMABISizeOfType ::= func(dl : u64, type : u64 -> u64 ):= extern;
LLVMABIAlignmentOfType ::= func(dl : u64, type : u64 -> u32 ):= extern;

// this is the most obvious way of creating structs, but it has no option for naming it...
// LLVMStructType ::= func(element_types : u64?, element_count : u32, packed : s32 -> u64 ):= extern;
// this does, but requires us to explicitly pass the context and then populate the contents in a second call... stupid...
LLVMStructCreateNamed ::= func(ctx : u64, name : u8? -> u64 ):= extern;
LLVMStructSetBody ::= func(structty : u64, element_types : u64?, element_count : u32, packed : s32 -> v0 ):= extern;

LLVMPointerType ::= func(element_type : u64, address_space : u32 -> u64 ):= extern;
LLVMFunctionType ::= func(ret_type : u64, param_types : u64?, param_count : u32, is_var_arg : s32 -> u64 ):= extern;
LLVMArrayType2 ::= func(element_type : u64, element_count : u64 -> u64 ):= extern;

// Constants
LLVMConstInt ::= func(int_type : u64, N : u64 weak, sign_extend : s32 -> u64 ):= extern;
LLVMConstReal ::= func(real_type : u64, N : f64 weak -> u64 ):= extern;
LLVMConstString ::= func(str : u8?, len : u32, dont_null_terminate : s32 -> u64 ):= extern;
LLVMConstStruct ::= func(constant_vals : u64?, count : u32, packed : s32 -> u64 ):= extern;
LLVMConstArray ::= func(element_ty : u64, constant_vals : u64?, length : s32 -> u64 ):= extern;

LLVMConstNull ::= func(type : u64 -> u64 ):= extern;
LLVMConstPointerNull ::= func(type : u64 -> u64 ):= extern;
LLVMGetUndef ::= func(type : u64 -> u64 ):= extern;

LLVMIsConstant ::= func(val : u64 -> s32 ):= extern;

LLVMConstIntGetSExtValue ::= func(constantval : u64 -> u64 ):= extern;
LLVMConstRealGetDouble ::= func(constantval : u64, losesinfo : s32 mut? -> f64 ):= extern;
LLVMConstIntToPtr ::= func(constantval : u64, totype : u64 -> u64 ):= extern;
LLVMConstPtrToInt ::= func(constantval : u64, totype : u64 -> u64 ):= extern;

// Functions and basic blocks
LLVMGetFirstParam ::= func(fn : u64 -> u64 ):= extern;
LLVMGetNextParam ::= func(val : u64 -> u64 ):= extern;
LLVMGetParam ::= func(fn : u64, idx : u32 -> u64 ):= extern;

LLVMAppendBasicBlock ::= func(fn : u64, name : u8? -> u64 ):= extern;
LLVMPositionBuilderAtEnd ::= func(builder : u64, block : u64 -> v0 ):= extern;
LLVMClearInsertionPosition ::= func(builder : u64 -> v0 ):= extern;
LLVMGetInsertBlock ::= func(builder : u64 -> u64 ):= extern;

// Instructions
LLVMBuildAlloca ::= func(builder : u64, type : u64, name : u8? -> u64 ):= extern;
LLVMBuildStore ::= func(builder : u64, val : u64, ptr : u64 -> u64 ):= extern;
LLVMBuildLoad2 ::= func(builder : u64, type : u64, pointer_val : u64, name : u8? -> u64 ):= extern;

LLVMBuildCall2 ::= func(builder : u64, type : u64, fn : u64, args : u64?, args_count : u32, name : u8? -> u64 ):= extern;

LLVMBuildICmp ::= func(builder : u64, op : s32, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildFCmp ::= func(builder : u64, op : s32, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;

LLVMBuildAdd ::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildFAdd ::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildSub ::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildFSub ::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildMul ::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildFMul ::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildSDiv ::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildUDiv ::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildFDiv ::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildOr ::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildAnd ::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildXor ::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildShl::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildAShr::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildLShr::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildSRem ::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;
LLVMBuildURem ::= func(builder : u64, lhs : u64, rhs : u64, name : u8? -> u64 ):= extern;

LLVMBuildNeg ::= func(builder : u64, val : u64, name : u8? -> u64 ):= extern;
LLVMBuildFNeg ::= func(builder : u64, val : u64, name : u8? -> u64 ):= extern;
LLVMBuildNot ::= func(builder : u64, val : u64, name : u8? -> u64 ):= extern;

LLVMBuildRetVoid ::= func(builder : u64 -> u64 ):= extern;
LLVMBuildRet ::= func(builder : u64, v : u64 -> u64 ):= extern;

LLVMBuildZExt ::= func(builder : u64, val : u64, dest_ty : u64, name : u8? -> u64 ):= extern;
LLVMBuildSExt ::= func(builder : u64, val : u64, dest_ty : u64, name : u8? -> u64 ):= extern;
LLVMBuildTrunc ::= func(builder : u64, val : u64, dest_ty : u64, name : u8? -> u64 ):= extern;
LLVMBuildBitCast ::= func(builder : u64, val : u64, dest_ty : u64, name : u8? -> u64 ):= extern;
LLVMBuildSIToFP ::= func(builder : u64, val : u64, dest_ty : u64, name : u8? -> u64 ):= extern;
LLVMBuildUIToFP ::= func(builder : u64, val : u64, dest_ty : u64, name : u8? -> u64 ):= extern;
LLVMBuildFPToSI ::= func(builder : u64, val : u64, dest_ty : u64, name : u8? -> u64 ):= extern;
LLVMBuildFPToUI ::= func(builder : u64, val : u64, dest_ty : u64, name : u8? -> u64 ):= extern;
LLVMBuildFPExt ::= func(builder : u64, val : u64, dest_ty : u64, name : u8? -> u64 ):= extern;
LLVMBuildFPTrunc ::= func(builder : u64, val : u64, dest_ty : u64, name : u8? -> u64 ):= extern;
LLVMBuildPtrToInt ::= func(builder : u64, val : u64, dest_ty : u64, name : u8? -> u64 ):= extern;
LLVMBuildIntToPtr ::= func(builder : u64, val : u64, dest_ty : u64, name : u8? -> u64 ):= extern;

LLVMBuildBr ::= func(builder : u64, dest_block : u64 -> u64 ):= extern;
LLVMBuildCondBr ::= func(builder : u64, cond : u64, true_blk : u64, false_blk : u64 -> u64 ):= extern;

LLVMBuildStructGEP2 ::= func(builder : u64, type : u64, ptr : u64, idx : u32, name : u8? -> u64 ):= extern;
LLVMBuildExtractValue ::= func(builder : u64, aggval : u64, idx : u32, name : u8? -> u64 ):= extern;
LLVMBuildInsertValue ::= func(builder : u64, aggval : u64, element_val : u64, index : u32, name : u8? -> u64 ):= extern;
LLVMBuildGEP2 ::= func(builder : u64, type : u64, ptr : u64, indices : u64?, num_indices : u32, name : u8? -> u64 ):= extern;

LLVMBuildGlobalString ::= func(builder : u64, str : u8?, name : u8? -> u64 ):= extern;

// Assembly
LLVMInitializeX86AsmParser ::= func( -> v0 ):= extern;
LLVMInitializeX86AsmPrinter ::= func( -> v0 ):= extern;
LLVMInitializeX86TargetInfo ::= func( -> v0 ):= extern;
LLVMInitializeX86Target ::= func( -> v0 ):= extern;
LLVMInitializeX86Disassembler ::= func( -> v0 ):= extern;
LLVMInitializeX86TargetMC ::= func( -> v0 ):= extern;

LLVMGetDefaultTargetTriple ::= func( -> u8? ):= extern;
LLVMGetTargetFromTriple ::= func(triple : u8?, target : u64 mut?, error : u8? mut? -> s32 ):= extern;
LLVMCreateTargetMachine ::= func(target : u64, triple : u8?, cpu : u8?, features : u8?, codegen_level : s32, code_reloc : s32, code_model : s32 -> u64 ):= extern;
LLVMSetTarget ::= func(mod : u64, triple : u8? -> v0 ):= extern;

LLVMCreatePassBuilderOptions ::= func( -> u64 ):= extern;
LLVMRunPasses ::= func(mod : u64, passes : u8?, target_machine : u64, options : u64 -> s32 ):= extern;
LLVMTargetMachineEmitToFile ::= func(target_machine : u64, mod : u64, path : u8?, codegen_lang : s32, errmsg : u8? mut? -> s32 ):= extern;

// Debugging and debug symbols
LLVMCreateDIBuilder ::= func(mod : u64 -> u64):= extern;
LLVMDIBuilderFinalize ::= func(dibuilder : u64 -> v0):= extern;
LLVMDIBuilderCreateFile ::= func(dibuilder : u64, filename : u8?, filename_len : u64, directory : u8?, directory_len : u64 -> u64):= extern;
LLVMDIBuilderCreateCompileUnit ::= func(dibuilder : u64, lang : s32, fileref : u64, producer : u8?, producer_len : u64, is_optimized : s32, flags : u8?, flags_len : u64, runtime_ver : u32, split_name : u8?, split_name_len : u64, kind : s32, dw_old : u32, split_debug_inlining : s32, debug_info_for_profiling : s32, sys_root : u8?, sys_root_len : u64, sdk : u8?, sdk_len : u64 -> u64):= extern;
LLVMDIBuilderCreateDebugLocation ::= func(ctx : u64, line : u32, col : u32, scope_metadata : u64, inlined_at : u64 -> u64) := extern;
LLVMSetCurrentDebugLocation2 ::= func(builder : u64, loc_metadata : u64 -> v0) := extern;

LLVMDIBuilderCreateBasicType ::= func(dibuilder : u64, name : u8?, name_len : u64, size_in_bits : u64, encoding : s32, flags : s32 -> u64) := extern;
LLVMDIBuilderCreateStructType ::= func(dibuilder : u64, scope : u64, name : u8?, name_Len : u64, file : u64, line : u32, size_in_bits : u64, align_in_bits : u32, flags : s32, derived_from : u64, elements : u64?, num_elements : u32, run_time_lang : u32, vtable_holder : u64, unique_id : u8?, unique_id_len : u64 -> u64) := extern;

LLVMDIBuilderCreateFunction ::= func(dibuilder : u64, scope : u64, name : u8?, name_len : u64, linkage_name : u8?, linkage_name_len : u64, file : u64, line : u32, metadata_ty : u64, is_local_to_unit : s32, is_definition : s32, scope_line : u32, flags : s32, is_optimized : s32 -> u64) := extern;
LLVMSetSubprogram ::= func(func_value : u64, subprogram : u64 -> v0) := extern;

DW_ATE_address ::= 1;
DW_ATE_boolean ::= 2;
DW_ATE_float ::= 4;
DW_ATE_signed ::= 5;
DW_ATE_signed_char ::= 6;
DW_ATE_unsigned ::= 7;
DW_ATE_unsigned_char ::= 8;

== build ==
{
	add_link_library("LLVM-C.lib");
	add_link_library("lldCOFF.lib");
	add_link_library("lldCommon.lib");
	add_link_library("lldELF.lib");
	add_link_library("lldMachO.lib");
	add_link_library("lldMinGW.lib");
	add_link_library("lldWasm.lib");
	add_link_library("LLVMAArch64AsmParser.lib");
	add_link_library("LLVMAArch64CodeGen.lib");
	add_link_library("LLVMAArch64Desc.lib");
	add_link_library("LLVMAArch64Disassembler.lib");
	add_link_library("LLVMAArch64Info.lib");
	add_link_library("LLVMAArch64Utils.lib");
	add_link_library("LLVMAggressiveInstCombine.lib");
	add_link_library("LLVMAMDGPUAsmParser.lib");
	add_link_library("LLVMAMDGPUCodeGen.lib");
	add_link_library("LLVMAMDGPUDesc.lib");
	add_link_library("LLVMAMDGPUDisassembler.lib");
	add_link_library("LLVMAMDGPUInfo.lib");
	add_link_library("LLVMAMDGPUTargetMCA.lib");
	add_link_library("LLVMAMDGPUUtils.lib");
	add_link_library("LLVMAnalysis.lib");
	add_link_library("LLVMARMAsmParser.lib");
	add_link_library("LLVMARMCodeGen.lib");
	add_link_library("LLVMARMDesc.lib");
	add_link_library("LLVMARMDisassembler.lib");
	add_link_library("LLVMARMInfo.lib");
	add_link_library("LLVMARMUtils.lib");
	add_link_library("LLVMAsmParser.lib");
	add_link_library("LLVMAsmPrinter.lib");
	add_link_library("LLVMAVRAsmParser.lib");
	add_link_library("LLVMAVRCodeGen.lib");
	add_link_library("LLVMAVRDesc.lib");
	add_link_library("LLVMAVRDisassembler.lib");
	add_link_library("LLVMAVRInfo.lib");
	add_link_library("LLVMBinaryFormat.lib");
	add_link_library("LLVMBitReader.lib");
	add_link_library("LLVMBitstreamReader.lib");
	add_link_library("LLVMBitWriter.lib");
	add_link_library("LLVMBPFAsmParser.lib");
	add_link_library("LLVMBPFCodeGen.lib");
	add_link_library("LLVMBPFDesc.lib");
	add_link_library("LLVMBPFDisassembler.lib");
	add_link_library("LLVMBPFInfo.lib");
	add_link_library("LLVMCFGuard.lib");
	add_link_library("LLVMCFIVerify.lib");
	add_link_library("LLVMCodeGen.lib");
	//add_link_library("LLVMCodeGenData.lib");
	add_link_library("LLVMCodeGenTypes.lib");
	add_link_library("LLVMCore.lib");
	add_link_library("LLVMCoroutines.lib");
	add_link_library("LLVMCoverage.lib");
	add_link_library("LLVMDebugInfoBTF.lib");
	add_link_library("LLVMDebugInfoCodeView.lib");
	add_link_library("LLVMDebuginfod.lib");
	add_link_library("LLVMDebugInfoDWARF.lib");
	add_link_library("LLVMDebugInfoGSYM.lib");
	add_link_library("LLVMDebugInfoLogicalView.lib");
	add_link_library("LLVMDebugInfoMSF.lib");
	add_link_library("LLVMDebugInfoPDB.lib");
	add_link_library("LLVMDemangle.lib");
	add_link_library("LLVMDiff.lib");
	add_link_library("LLVMDlltoolDriver.lib");
	add_link_library("LLVMDWARFLinker.lib");
	add_link_library("LLVMDWARFLinkerClassic.lib");
	add_link_library("LLVMDWARFLinkerParallel.lib");
	add_link_library("LLVMDWP.lib");
	add_link_library("LLVMExecutionEngine.lib");
	add_link_library("LLVMExegesis.lib");
	add_link_library("LLVMExegesisAArch64.lib");
	add_link_library("LLVMExegesisMips.lib");
	add_link_library("LLVMExegesisPowerPC.lib");
	add_link_library("LLVMExegesisX86.lib");
	add_link_library("LLVMExtensions.lib");
	add_link_library("LLVMFileCheck.lib");
	add_link_library("LLVMFrontendDriver.lib");
	add_link_library("LLVMFrontendHLSL.lib");
	add_link_library("LLVMFrontendOffloading.lib");
	add_link_library("LLVMFrontendOpenACC.lib");
	add_link_library("LLVMFrontendOpenMP.lib");
	add_link_library("LLVMFuzzerCLI.lib");
	add_link_library("LLVMFuzzMutate.lib");
	add_link_library("LLVMGlobalISel.lib");
	add_link_library("LLVMHexagonAsmParser.lib");
	add_link_library("LLVMHexagonCodeGen.lib");
	add_link_library("LLVMHexagonDesc.lib");
	add_link_library("LLVMHexagonDisassembler.lib");
	add_link_library("LLVMHexagonInfo.lib");
	add_link_library("LLVMHipStdPar.lib");
	add_link_library("LLVMInstCombine.lib");
	add_link_library("LLVMInstrumentation.lib");
	add_link_library("LLVMInterfaceStub.lib");
	add_link_library("LLVMInterpreter.lib");
	add_link_library("LLVMipo.lib");
	add_link_library("LLVMIRPrinter.lib");
	add_link_library("LLVMIRReader.lib");
	add_link_library("LLVMJITLink.lib");
	add_link_library("LLVMLanaiAsmParser.lib");
	add_link_library("LLVMLanaiCodeGen.lib");
	add_link_library("LLVMLanaiDesc.lib");
	add_link_library("LLVMLanaiDisassembler.lib");
	add_link_library("LLVMLanaiInfo.lib");
	add_link_library("LLVMLibDriver.lib");
	add_link_library("LLVMLineEditor.lib");
	add_link_library("LLVMLinker.lib");
	add_link_library("LLVMLoongArchAsmParser.lib");
	add_link_library("LLVMLoongArchCodeGen.lib");
	add_link_library("LLVMLoongArchDesc.lib");
	add_link_library("LLVMLoongArchDisassembler.lib");
	add_link_library("LLVMLoongArchInfo.lib");
	add_link_library("LLVMLTO.lib");
	add_link_library("LLVMMC.lib");
	add_link_library("LLVMMCA.lib");
	//add_link_library("LVMMCDisassembler.lib");
	add_link_library("LLVMMCJIT.lib");
	add_link_library("LLVMMCParser.lib");
	add_link_library("LLVMMipsAsmParser.lib");
	add_link_library("LLVMMipsCodeGen.lib");
	add_link_library("LLVMMipsDesc.lib");
	add_link_library("LLVMMipsDisassembler.lib");
	add_link_library("LLVMMipsInfo.lib");
	add_link_library("LLVMMIRParser.lib");
	add_link_library("LLVMMSP430AsmParser.lib");
	add_link_library("LLVMMSP430CodeGen.lib");
	add_link_library("LLVMMSP430Desc.lib");
	add_link_library("LLVMMSP430Disassembler.lib");
	add_link_library("LLVMMSP430Info.lib");
	add_link_library("LLVMNVPTXCodeGen.lib");
	add_link_library("LLVMNVPTXDesc.lib");
	add_link_library("LLVMNVPTXInfo.lib");
	add_link_library("LLVMObjCARCOpts.lib");
	add_link_library("LLVMObjCopy.lib");
	add_link_library("LLVMObject.lib");
	add_link_library("LLVMObjectYAML.lib");
	//add_link_library("LLVMOptDriver.lib");
	add_link_library("LLVMOption.lib");
	add_link_library("LLVMOrcDebugging.lib");
	add_link_library("LLVMOrcJIT.lib");
	add_link_library("LLVMOrcShared.lib");
	add_link_library("LLVMOrcTargetProcess.lib");
	add_link_library("LLVMPasses.lib");
	add_link_library("LLVMPowerPCAsmParser.lib");
	add_link_library("LLVMPowerPCCodeGen.lib");
	add_link_library("LLVMPowerPCDesc.lib");
	add_link_library("LLVMPowerPCDisassembler.lib");
	add_link_library("LLVMPowerPCInfo.lib");
	add_link_library("LLVMProfileData.lib");
	add_link_library("LLVMRemarks.lib");
	add_link_library("LLVMRISCVAsmParser.lib");
	add_link_library("LLVMRISCVCodeGen.lib");
	add_link_library("LLVMRISCVDesc.lib");
	add_link_library("LLVMRISCVDisassembler.lib");
	add_link_library("LLVMRISCVInfo.lib");
	add_link_library("LLVMRISCVTargetMCA.lib");
	add_link_library("LLVMRuntimeDyld.lib");
	//add_link_library("LLVMSandboxIR.lib");
	add_link_library("LLVMScalarOpts.lib");
	add_link_library("LLVMSelectionDAG.lib");
	add_link_library("LLVMSparcAsmParser.lib");
	add_link_library("LLVMSparcCodeGen.lib");
	add_link_library("LLVMSparcDesc.lib");
	add_link_library("LLVMSparcDisassembler.lib");
	add_link_library("LLVMSparcInfo.lib");
	add_link_library("LLVMSupport.lib");
	add_link_library("LLVMSymbolize.lib");
	add_link_library("LLVMSystemZAsmParser.lib");
	add_link_library("LLVMSystemZCodeGen.lib");
	add_link_library("LLVMSystemZDesc.lib");
	add_link_library("LLVMSystemZDisassembler.lib");
	add_link_library("LLVMSystemZInfo.lib");
	add_link_library("LLVMTableGen.lib");
	//add_link_library("LLVMTableGenBasic.lib");
	add_link_library("LLVMTableGenCommon.lib");
	add_link_library("LLVMTarget.lib");
	add_link_library("LLVMTargetParser.lib");
	add_link_library("LLVMTextAPI.lib");
	add_link_library("LLVMTextAPIBinaryReader.lib");
	add_link_library("LLVMTransformUtils.lib");
	add_link_library("LLVMVEAsmParser.lib");
	add_link_library("LLVMVECodeGen.lib");
	add_link_library("LLVMVectorize.lib");
	add_link_library("LLVMVEDesc.lib");
	add_link_library("LLVMVEDisassembler.lib");
	add_link_library("LLVMVEInfo.lib");
	add_link_library("LLVMWebAssemblyAsmParser.lib");
	add_link_library("LLVMWebAssemblyCodeGen.lib");
	add_link_library("LLVMWebAssemblyDesc.lib");
	add_link_library("LLVMWebAssemblyDisassembler.lib");
	add_link_library("LLVMWebAssemblyInfo.lib");
	add_link_library("LLVMWebAssemblyUtils.lib");
	add_link_library("LLVMWindowsDriver.lib");
	add_link_library("LLVMWindowsManifest.lib");
	add_link_library("LLVMX86AsmParser.lib");
	add_link_library("LLVMX86CodeGen.lib");
	add_link_library("LLVMX86Desc.lib");
	add_link_library("LLVMX86Disassembler.lib");
	add_link_library("LLVMX86Info.lib");
	add_link_library("LLVMX86TargetMCA.lib");
	add_link_library("LLVMXCoreCodeGen.lib");
	add_link_library("LLVMXCoreDesc.lib");
	add_link_library("LLVMXCoreDisassembler.lib");
	add_link_library("LLVMXCoreInfo.lib");
	add_link_library("LLVMXRay.lib");
	add_link_library("LTO.lib");
	add_link_library("Remarks.lib");
}
