node ::= func(t : ast_type) -> u64
{
	return hash(t);
};

token ::= func(t : lex_token) -> u64
{
	multiplier ::= (ast_type.unparsed_token)@s64 * 54948375;
	return multiplier ^ hash(t);
};

hash_state ::= func(nodes : ast&, node_count : u64) -> u64
{
	i : u64 mut;
	hash : u64 mut := zero;
	for(i = 0, i < node_count, i = i + 1)
	{
		curnode ::= deref (nodes at i);
		if((curnode.type) == (ast_type.unparsed_token))
		{
			utok ::= curnode.utok;
			tokdata ::= utok.tok;
			hash = (hash ^ token(tokdata.tok));
		}
		if((curnode.type) != (ast_type.unparsed_token))
		{
			hash = (hash ^ node(curnode.type));
		}
		hash = hash * 34875947865;
	}
	return hash;
};


parse_action ::= enum
{
	.reduce := 0;
	.shift := 1;
	.recurse := 2;
	.commit := 3;
};

chord_result ::= struct
{
	action : parse_action;
};

chord_data ::= struct
{
	fn : func(nodes : ast mut&, nodes_size : u64) -> chord_result;
	occupied : bool;
};

[[private]]
chords : chord_data mut& mut;
[[private]]
chords_size : u64 mut;
[[private]]
chords_cap : u64 mut;

grammar_setup ::= func(a : arena mut&) -> v0
{
	chords_cap = 16384;
	chords = arena_push(a, __sizeof(deref chords) * chords_cap);
	__memset(chords, 0, __sizeof(deref chords) * chords_cap);
};

grammar_install ::= func(hash : u64, chord : chord_data) -> v0
{
	idx ::= hash % chords_cap;
	ptr ::= chords at idx;
	if(ptr->occupied)
	{
		psyc_panic(srcloc_current(), "multiple definition of chord via colliding hash");
	}
	(deref ptr) = chord;
};

grammar_find_chord ::= func(hash : u64) -> chord_data&
{
	idx ::= hash % chords_cap;
	if(idx >= chords_cap)
	{
		return null;
	}
	return chords at idx;
};

== build ==
{
	add_source_file("ast.psy");
	add_source_file("hash.psy");
}
