node ::= func(t : ast_type) -> u64
{
	return hash(t);
};

token ::= func(t : lex_token) -> u64
{
	multiplier ::= (ast_type.unparsed_token)@s64 * 54948375;
	return multiplier ^ hash(t);
};

parse_action ::= enum
{
	.reduce := 0;
	.shift := 1;
	.recurse := 2;
	.commit := 3;
};

chord_result ::= struct
{
	action : parse_action;
};

chord_data ::= struct
{
	fn : func(s : parse_state&) -> chord_result;
};

[[private]]
chords : chord_data mut& mut;
[[private]]
chords_size : u64 mut;
[[private]]
chords_cap : u64 mut;

grammar_setup ::= func(a : arena mut&) -> v0
{
	chords_cap = 16384;
	chords = arena_push(a, __sizeof(deref chords) * chords_cap);
};

== build ==
{
	add_source_file("ast.psy");
	add_source_file("hash.psy");
}
