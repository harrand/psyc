ar : arena mut& mut;

hashnode ::= func(t : ast_type) -> u64
{
	return hash(t);
};

hashtoken ::= func(t : lex_token) -> u64
{
	multiplier ::= (ast_type.unparsed_token)@s64 * 54948375;
	return multiplier ^ hash(t);
};

hash_state ::= func(nodes : ast&, node_count : u64) -> u64
{
	i : u64 mut;
	hash : u64 mut := zero;
	for(i = 0, i < node_count, i = i + 1)
	{
		curnode ::= deref (nodes at i);
		if((curnode.type) == (ast_type.unparsed_token))
		{
			utok ::= curnode.utok;
			tokdata ::= utok.tok;
			hash = (hash ^ hashtoken(tokdata.tok));
		}
		if((curnode.type) != (ast_type.unparsed_token))
		{
			hash = (hash ^ hashnode(curnode.type));
		}
		hash = hash * 34875947865;
	}
	return hash;
};

parse_action ::= enum
{
	.invalid := 0;
	.reduce := 1;
	.recurse := 2;
	.shift := 3;
	.commit := 4;
	.error := 5;
};

parse_value ::= struct
{
	action : parse_action;
	offset : u64;
	len : u64;
	errmsg : u8&;
	nodes : ast mut#16;
	nodes_size : u64;
};
grammar_rule ::= struct
{
	fn : func(source : u8&, nodes : ast mut&, nodes_size : u64) -> parse_value;
};

default_rule ::= func(source : u8&, nodes : ast mut&, nodes_size : u64) -> parse_value
{
	return parse_value
	{
		.action := parse_action.error;
		.errmsg := "default rule invoked";
	};
};

[[private]]
parse_table : grammar_rule mut& mut;
[[private]]
parse_table_size : u64 mut;
[[private]]
parse_table_cap : u64 mut;

zero_lookahead ::= zero@ast;
grammar_install ::= macro(nodes : auto, lookahead_node : ast, allow_begin_state : bool, rule : grammar_rule) -> v0
{
	[[__force_mutable]] nodearr ::= nodes;
	[[__force_mutable]] hash : u64 mut := hash_state(nodearr at 0, __arrlen(nodes));
	[[__force_mutable]] la ::= lookahead_node;
	[[__force_mutable]] la_hash : u64 mut := zero;
	if((la.type) != (ast_type.unknown))
	{
		la_hash = (!hash_state(ref la, 1));
		hash = (hash ^ la_hash);
	}
	if(allow_begin_state)
	{
		hash = !hash;
	}
	puts("(size = ");
	putuint(__arrlen(nodes));
	puts(", ptr = ");
	putuint((nodearr at 0)@u64);
	puts(") ");
	puts("in hash = ");
	putuint(hash);
	if((la.type) != (ast_type.unknown))
	{
		puts(" (incl. lookahead)");
	}
	if(allow_begin_state)
	{
		puts(" (allow_begin_state)");
	}
	putchar(10);
	[[__force_mutable]] ptr ::= parse_table at (hash % parse_table_cap);
	if(ptr->fn == default_rule)
	{
		psyc_panic(srcloc_current(), "hash collision detected");
	}
	deref(ptr) = rule;
};

token ::= macro(t : lex_token) -> ast static
{
	yield ast
	{
		.type := ast_type.unparsed_token;
		.utok := ast_unparsed_token
		{
			.tok := token_data
			{
				.tok := t;
			};
		};
	};
};

node ::= macro(t : ast_type) -> ast static
{
	yield ast
	{
		.type := t;
	};
};

s1 ::= func(source : u8&, nodes : ast mut&, nodes_size : u64) -> parse_value
{
	return parse_value{.action := parse_action.shift;};
};

c1 ::= func(source : u8&, nodes : ast mut&, nodes_size : u64) -> parse_value
{
	return parse_value
	{
		.action := parse_action.commit;
		.offset := 0;
		.len := 1;
	};
};

r1 ::= func(source : u8&, nodes : ast mut&, nodes_size : u64) -> parse_value
{
	puts("RECURSE 1");
	putchar(10);
	return parse_value{.action := parse_action.recurse; .offset := 1;};
};

numlit2expr ::= func(source : u8&, nodes : ast mut&, nodes_size : u64) -> parse_value
{
	// numeric_literal ; => literal expression statement.
	first ::= deref(nodes at 0);
	last ::= deref(nodes at (nodes_size - 1));

	ret : parse_value mut := parse_value
	{
		.action := parse_action.reduce;
		.offset := 0;
		.len := nodes_size;
		.nodes_size := 1;
	};
	utok ::= first.utok;
	tok ::= utok.tok;
	literal ::= interpret_numeric_literal(source, tok.lexeme);
	deref((ret.nodes) at 0) = ast
	{
		.type := ast_type.expr;
		.expr := make_literal_expr(literal);
		.loc := first.loc;
		.cursor_begin := first.cursor_begin;
		.cursor_end := last.cursor_end;
	};
	return ret;
};

exprsemicol2stmt ::= func(source : u8&, nodes : ast mut&, nodes_size : u64) -> parse_value
{
	first ::= deref(nodes at 0);
	last ::= deref(nodes at (nodes_size - 1));

	if((first.type) != (ast_type.expr))
	{
		psyc_panic(srcloc_current(), "fooey");
	}

	ret : parse_value mut := parse_value
	{
		.action := parse_action.reduce;
		.offset := 0;
		.len := nodes_size;
		.nodes_size := 1;
	};
	deref((ret.nodes) at 0) = ast
	{
		.type := ast_type.stmt;
		.stmt := ast_stmt
		{
			.type := ast_stmt_type.expr_stmt;
			.expr := first.expr;
		};
		.loc := first.loc;
		.cursor_begin := first.cursor_begin;
		.cursor_end := last.cursor_end;
	};
	return ret;
};

stmt2stmtlist ::= func(source : u8&, nodes : ast mut&, nodes_size : u64) -> parse_value
{
	first ::= deref(nodes at 0);
	last ::= deref(nodes at (nodes_size - 1));

	ret : parse_value mut := parse_value
	{
		.action := parse_action.reduce;
		.offset := 0;
		.len := nodes_size;
		.nodes_size := 1;
	};
	list : ast mut := ast
	{
		.type := ast_type.stmt_list;
		.loc := first.loc;
		.cursor_begin := first.cursor_begin;
		.cursor_end := last.cursor_end;
	};
	ast_add_child(ref list, first, ar);
	deref((ret.nodes) at 0) = list;
	return ret;
};

rule ::= macro(f : auto) -> grammar_rule
{
	yield grammar_rule{.fn := f;};
};

grammar_setup ::= func(a : arena mut&) -> v0
{
	ar = a;
	parse_table_cap = 16384;
	parse_table = arena_push(a, __sizeof(deref parse_table) * parse_table_cap);
	__memset(parse_table, 0, __sizeof(deref parse_table) * parse_table_cap);

	grammar_install(
		__array(ast, token(lex_token.numeric_literal)),
		zero_lookahead,
		false,
	rule(numlit2expr));
	grammar_install(
		__array(ast, token(lex_token.numeric_literal)),
		zero_lookahead,
		true,
	rule(numlit2expr));

	grammar_install(
		__array(ast, node(ast_type.expr)),
		token(lex_token.semicol),
		false,
	rule(s1));
	grammar_install(
		__array(ast, node(ast_type.expr)),
		token(lex_token.semicol),
		true,
	rule(s1));

	grammar_install(
		__array(ast, node(ast_type.expr), token(lex_token.semicol)),
		zero_lookahead,
		false,
	rule(exprsemicol2stmt));
	grammar_install(
		__array(ast, node(ast_type.expr), token(lex_token.semicol)),
		zero_lookahead,
		true,
	rule(exprsemicol2stmt));

	// only at beginning of state, not recursive.
	grammar_install(
		__array(ast, node(ast_type.stmt)),
		zero_lookahead,
		true,
	rule(stmt2stmtlist));

	grammar_install(
		__array(ast, node(ast_type.stmt_list)),
		zero_lookahead,
		false,
	rule(c1));
	grammar_install(
		__array(ast, node(ast_type.stmt_list)),
		zero_lookahead,
		true,
	rule(c1));
};

grammar_get_rule ::= func(hash : u64) -> grammar_rule
{
	idx ::= hash % parse_table_cap;
	// todo: open addressing.
	return deref(parse_table at idx);
};

== build ==
{
	add_source_file("ast.psy");
	add_source_file("hash.psy");
}
