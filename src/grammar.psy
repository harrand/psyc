hashnode ::= func(t : ast_type) -> u64
{
	return hash(t);
};

hashtoken ::= func(t : lex_token) -> u64
{
	multiplier ::= (ast_type.unparsed_token)@s64 * 54948375;
	return multiplier ^ hash(t);
};

hash_state ::= func(nodes : ast&, node_count : u64) -> u64
{
	i : u64 mut;
	hash : u64 mut := zero;
	for(i = 0, i < node_count, i = i + 1)
	{
		curnode ::= deref (nodes at i);
		if((curnode.type) == (ast_type.unparsed_token))
		{
			utok ::= curnode.utok;
			tokdata ::= utok.tok;
			hash = (hash ^ hashtoken(tokdata.tok));
		}
		if((curnode.type) != (ast_type.unparsed_token))
		{
			hash = (hash ^ hashnode(curnode.type));
		}
		hash = hash * 34875947865;
	}
	return hash;
};

parse_action ::= enum
{
	.invalid := 0;
	.reduce := 1;
	.recurse := 2;
	.shift := 3;
	.error := 4;
};

parse_value ::= struct
{
	action : parse_action;
	offset : u64;
	errmsg : u8&;
};

[[private]]
parse_table : parse_value mut& mut;
[[private]]
parse_table_size : u64 mut;
[[private]]
parse_table_cap : u64 mut;

grammar_install ::= macro(nodes : auto, val : parse_value) -> v0
{
	[[__force_mutable]] nodearr ::= nodes;
	[[__force_mutable]] hash ::= hash_state(nodearr at 0, __arrlen(nodes));
	puts("(size = ");
	putuint(__arrlen(nodes));
	puts(", ptr = ");
	putuint((nodearr at 0)@u64);
	puts(") ");
	puts("in hash = ");
	putuint(hash);
	putchar(10);
	[[__force_mutable]] ptr ::= parse_table at (hash % parse_table_cap);
	if((ptr->action) != (parse_action.invalid))
	{
		psyc_panic(srcloc_current(), "hash collision detected");
	}
	deref(ptr) = val;
};

token ::= macro(t : lex_token) -> ast static
{
	yield ast
	{
		.type := ast_type.unparsed_token;
		.utok := ast_unparsed_token
		{
			.tok := token_data
			{
				.tok := t;
			};
		};
	};
};

grammar_setup ::= func(a : arena mut&) -> v0
{
	parse_table_cap = 16384;
	parse_table = arena_push(a, __sizeof(deref parse_table) * parse_table_cap);
	__memset(parse_table, 0, __sizeof(deref parse_table) * parse_table_cap);

	grammar_install(
		__array(ast, token(lex_token.numeric_literal)),
	parse_value
	{
		.action := parse_action.shift;
		.errmsg := "single numeric literal detected";
	});

	grammar_install(
		__array(ast, token(lex_token.numeric_literal), token(lex_token.numeric_literal)),
	parse_value
	{
		.action := parse_action.error;
		.errmsg := "two numeric literals detected!";
	});
};

grammar_get_parse_value ::= func(hash : u64) -> parse_value
{
	idx ::= hash % parse_table_cap;
	// todo: open addressing.
	return deref(parse_table at idx);
};

== build ==
{
	add_source_file("ast.psy");
	add_source_file("hash.psy");
}
