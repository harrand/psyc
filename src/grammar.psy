node ::= func(t : ast_type) -> u64
{
	return hash(t);
};

token ::= func(t : lex_token) -> u64
{
	multiplier ::= (ast_type.unparsed_token)@s64 * 54948375;
	return multiplier ^ hash(t);
};

hash_state ::= func(nodes : ast&, node_count : u64) -> u64
{
	i : u64 mut;
	hash : u64 mut := zero;
	for(i = 0, i < node_count, i = i + 1)
	{
		curnode ::= deref (nodes at i);
		if((curnode.type) == (ast_type.unparsed_token))
		{
			utok ::= curnode.utok;
			tokdata ::= utok.tok;
			hash = (hash ^ token(tokdata.tok));
		}
		if((curnode.type) != (ast_type.unparsed_token))
		{
			hash = (hash ^ node(curnode.type));
		}
		hash = hash * 34875947865;
	}
	return hash;
};

parse_action ::= enum
{
	.invalid := 0;
	.reduce := 1;
	.recurse := 2;
	.shift := 3;
	.error := 4;
};

parse_value ::= struct
{
	action : parse_action;
	offset : u64;
	errmsg : u8&;
};

[[private]]
parse_table : parse_value mut& mut;
[[private]]
parse_table_size : u64 mut;
[[private]]
parse_table_cap : u64 mut;

grammar_setup ::= func(a : arena mut&) -> v0
{
	parse_table_cap = 16384;
	parse_table = arena_push(a, __sizeof(deref parse_table) * parse_table_cap);
	__memset(parse_table, 0, __sizeof(deref parse_table) * parse_table_cap);
};

grammar_get_parse_value ::= func(hash : u64) -> parse_value
{
	idx ::= hash % parse_table_cap;
	// todo: open addressing.
	return deref(parse_table at idx);
};

== build ==
{
	add_source_file("ast.psy");
	add_source_file("hash.psy");
}
