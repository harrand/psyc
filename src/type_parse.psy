// note: these are the building blocks of parsing specific bits of types e.g base, prims etc
// in truth, it is impossible to parse types without struct/enum scope information
// for that reason, if you want to just call some parse_typename function, you want scope_parse_typename so it can recognise custom structs/enums too.

// given a fully-qualified typename
// return the index representing the end of the base name
// e.g: u64 mut:
//	u64 is the base name
//	so returns 3
// note: this also applies for pointers:
// e.g: s8? weak mut
//	s8 is the base name
//	so returns 2
typarse_basename_end ::= func(tyname : u8?, tyname_len : u64 -> u64)
{
	i : u64 mut;
	for(i = 0, i < tyname_len, i = i + 1)
	{
		newptr ::= tyname # i;
		newlen ::= tyname_len - i;
		if(newlen >= 1)
		{
			if(cstr_starts_with_n(newptr, "?", 1))
			{
				return i;
			}

			if(cstr_starts_with_n(newptr, "[", 1))
			{
				return i;
			}
		}
		if(newlen >= 4)
		{
			if(cstr_starts_with_n(newptr, " mut", 4))
			{
				return i;
			}
		}
		if(newlen >= 5)
		{
			if(cstr_starts_with_n(newptr, " weak", 5))
			{
				return i;
			}
		}
		if(newlen >= 7)
		{
			if(cstr_starts_with_n(newptr, " static", 7))
			{
				return i;
			}
		}
	}
	return tyname_len;
};

typarse_primty ::= func(tyname : u8?, tyname_len : u64, len : u64 mut? -> primty)
{
	i : u64 mut;
	first_prim ::= (primty.s64)@s64@u64;
	last_prim ::= (primty.v0)@s64@u64;
	curprim : primty mut;
	for(i = first_prim, i <= last_prim, i = i + 1)
	{
		curprim = (i@s64@primty);
		curprim_name ::= __enumname(curprim);
		curprim_name_len ::= zstrlen(curprim_name);
		if(curprim_name_len <= tyname_len)
		{
			if(cstr_starts_with_n(tyname, curprim_name, curprim_name_len))
			{
				// yes it is
				deref(len) = (deref(len) + (curprim_name_len@_));
				return curprim;
			}
		}
	}
	return zero;
};

impl_typarse_qual_match ::= func(ename : u8?, ename_len : u64, q : tyqual, o : u64 mut? -> bool)
{
	// ok this shit is kinda wild ngl
	qname ::= __enumname(q);
	if(deref(ename # 0) != ' ')
	{
		return false;
	}
	deref(o) = (zstrlen(qname) + 1);
	return cstr_starts_with_n(qname, ename # 1, deref(o) - 1);
};

typarse_quals ::= func(extraname : u8?, extraname_len : u64, base_ty : ty mut? -> u64)
{
	qual ::= ref(base_ty->qual);
	if(extraname_len == 0)
	{
		return 0;
	}
	real_offset : u64 mut := 0;
	offset : u64 mut := 0;
	continue_parsing_quals : bool mut := true;
	while(continue_parsing_quals)
	{
		tmpoff ::= real_offset;
		if(impl_typarse_qual_match(extraname # tmpoff, extraname_len - tmpoff, tyqual.mut, ref offset))
		{
			deref(qual) = (deref(qual) | (tyqual.mut));
			real_offset = real_offset + offset;
		}
		if(impl_typarse_qual_match(extraname # tmpoff, extraname_len - tmpoff, tyqual.weak, ref offset))
		{
			deref(qual) = (deref(qual) | (tyqual.weak));
			real_offset = real_offset + offset;
		}
		if(impl_typarse_qual_match(extraname # tmpoff, extraname_len - tmpoff, tyqual.static, ref offset))
		{
			deref(qual) = (deref(qual) | (tyqual.static));
			real_offset = real_offset + offset;
		}
		if(tmpoff == real_offset)
		{
			continue_parsing_quals = false;
		}
		offset = 0;
	}
	return real_offset;
};

typarse_ptr ::= func(extraname : u8?, extraname_len : u64, base_ty : ty mut? -> u64)
{
	firstchar ::= deref(extraname # 0);
	if(firstchar == '?')
	{
		underlying ::= deref base_ty;
		deref(base_ty) = ty_ref(underlying, zero);
		return 1;
	}
	return 0;
};

typarse_arr ::= func(extraname : u8?, extraname_len : u64, base_ty : ty mut? -> u64)
{
	arrlenstr : u8? mut;
	firstchar ::= deref(extraname # 0);
	if(firstchar == '[')
	{
		underlying ::= deref base_ty;
		arrlenstr = extraname # 1;
		arrlenstrlen : u64 mut := 0;
		while(deref(extraname # (arrlenstrlen + 1)) != ']')
		{
			if(arrlenstrlen >= (extraname_len - 1))
			{
				psyc_panic(zero, "super dodgy typename detected (mismatch [ and ]). todo: better error");
			}
			arrlenstrlen = arrlenstrlen + 1;
		}
		// parse arrlenstr to get the value
		arrlen : u64 mut := 0;
		i : u64 mut;
		for(i = 0, i < arrlenstrlen, i = i + 1)
		{
			arrlen = ((arrlen * 10) + (deref(arrlenstr # i) - '0'));
		}
		deref(base_ty) = ty_arr(underlying, arrlen, zero);
		return arrlenstrlen + 2;
	}
	return 0;
};

typarse_extras ::= func(extraname : u8?, extraname_len : u64, base_ty : ty mut? -> u64)
{
	if(extraname == zero)
	{
		return 0;
	}
	offset : u64 mut := 0;
	continue_parsing : bool mut := true;
	while(continue_parsing)
	{
		tmpoff ::= offset;
		qualoff ::= typarse_quals(extraname # offset, extraname_len - offset, base_ty);
		offset = offset + qualoff;
		ptroff ::= typarse_ptr(extraname # offset, extraname_len - offset, base_ty);
		offset = offset + ptroff;
		arroff ::= typarse_arr(extraname # offset, extraname_len - offset, base_ty);
		offset = offset + arroff;
		if(tmpoff == offset)
		{
			continue_parsing = false;
		}
		if(offset >= extraname_len)
		{
			continue_parsing = false;
		}
	}
	return offset;
};

== build ==
{
	add_source_file("type.psy");
}
