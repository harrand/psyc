== build ==
{
	//fooey_glooey();
	add_link_library("Kernel32.lib");
	set_optimization(0);
	set_executable("tmp");
}

GetStdHandle ::= func(handle : u32 -> u64) := extern;
WriteConsoleA ::= func(hConsoleOutput : u64, lpBuffer : u8&, write_count : u32, chars_written : u32 mut& weak, reserved : v0& -> s32) := extern;

putchar ::= func(chr : u8 -> v0)
{
	v ::= chr;
	handle ::= GetStdHandle(4294967285@u32);
	WriteConsoleA(handle, ref v, 1@u32, zero, zero);
};

putuint ::= func(v : u64 weak -> v0)
{
	if(v > 9)
	{
		putuint(v / 10);
	}
	digit ::= v - ((v / 10) * 10);
	putchar('0' + digit);
};

putsint ::= func(v : s64 weak -> v0)
{
	val : s64 mut := v;
	if(v < 0)
	{
		putchar('-');
		val = -val;
	}
	putuint(val);
};

putfloat ::= func(fv : f32 -> v0)
{
	f : f32 mut := fv;
	if(f < 0)
	{
		putchar('-');
		f = (-f);
	}
	scaledf ::= ((f * 100.0) + 0.5);
	scaled ::= scaledf@s32;
	int_part ::= scaled / 100;
	decimal_part ::= scaled % 100;
	putuint(int_part);
	putchar('.');
	if(decimal_part < 10)
	{
		putchar('0');
	}
	putuint(decimal_part);
};

zstrlen ::= func(zstr : u8& -> u64)
{
	i : u64 mut;
	for(i = 0, deref(zstr at i) != 0, i = i + 1){}
	return i;
};

putss ::= func(sstr : u8&, len : u64 -> v0)
{
	i : u64 mut;
	for(i = 0, i < len, i = i + 1)
	{
		putchar(deref(sstr at i));
	}
};

putsz ::= func(zstr : u8& -> v0)
{
	putss(zstr, zstrlen(zstr));
};

fntable ::= struct
{
	print_null_terminated : func(zstr : u8& -> v0);
};

utils ::= struct
{
	tbl : fntable;
};

indirect ::= func(fn : func(zstr : u8& -> v0), actual_zstr : u8& -> v0)
{
	fn(actual_zstr);
};

main ::= func(-> s64)
{
	/*
	putuint(12345678910);
	putchar(10);
	putsz("hello there i am a big number");
	putchar(10);

	indirect(putsz, "harder test");
	putchar(10);
	tbl ::= zero@fntable mut;
	tbl.print_null_terminated = putsz;

	tbl.print_null_terminated("even harder test");
	putchar(10);

	u : utils mut;
	u.tbl.print_null_terminated = putsz;
	u.tbl.print_null_terminated("EEEEVEN harder test");

	a : u64 mut;
	b : u64 mut;
	__memcpy(ref a, ref b, 4);
	__memset(ref a, 0, 4);
	*/
	myarr ::= u64 mut[8]{2<<0;2<<1;2<<2;2<<3;2<<4;2<<5;2<<6;2<<7;};
	ptr ::= (ref myarr)@u64[4] mut&;
	deref ptr = u64[4]{10;11;12;13;};

	i : u64 mut;
	for(i = 0, i < 8, i = i + 1)
	{
		putuint(deref(myarr at i));
		putchar(10);
	}
	return 0;
};
