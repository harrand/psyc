// hello there
/* this is a single line multicomment*/
/* this is a
multi
line
	multicomment
*/ // hey
// hi there
0xff00ff00;
0.12345;
x : bool := true;
hello;
i;am;
__harrand123;
ast mut&;
h123;
'\t';'x';'d';'x';
"hello there i am 'xd'";
-5;
my_foo : u64 := 1;
myfoo1 ::= 5;
myfoo2 : u32 weak := -5;
myfoo3 : u64 mut := 5;
defer 1 * 5 + 5;
x || true;
(x@s64) & 5;

__message("hello there!");
if static(true)
{
	__message("bro is chillin");
	__warning("bad boy!");
}
else
{
	__message("bro is NOT chillin");
}
myfoo3 = 69;
x ::= my_foo + 2;
x ::= my_foo - 2;
__myfunc1 ::= func(x : u32, y : u64, z : u16, w : u8) -> u32 := extern;
zee ::= func() -> v0
{
};
__myfunc ::= func(x : u64) -> u64
{
	5 * 7;
	return 'x'@_;
};
__myfunc(myfoo2);
myfoo5 ::= __myfunc(5);
foo;
(foo);

mystruct ::= struct
{
	member : u64;
	mem2 : u32;
};

myinstance ::= mystruct
{
	.member := 50;
};

== build ==
{

}

{
	x = 5;
	{
		e();
	}
}

do_foo ::= func(x : u64, y : u32 mut& mut, z : mystruct mut weak static) -> v0 := extern;
do_foo2 ::= func(a : u32) -> v0
{
	x ::= 5;
	mynestedfunc ::= func(z : s8) -> v0 := extern;
};
