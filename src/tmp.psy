// hello there
/* this is a single line multicomment*/
/* this is a
multi
line
	multicomment
*/ // hey
// hi there
0xff00ff00;
0.12345;
zero;
w : u32;
x : bool mut := true;
v : u64 := 5;
if static(7 != 7.0)
{
	__message("test failed");
}
else
{
	__message("test worked");
}
'\t';'x';'d';'x';
~5;
"hello there i am 'xd'";
-5;
my_foo : u64 := 5;
myfoo1 ::= 5;
myfoo2 : u32 weak := 5;
myfoo3 : u64 mut := 5;
defer 1 * 5 + 5;
x || true;
(x@s64) & 5;

__message("hello there!");
if static(true)
{
	__message("bro is chillin");
	__warning("bad boy!");
}
else
{
	__message("bro is NOT chillin");
}
myfoo3 = 69;
__myfunc1 ::= func(x : u32, y : u64, z : u16, w : u8) -> u32 := extern;
//myfn ::= __myfunc1;
//__dumptype(myfn);
//myfn(1, 2, 3, 4);
zee ::= func(xd : u32) -> s64
{
	num : u64 mut := 1;
	counter : u64 mut;
	for(counter = 0, counter != 10, counter = counter + 1)
	{
		num = num * 2;
	}
	return num@s64;
};
//__myfunc(myfoo2);
//myfoo5 ::= __myfunc(5);

mystruct ::= struct
{
	member : u64;
	mem2 : u32;
};
vv : u8& := zero;

/*
myinstance : mystruct mut := mystruct
{
	.member := 50;
};
myref ::= ref myinstance;
(myref->member) = null;
goo ::= zero@u64;
*/

mycoolenum ::= enum
{
	.cool := 0;
	.epic := 1;
	.poggers := 2;
};

== build ==
{
	//fooey_glooey();
	add_source_file("tmp2.psy");
}

fooey ::= macro() -> v0
{
	x ::= 5;
	y ::= 6;
	yield x;
};

{
	x = false;
	if static(false)
	{
		e();
	}
}

fooey();

do_foo ::= func(x : u64, y : u32 mut& mut, z : mystruct mut weak static) -> v0 := extern;
do_foo2 ::= func(a : u32) -> v0
{
	//x ::= 5;
	//mynestedfunc ::= func(z : s8) -> v0 := extern;
};

