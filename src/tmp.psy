== build ==
{
	//fooey_glooey();
	add_link_library("Kernel32.lib");
	//set_optimization(3);
	set_executable("tmp");
}

GetStdHandle ::= func(handle : u32) -> u64 := extern;
WriteConsoleA ::= func(hConsoleOutput : u64, lpBuffer : u8&, write_count : u32, chars_written : u32 mut& weak, reserved : v0&) -> s32 := extern;

putchar ::= func(chr : u8) -> v0
{
	v ::= chr;
	handle ::= GetStdHandle(4294967285@u32);
	WriteConsoleA(handle, ref v, 1@u32, zero, zero);
};

putuint ::= func(v : u64 weak) -> v0
{
	if(v > 9)
	{
		putuint(v / 10);
	}
	digit ::= v - ((v / 10) * 10);
	putchar('0' + digit);
};

putsint ::= func(v : s64 weak) -> v0
{
	val : s64 mut := v;
	if(v < 0)
	{
		putchar('-');
		val = -val;
	}
	putuint(val);
};

zstrlen ::= func(zstr : u8&) -> u64
{
	i : u64 mut;
	for(i = 0, deref(zstr at i) != 0, i = i + 1){}
	return i;
};

putss ::= func(sstr : u8&, len : u64) -> v0
{
	i : u64 mut;
	for(i = 0, i < len, i = i + 1)
	{
		putchar(deref(sstr at i));
	}
};

putsz ::= func(zstr : u8&) -> v0
{
	putss(zstr, zstrlen(zstr));
};

main ::= func() -> s64
{
	putuint(12345678910);
	putchar(10);
	putsz("hello there i am a big number");

	myfn ::= putsz;
	myfn("it worked!");
	putchar(10);
	return 0;
};
