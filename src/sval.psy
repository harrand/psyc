sval_tag ::= enum
{
	.val_undef := 1;
	.val_zero := 2;
	.literal := 3;
};

sval_literal_tag ::= alias ast_literal_type;
sval_literal ::= alias ast_literal_expr;

sval ::= struct
{
	type : ty;
	tag : sval_tag;
	literal : sval_literal;
};

sval_exists ::= func(v : sval) -> bool
{
	return (v.tag) != zero;
};

sval_make_literal ::= func(lit : ast_literal_expr) -> sval
{
	ret : sval mut := zero;
	(ret.tag) = (sval_tag.literal);
	(ret.literal) = lit;
	retty ::= ref(ret.type);

	l ::= lit.type;
	numeric_litqual ::= (tyqual.static) | (tyqual.weak);
	if(l == (ast_literal_type.integral))
	{
		(deref retty) = ty_getprim(primty.s64, numeric_litqual);
	}
	if(l == (ast_literal_type.floating_point))
	{
		(deref retty) = ty_getprim(primty.f64, numeric_litqual);
	}

	return ret;
};

== build ==
{
	add_source_file("type.psy");
}
