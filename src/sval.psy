sval_tag ::= enum
{
	.val_undef := 1;
	.val_zero := 2;
	.val_null := 3;
	.literal := 4;
};

sval_literal_tag ::= alias ast_literal_type;
sval_literal ::= alias ast_literal_expr;

sval ::= struct
{
	type : ty;
	tag : sval_tag;
	literal : sval_literal;
};

sval_hasval ::= func(v : sval) -> bool
{
	return (v.tag) != zero;
};

sval_iszero ::= func(v : sval) -> bool
{
	return (v.tag) == (sval_tag.val_zero);
};

sval_isnull ::= func(v : sval) -> bool
{
	return (v.tag) == (sval_tag.val_null);
};

just_type ::= func(t : ty) -> sval
{
	return sval
	{
		.type := t;
		.tag := zero;
	};
};

sval_i2f ::= func(v : sval_literal mut&) -> v0
{
	(v->floating_point) = ((v->integral)@f64);
};

sval_i2b ::= func(v : sval_literal mut&) -> v0
{
	(v->boolean) = ((v->integral) != 0);
};

sval_b2i ::= func(v : sval_literal mut&) -> v0
{
	if(v->boolean)
	{
		(v->integral) = 1;
	}
	if(!(v->boolean))
	{
		(v->integral) = 0;
	}
};

sval_f2i ::= func(v : sval_literal mut&) -> v0
{
	(v->integral) = ((v->floating_point)@s64);
};

sval_convert ::= func(from : sval, to : ty) -> sval
{
	ret : sval mut := from;
	(ret.type) = to;

	if(sval_iszero(ret))
	{
		return ret;
	}
	if(sval_isnull(ret))
	{
		return ret;
	}

	lit ::= ref(ret.literal);

	conv ::= ty_get_conv(from.type, to);
	if(conv == (tyconv.cant))
	{
		return zero;
	}
	if(conv == (tyconv.could_if_weak))
	{
		return zero;
	}
	if(conv == (tyconv.i2f))
	{
		sval_i2f(lit);
	}
	if(conv == (tyconv.i2b))
	{
		sval_i2b(lit);
	}
	if(conv == (tyconv.b2i))
	{
		sval_b2i(lit);
	}
	if(conv == (tyconv.f2i))
	{
		sval_f2i(lit);
	}
	return ret;
};

== build ==
{
	add_source_file("type.psy");
}
