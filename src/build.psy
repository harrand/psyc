build_inst ::= enum
{
	.prebuild_command := 0;
	.postbuild_command := 1;
	.add_source_file := 2;
	.add_source_directory := 3;
	.add_build_file := 4;
	.add_link_library := 5;
	.set_optimization := 6;
	.set_executable := 7;
	.set_library := 8;
	.set_object := 9;
	.debug_symbols := 10;
	.warning := 11;
};

build_fn ::= struct
{
	fn : func(s : scope mut?, node : ast?, prog : program mut? -> v0);
};

build_resolve_constexpr ::= func(s : scope mut?, node : ast?, prog : program mut? -> sval)
{
	ret ::= sval_node(context
	{
		.node := node;
		.local := s;
	}, prog);
	if((ret.tag) == zero)
	{
		psyc_error_begin(node->loc);
		putzstr("Value could not be resolved to a constant expression");
		psyc_diag_end();
		psyc_exit_failure();
	}
	return ret;
};

build_instructions : build_fn mut[12] mut;

bi_prebuild_command ::= func(s : scope mut?, node : ast?, prog : program mut? -> v0)
{
	psyc_timed_begin(psyc_stage.build);
	defer psyc_timed_end();
	child ::= ast_get_child(node@_, 0);
	param ::= build_resolve_constexpr(s, child, prog);
	path ::= param.literal;
	if((path.type) != (ast_literal_type.string_literal))
	{
		psyc_error_begin(child->loc);
		putzstr("Argument to prebuild_command must be a string literal, but you have passed a ");
		putzstr(__enumname(path.type));
		putzstr(" literal");
		psyc_diag_end();
		psyc_exit_failure();
	}

	sys_shell_command(path.chars, path.chars_len, global_arena);
};

bi_postbuild_command ::= func(s : scope mut?, node : ast?, prog : program mut? -> v0)
{
	psyc_timed_begin(psyc_stage.build);
	defer psyc_timed_end();
	child ::= ast_get_child(node@_, 0);
	param ::= build_resolve_constexpr(s, child, prog);
	path ::= param.literal;
	if((path.type) != (ast_literal_type.string_literal))
	{
		psyc_error_begin(child->loc);
		putzstr("Argument to postbuild_command must be a string literal, but you have passed a ");
		putzstr(__enumname(path.type));
		putzstr(" literal");
		psyc_diag_end();
		psyc_exit_failure();
	}

	// todo: store this in program somewhere so its ran later.
	//invoke_shell_command(path.chars, path.chars_len, global_arena);
	if(prog->postbuild_commands == zero)
	{
		prog->postbuild_commands_cap = 8;
		prog->postbuild_commands = arena_alloc(global_arena, __sizeof(deref(prog->postbuild_commands)) * (prog->postbuild_commands_cap));
		prog->postbuild_command_lens = arena_alloc(global_arena, __sizeof(deref(prog->postbuild_command_lens)) * (prog->postbuild_commands_cap));
	}
	while(prog->postbuild_commands_size >= prog->postbuild_commands_cap)
	{
		oldcap ::= prog->postbuild_commands_cap;
		olddata ::= prog->postbuild_commands;
		oldlens ::= prog->postbuild_command_lens;

		prog->postbuild_commands_cap = oldcap * 2;
		prog->postbuild_commands = arena_alloc(global_arena, __sizeof(deref(prog->postbuild_commands)) * (prog->postbuild_commands_cap));
		memcopy(prog->postbuild_commands, olddata, __sizeof(deref(prog->postbuild_commands)) * oldcap);
		prog->postbuild_command_lens = arena_alloc(global_arena, __sizeof(deref(prog->postbuild_command_lens)) * (prog->postbuild_commands_cap));
		memcopy(prog->postbuild_command_lens, olddata, __sizeof(deref(prog->postbuild_command_lens)) * oldcap);
	}
	deref(prog->postbuild_commands # (prog->postbuild_commands_size)) = path.chars;
	deref(prog->postbuild_command_lens # (prog->postbuild_commands_size)) = path.chars_len;
	prog->postbuild_commands_size = (prog->postbuild_commands_size + 1);
};

bi_add_source_file ::= func(s : scope mut?, node : ast?, prog : program mut? -> v0)
{
	child ::= ast_get_child(node@_, 0);
	param ::= build_resolve_constexpr(s, child, prog);
	path ::= param.literal;
	if((path.type) != (ast_literal_type.string_literal))
	{
		psyc_error_begin(child->loc);
		putzstr("Argument to add_source_file must be a string literal, but you have passed a ");
		putzstr(__enumname(path.type));
		putzstr(" literal");
		psyc_diag_end();
		psyc_exit_failure();
	}

	fn ::= prog->on_add_source_file;
	fn(prog, path.chars, path.chars_len, global_arena);
};

bi_util_extension_is_psy ::= func(path : u8? -> bool)
{
	len ::= zstrlen(path);
	dot_position : u64 mut := -1;
	i : u64 mut;
	for(i = 0, i < len, i = i + 1)
	{
		ch ::= deref(path # i);
		if(ch == '.')
		{
			dot_position = i;
		}
	}
	if(dot_position == -1)
	{
		return false;
	}
	extension ::= "psy";
	if((len - dot_position) != (zstrlen(extension) + 1))
	{
		return false;
	}
	return streql_n(path # (dot_position + 1), extension, zstrlen(extension));
};

bi_util_prog : program mut? mut;
bi_util_dir : u8? mut;
bi_util_addsrc ::= func(path : u8? -> v0)
{
	if(!bi_util_extension_is_psy(path))
	{
		return;
	}
	fn ::= bi_util_prog->on_add_source_file;
	full_path : u8 mut? := arena_alloc(global_arena, zstrlen(path) + zstrlen(bi_util_dir) + 2);
	memcopy(full_path, bi_util_dir, zstrlen(bi_util_dir));
	deref(full_path # zstrlen(bi_util_dir)) = '/';
	memcopy(full_path # (1 + zstrlen(bi_util_dir)), path, zstrlen(path));
	deref(full_path # (1 + zstrlen(bi_util_dir) + zstrlen(path))) = 0;
	fn(bi_util_prog, full_path, zstrlen(full_path), global_arena);
};

bi_add_source_directory ::= func(s : scope mut?, node : ast?, prog : program mut? -> v0)
{
	child ::= ast_get_child(node@_, 0);
	param ::= build_resolve_constexpr(s, child, prog);
	path ::= param.literal;
	if((path.type) != (ast_literal_type.string_literal))
	{
		psyc_error_begin(child->loc);
		putzstr("Argument to add_source_file must be a string literal, but you have passed a ");
		putzstr(__enumname(path.type));
		putzstr(" literal");
		psyc_diag_end();
		psyc_exit_failure();
	}

	path_zstr : u8 mut? := arena_alloc(global_arena, 1 + (path.chars_len));
	memcopy(path_zstr, path.chars, path.chars_len);
	deref(path_zstr # (path.chars_len)) = 0;

	bi_util_prog = prog;
	bi_util_dir = path_zstr;
	directory_iterate(path_zstr, bi_util_addsrc, global_arena);
};

bi_add_build_file ::= func(s : scope mut?, node : ast?, prog : program mut? -> v0)
{
	child ::= ast_get_child(node@_, 0);
	param ::= build_resolve_constexpr(s, child, prog);
	path ::= param.literal;
	if((path.type) != (ast_literal_type.string_literal))
	{
		psyc_error_begin(child->loc);
		putzstr("Argument to add_source_file must be a string literal, but you have passed a ");
		putzstr(__enumname(path.type));
		putzstr(" literal");
		psyc_diag_end();
		psyc_exit_failure();
	}

	child2 ::= ast_get_child(node@_, 1);
	param2 ::= build_resolve_constexpr(s, child2, prog);
	build_config ::= param2.literal;
	if((build_config.type) != (ast_literal_type.string_literal))
	{
		psyc_error_begin(child->loc);
		putzstr("Argument to add_source_file must be a string literal, but you have passed a ");
		putzstr(__enumname(build_config.type));
		putzstr(" literal");
		psyc_diag_end();
		psyc_exit_failure();
	}

	fn ::= prog->on_add_build_file;
	fn(prog, path.chars, path.chars_len, build_config.chars, build_config.chars_len, global_arena);
};

bi_add_link_library ::= func(s : scope mut?, node : ast?, prog : program mut? -> v0)
{
	psyc_timed_begin(psyc_stage.build);
	defer psyc_timed_end();
	child ::= ast_get_child(node@_, 0);
	param ::= build_resolve_constexpr(s, child, prog);
	path ::= param.literal;
	if((path.type) != (ast_literal_type.string_literal))
	{
		psyc_error_begin(child->loc);
		putzstr("Argument to add_link_library must be a string literal, but you have passed a ");
		putzstr(__enumname(path.type));
		putzstr(" literal");
		psyc_diag_end();
		psyc_exit_failure();
	}

	program_add_link_library(prog, path.chars, path.chars_len, global_arena);
};

bi_set_optimization ::= func(s : scope mut?, node : ast?, prog : program mut? -> v0)
{
	psyc_timed_begin(psyc_stage.build);
	defer psyc_timed_end();
	child ::= ast_get_child(node@_, 0);
	param ::= build_resolve_constexpr(s, child, prog);
	level ::= param.literal;
	if((level.type) != (ast_literal_type.integral))
	{
		psyc_error_begin(child->loc);
		putzstr("Argument to set_optimization must be an integer literal, but you have passed a ");
		putzstr(__enumname(level.type));
		putzstr(" literal");
		psyc_diag_end();
		psyc_exit_failure();
	}
	if((level.integral) > 3)
	{
		psyc_error_begin(child->loc);
		putzstr("Integer literal provided to set_optimization must be between 0-3, but you have provided ");
		putuint(level.integral);
		psyc_diag_end();
		psyc_exit_failure();
	}

	(prog->opt) = (level.integral)@opt_level;
};

bi_set_executable ::= func(s : scope mut?, node : ast?, prog : program mut? -> v0)
{
	psyc_timed_begin(psyc_stage.build);
	defer psyc_timed_end();
	child ::= ast_get_child(node@_, 0);
	param ::= build_resolve_constexpr(s, child, prog);
	path ::= param.literal;
	if((path.type) != (ast_literal_type.string_literal))
	{
		psyc_error_begin(child->loc);
		putzstr("Argument to set_executable must be a string literal, but you have passed a ");
		putzstr(__enumname(path.type));
		putzstr(" literal");
		psyc_diag_end();
		psyc_exit_failure();
	}

	(prog->name) = (path.chars);
	(prog->name_len) = (path.chars_len);
	(prog->type) = (program_type.executable);
};

bi_set_library ::= func(s : scope mut?, node : ast?, prog : program mut? -> v0)
{
	psyc_timed_begin(psyc_stage.build);
	defer psyc_timed_end();
	child ::= ast_get_child(node@_, 0);
	param ::= build_resolve_constexpr(s, child, prog);
	path ::= param.literal;
	if((path.type) != (ast_literal_type.string_literal))
	{
		psyc_error_begin(child->loc);
		putzstr("Argument to set_library must be a string literal, but you have passed a ");
		putzstr(__enumname(path.type));
		putzstr(" literal");
		psyc_diag_end();
		psyc_exit_failure();
	}

	(prog->name) = (path.chars);
	(prog->name_len) = (path.chars_len);
	(prog->type) = (program_type.library);
};

bi_set_object ::= func(s : scope mut?, node : ast?, prog : program mut? -> v0)
{
	psyc_timed_begin(psyc_stage.build);
	defer psyc_timed_end();
	child ::= ast_get_child(node@_, 0);
	param ::= build_resolve_constexpr(s, child, prog);
	path ::= param.literal;
	if((path.type) != (ast_literal_type.string_literal))
	{
		psyc_error_begin(child->loc);
		putzstr("Argument to set_object must be a string literal, but you have passed a ");
		putzstr(__enumname(path.type));
		putzstr(" literal");
		psyc_diag_end();
		psyc_exit_failure();
	}

	(prog->name) = (path.chars);
	(prog->name_len) = (path.chars_len);
	(prog->type) = (program_type.object);
};

bi_debug_symbols ::= func(s : scope mut?, node : ast?, prog : program mut? -> v0)
{
	psyc_timed_begin(psyc_stage.build);
	defer psyc_timed_end();
	child ::= ast_get_child(node@_, 0);
	param ::= build_resolve_constexpr(s, child, prog);
	msg ::= param.literal;
	if((msg.type) != (ast_literal_type.bool_literal))
	{
		psyc_error_begin(child->loc);
		putzstr("Argument to debug_symbols must be a string literal, but you have passed a ");
		putzstr(__enumname(msg.type));
		putzstr(" literal");
		psyc_diag_end();
		psyc_exit_failure();
	}

	(prog->debug_symbols) = msg.boolean;
};

bi_warning ::= func(s : scope mut?, node : ast?, prog : program mut? -> v0)
{
	psyc_timed_begin(psyc_stage.build);
	defer psyc_timed_end();
	child ::= ast_get_child(node@_, 0);
	param ::= build_resolve_constexpr(s, child, prog);
	msg ::= param.literal;
	if((msg.type) != (ast_literal_type.string_literal))
	{
		psyc_error_begin(child->loc);
		putzstr("Argument to warning must be a string literal, but you have passed a ");
		putzstr(__enumname(msg.type));
		putzstr(" literal");
		psyc_diag_end();
		psyc_exit_failure();
	}

	psyc_warning_begin(node->loc);
	putbytes(msg.chars, msg.chars_len);
	psyc_diag_end();
};

get_build_instruction ::= func(name : u8?, name_len : u64 -> build_inst)
{
	i : u64 mut;
	len ::= __sizeof(build_instructions) / __sizeof(deref(build_instructions # 0));
	for(i = 0, i < len, i = i + 1)
	{
		curname : u8? := __enumname(i@build_inst);
		curname_len ::= zstrlen(curname);
		if(curname_len == name_len)
		{
			if(streql_n(name, curname, name_len))
			{
				return i@build_inst;
			}
		}
	}
	return (-1)@build_inst;
};

interpret_build_instruction ::= func(s : scope mut?, prog : program mut?, node : ast?, file_scope : scope? -> v0)
{
	expr ::= node->expr;
	callfunc ::= expr.callfunc;

	instid ::= get_build_instruction(callfunc.funcname, callfunc.funcname_len);
	if(instid == ((-1)@build_inst))
	{
		// not a build instruction.
		// assume instead its meant to be another build region to run.
		// real bad
		region ::= scope_find_region(file_scope@_, callfunc.funcname, callfunc.funcname_len);
		if(region != zero)
		{
			interpret_build_region(prog, region, file_scope);
		}
		if(region == zero)
		{
			psyc_error_begin(node->loc);
			putzstr("unknown build instruction ");
			putchar('"');
			putbytes(callfunc.funcname, callfunc.funcname_len);
			putchar('"');
			psyc_diag_end();
			psyc_exit_failure();
		}
		return;
	}
	inst ::= deref(build_instructions # (instid@s64));
	inst.fn(s, node, prog);
};

interpret_node ::= func(prog : program mut?, ctx : context mut, file_scope : scope? -> v0)
{
	node ::= ctx.node;
	s ::= ctx.local;

	i : u64 mut;
	childrenptr ::= (node->children)@ast?;
	for(i = 0, i < (node->childcount), i = i + 1)
	{
		cur ::= childrenptr # i;
		if(ast_is_expr(cur, ast_expr_type.callfunc))
		{
			interpret_build_instruction(s, prog, cur, file_scope);
		}
		if((cur->type) == (ast_type.composite))
		{
			interpret_node(prog, context
			{
				.node := cur;
				.local := ctx.local;
			}, file_scope);
		}
		if(ast_is_decl(cur))
		{
			init : sval mut := zero;
			decl ::= cur->decl;
			if((cur->childcount) > 0)
			{
				init = sval_node(context
				{
					.node := ast_get_child(cur@_, 0);
					.local := s;
				}, prog);
			}
			scope_declare_variable(s, global_arena, variable
			{
				.node := node;
				.name := decl.name;
				.name_len := decl.name_len;
				.is_global := false;
				.type := zero;
				.initialiser := init;
				.codegen := zero;
			});
		}
	}
};

interpret_build_region ::= func(prog : program mut?, reg : region?, file_scope : scope? -> v0)
{
	node ::= reg->node;
	interpret_node(prog, context
	{
		.node := node;
		.local := program_new_scope(prog, global_arena, ref(prog->global), scope_type.build_region, node->loc, "", 0);
	}, file_scope);
};

default_build_dir ::= "build";
static if(_win32)
{
	default_obj_extension ::= ".o";
	default_exe_extension ::= ".exe";
	default_lib_extension ::= ".lib";
}
else
{
	default_obj_extension ::= ".o";
	default_exe_extension ::= ".out";
	default_lib_extension ::= ".a";
}

build_setup ::= func( -> v0)
{
	psyc_timed_begin(psyc_stage.setup);
	defer psyc_timed_end();
	deref(build_instructions # ((build_inst.prebuild_command)@s64)) = build_fn{.fn := bi_prebuild_command;};
	deref(build_instructions # ((build_inst.postbuild_command)@s64)) = build_fn{.fn := bi_postbuild_command;};
	deref(build_instructions # ((build_inst.add_source_file)@s64)) = build_fn{.fn := bi_add_source_file;};
	deref(build_instructions # ((build_inst.add_source_directory)@s64)) = build_fn{.fn := bi_add_source_directory;};
	deref(build_instructions # ((build_inst.add_build_file)@s64)) = build_fn{.fn := bi_add_build_file;};
	deref(build_instructions # ((build_inst.add_link_library)@s64)) = build_fn{.fn := bi_add_link_library;};
	deref(build_instructions # ((build_inst.set_optimization)@s64)) = build_fn{.fn := bi_set_optimization;};
	deref(build_instructions # ((build_inst.set_executable)@s64)) = build_fn{.fn := bi_set_executable;};
	deref(build_instructions # ((build_inst.set_library)@s64)) = build_fn{.fn := bi_set_library;};
	deref(build_instructions # ((build_inst.set_object)@s64)) = build_fn{.fn := bi_set_object;};
	deref(build_instructions # ((build_inst.debug_symbols)@s64)) = build_fn{.fn := bi_debug_symbols;};
	deref(build_instructions # ((build_inst.warning)@s64)) = build_fn{.fn := bi_warning;};
};

 == build ==
 {
 	add_source_file("ast.psy");
 	add_source_file("program.psy");
	add_source_file("sval_node.psy");
 }
