ast_expr_type ::= enum
{
	.unknown := 0;
	.symbol := 1;
	.literal := 2;
	.biop := 3;
	.unop := 4;
	.callfunc := 5;
	.ret := 6;
};

ast_biop_type ::= enum
{
	.assign := 0;
	.plus := 1;
	.minus := 2;
	.multiply := 3;
	.divide := 4;
	.bitwise_or := 5;
	.logical_or := 6;
	.bitwise_and := 7;
	.logical_and := 8;
	.operator_at := 9;
	.cast := 10;
};

ast_biop_expr ::= struct
{
	type : ast_biop_type;
};

ast_unop_type ::= enum
{
	.minus := 0;
	.op_ref := 1;
	.op_deref := 2;
	.op_defer := 3;
};

ast_unop_expr ::= struct
{
	type : ast_unop_type;
};

ast_literal_type ::= enum
{
	.integral := 0;
	.floating_point := 1;
	.char_literal := 2;
	.string_literal := 3;
	.bool_literal := 4;
};

ast_literal_expr ::= struct
{
	type : ast_literal_type;
	integral : s64;
	floating_point : f64;
	chars : u8&;
	chars_len : u64;
	boolean : bool;
};

ast_symbol_expr ::= struct
{
	symbol : u8&;
	len : u64;
};

ast_callfunc_expr ::= struct
{
	funcname : u8&;
	funcname_len : u64;
};

ast_expr ::= struct
{
	type : ast_expr_type;
	symbol : ast_symbol_expr;
	literal : ast_literal_expr;
	unop : ast_unop_expr;
	biop : ast_biop_expr;
	callfunc : ast_callfunc_expr;
};

ast_decl ::= struct
{
	name : u8&;
	name_len : u64;
	typename : u8&;
	typename_len : u64;
};

ast_stmt ::= enum
{
	.unknown := 0;
	.expr_stmt := 1;
	.decl_stmt := 2;
	.region_stmt := 3;
	.struct_stmt := 4;
	.fn_stmt := 5;
	.blk_stmt := 6;
	.if_stmt := 7;
};

ast_region_stmt ::= struct
{
	name : u8&;
	name_len : u64;
};

ast_unparsed_token ::= struct
{
	tok : token_data;
};

ast_type ::= enum
{
	.unknown := 0;
	.unparsed_token := 2;
	.stmt_list := 3;
	.wipfn_blue := 4;
	.wipfn_red := 5;
	.wipfn_green := 6;
	.wipcall := 7;
	.wipstruct := 8;
	.wipregion := 9;
	.wipblk := 10;
	.wipbiop := 11;
	.wipif_blue := 12;
	.wipif_red := 13;
	.wipelse := 14;
	.stmt := 15;
	.expr := 16;
	.decl := 17;
	.structdef := 18;
	.region := 19;
	.fn := 20;
	.ifdef := 21;
	.elsedef := 22;
};

ast_fn ::= struct
{
	fn_name : u8&;
	fn_name_len : u64;
	ret_typename : u8&;
	ret_typename_len : u64;
	is_extern : bool;
};

ast_wipcall ::= struct
{
	funcname : u8&;
	funcname_len : u64;
};

ast_struct ::= struct
{
	structname : u8&;
	structname_len : u64;
};

ast_if ::= struct
{
	is_static : bool;
};

ast ::= struct
{
	type : ast_type;
	utok : ast_unparsed_token;
	stmt : ast_stmt;
	expr : ast_expr;
	decl : ast_decl;
	structdef : ast_struct;
	wipcall : ast_wipcall;
	region : ast_region_stmt;
	fn : ast_fn;
	ifdef : ast_if;
	loc : srcloc;
	cursor_begin : u64;
	cursor_end : u64;

	childcount : u64;
	childcap : u64;
	children : v0 mut&;
};

ast_get_child ::= func(a : ast mut&, cid : u64) -> ast mut&
{
	childrenptr ::= ((a->children)@ast mut&);
	return childrenptr at cid;
};

ast_add_child ::= func(a : ast mut&, child : ast, ar : arena mut&) -> u64
{
	if((a->children) == null)
	{
		(a->childcap) = 8;
		(a->children) = arena_push(ar, __sizeof(ast) * (a->childcap));
	}
	while((a->childcount) >= (a->childcap))
	{
		olddata ::= (a->children);
		oldcap ::= (a->childcap);

		(a->childcap) = ((a->childcap) * 2);
		(a->children) = arena_push(ar, __sizeof(ast) * (a->childcap));
		__memcpy(a->children, olddata, __sizeof(ast) * oldcap);
	}

	childrenptr ::= ((a->children)@ast mut&);
	deref(childrenptr at (a->childcount)) = child;
	childid ::= a->childcount;
	(a->childcount) = (a->childcount) + 1;
	return childid;
};

ast_emplace_child ::= func(a : ast mut&, child : ast, ar : arena mut&) -> ast mut&
{
	cid ::= ast_add_child(a, child, ar);
	return ast_get_child(a, cid);
};

ast_biop_get_lhs ::= func(a : ast) -> ast
{
	if((a.childcount) < 1)
	{
		return zero;
	}
	childrenptr ::= ((a.children)@ast mut&);
	return deref(childrenptr at 0);
};

ast_biop_get_rhs ::= func(a : ast) -> ast
{
	if((a.childcount) < 2)
	{
		return zero;
	}
	childrenptr ::= ((a.children)@ast mut&);
	return deref(childrenptr at 1);
};

ast_unop_get_operand ::= func(a : ast) -> ast
{
	return ast_biop_get_lhs(a);
};

ast_biop_set_lhs ::= func(a : ast mut&, lhs : ast, ar : arena mut&) -> v0
{
	childrenptr ::= ((a->children)@ast mut&);
	c ::= a->childcount;
	if(c >= 1)
	{
		deref(childrenptr at 0) = lhs;
	}
	if(c == 0)
	{
		ast_add_child(a, lhs, ar);
	}
};

ast_biop_set_rhs ::= func(a : ast mut&, rhs : ast, ar : arena mut&) -> v0
{
	childrenptr ::= ((a->children)@ast mut&);
	c ::= a->childcount;
	if(c >= 2)
	{
		deref(childrenptr at 1) = rhs;
	}
	if(c == 1)
	{
		ast_add_child(a, rhs, ar);
	}
	if(c == 0)
	{
		ast_add_child(a, zero, ar);
		ast_add_child(a, rhs, ar);
	}
};

ast_unop_set_operand ::= func(a : ast mut&, operand : ast, ar : arena mut&) -> v0
{
	ast_biop_set_lhs(a, operand, ar);
};

make_biop_expr ::= func(biop : ast_biop_expr) -> ast_expr
{
	return ast_expr
	{
		.type := ast_expr_type.biop;
		.biop := biop;
	};
};

make_unop_expr ::= func(unop : ast_unop_expr) -> ast_expr
{
	return ast_expr
	{
		.type := ast_expr_type.unop;
		.unop := unop;
	};
};

make_literal_expr ::= func(lit : ast_literal_expr) -> ast_expr
{
	return ast_expr
	{
		.type := ast_expr_type.literal;
		.literal := lit;
	};
};

make_symbol_expr ::= func(symbol : ast_symbol_expr) -> ast_expr
{
	return ast_expr
	{
		.type := ast_expr_type.symbol;
		.symbol := symbol;
	};
};

make_callfunc_expr ::= func(call : ast_callfunc_expr) -> ast_expr
{
	return ast_expr
	{
		.type := ast_expr_type.callfunc;
		.callfunc := call;
	};
};

make_unparsed_token_ast ::= func(tok : token_data) -> ast
{
	lexeme ::= tok.lexeme;
	return ast
	{
		.type := ast_type.unparsed_token;
		.utok := ast_unparsed_token
		{
			.tok := tok;
		};
		.loc := tok.begin;
		.cursor_begin := lexeme.off;
		.cursor_end := (lexeme.off) + (lexeme.len);
		.childcount := zero;
		.childcap := zero;
		.children := zero;
	};
};

ast_verbose_print ::= func(a : ast&, tabcount : u64) -> v0
{
	i : u64 mut;
	for(i = 0, i < tabcount, i = i + 1)
	{
		putchar(9);
	}
	if((a->type) != (ast_type.unparsed_token))
	{
		puts(__enumname(a->type));
	}
	if((a->type) == (ast_type.unparsed_token))
	{
		utok ::= a->utok;
		tokdata ::= utok.tok;
		puts("token.");
		puts(__enumname(tokdata.tok));
	}
	if((a->type) == (ast_type.expr))
	{
		puts("(");
		expr ::= a->expr;
		puts(__enumname(expr.type));
		puts(")");
	}
	if((a->type) == (ast_type.stmt))
	{
		puts("(");
		stmt ::= a->stmt;
		puts(__enumname(stmt));
		puts(")");
	}
	putchar(' ');
	print_srcloc(a->loc);
	putchar(10);

	childrenptr ::= ((a->children)@ast mut&);

	for(i = 0, i < (a->childcount), i = i + 1)
	{
		ast_verbose_print(childrenptr at i, tabcount + 1);
	}
};

interpret_numeric_literal ::= func(src : u8&, lexeme : lex_slice) -> ast_literal_expr
{
	src_begin : u8& mut := src at (lexeme.off);
	begin_cpy ::= src_begin;
	i : u64 mut := 0;

	sign : s64 mut := 1;
	if(deref(src_begin) == '-')
	{
		sign = -1;
		src_begin = src_begin at 1;
		i = i + 1;
	}

	base : s64 mut := 10;
	if(deref(src_begin) == '0')
	{
		src_begin = src_begin at 1;
		ch ::= deref(src_begin);
		if(ch == 'x')
		{
			base = 16;
			src_begin = src_begin at 1;
			i = i + 1;
		}
		if(ch == 'b')
		{
			base = 2;
			src_begin = src_begin at 1;
			i = i + 1;
		}
	}

	ival : s64 mut := 0;
	fval : f64 mut := 0;

	digit_val : s64 mut := 0;
	frac_div : f64 mut := 0.0;

	is_integral : bool mut := true;
	while(i < (lexeme.len))
	{
		ch ::= deref(begin_cpy at i);
		if(ch == '.')
		{
			is_integral = false;
		}
		if(impl_is_digit(ch))
		{
			digit_val = ch - '0';
		}
		if(ch >= 'a')
		{
			if(ch <= 'f')
			{
				digit_val = 10 + (ch - 'a');
			}
		}

		if(digit_val >= base)
		{
			psyc_panic(srcloc_current(), "waaah it all went wrong");
		}

		if(is_integral)
		{
			ival = ((ival * base) + digit_val);
		}
		if(!is_integral)
		{
			frac_div = frac_div / (base@f64);
			fval = fval + ((digit_val@f64) * frac_div);
		}

		i = i + 1;
	}

	ret : ast_literal_expr mut;
	if(is_integral)
	{
		ival = ival * sign;
		ret.type = (ast_literal_type.integral);
		ret.integral = ival;
	}
	if(!is_integral)
	{
		fval = fval + (ival@f64) * (sign@f64);
		ret.type = (ast_literal_type.floating_point);
		ret.floating_point = fval;
	}

	return ret;
};

ast_child_find_if ::= func(node : ast&, predicate : func(n : ast&) -> bool) -> u64
{
	// iterate over all children
	ccount ::= node->childcount;
	i : u64 mut;
	for(i = 0, i < ccount, i = i + 1)
	{
		if(predicate(ast_get_child(node@_, i)))
		{
			return i;
		}
	}
	return -1@_;
};

ast_unop_type_from_token ::= func(t : lex_token) -> ast_unop_type
{
	if(t == (lex_token.dash))
	{
		return ast_unop_type.minus;
	}
	if(t == (lex_token.keyword_ref))
	{
		return ast_unop_type.op_ref;
	}
	if(t == (lex_token.keyword_deref))
	{
		return ast_unop_type.op_deref;
	}
	return -1@ast_unop_type;	
};

ast_biop_type_from_token ::= func(t : lex_token) -> ast_biop_type
{
	if(t == (lex_token.assign))
	{
		return ast_biop_type.assign;
	}
	if(t == (lex_token.plus))
	{
		return ast_biop_type.plus;
	}
	if(t == (lex_token.dash))
	{
		return ast_biop_type.minus;
	}
	if(t == (lex_token.asterisk))
	{
		return ast_biop_type.multiply;
	}
	if(t == (lex_token.fslash))
	{
		return ast_biop_type.divide;
	}
	if(t == (lex_token.bitwise_or))
	{
		return ast_biop_type.bitwise_or;
	}
	if(t == (lex_token.logical_or))
	{
		return ast_biop_type.logical_or;
	}
	if(t == (lex_token.bitwise_and))
	{
		return ast_biop_type.bitwise_and;
	}
	if(t == (lex_token.logical_and))
	{
		return ast_biop_type.logical_and;
	}
	if(t == (lex_token.keyword_at))
	{
		return ast_biop_type.operator_at;
	}
	if(t == (lex_token.cast))
	{
		return ast_biop_type.cast;
	}
	return -1@ast_biop_type;	
};

== build ==
{
	add_source_file("stdlib/io.psy");

	add_source_file("lex.psy");
}
