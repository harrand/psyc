psyc_deduced_typename ::= "auto";
psyc_function_placeholder_typename ::= "___fn";

// global arena used by the type system.
tyar : arena mut& mut;

// tell me which arena im using on startup
type_setup ::= func(a : arena mut&) -> v0
{
	tyar = a;
};

tyqual ::= enum
{
	.static := 1;
	.mut := 2;
	.weak := 4;
};

primty ::= enum
{
	.s64 := 1;
	.s32 := 2;
	.s16 := 3;
	.s8 := 4;

	.u64 := 5;
	.u32 := 6;
	.u16 := 7;
	.u8 := 8;

	.bool := 9;
	.f64 := 10;
	.f32 := 11;

	.v0 := 12;
};

ptrty ::= struct
{
	underlying : v0&;
};

arrty ::= struct
{
	underlying : v0&;
	len : u64;
};

structty ::= struct
{
	member_count : u64;
	member_types : v0 mut&;
	member_names : u8& mut&;
	member_name_lens : u64 mut&;
	name : u8&;
	name_len : u64;
};

enumty ::= struct
{
	entry_count : u64;
	entry_values : u64 mut&;
	entry_names : u8& mut&;
	entry_name_lens : u64 mut&;
	name : u8&;
	name_len : u64;
};

fnty ::= struct
{
	return_type : v0&;
	param_count : u64;
	param_types : v0 mut&;
};

tytag ::= enum
{
	.prim := 1;
	.ptr := 2;
	.arr := 3;
	.strct := 4;
	.enm := 5;
	.fn := 6;
};

ty ::= struct
{
	tag : tytag;
	qual : tyqual;

	prim : primty;
	ptr : ptrty;
	arr : arrty;
	strct : structty;
	enm : enumty;
	fn : fnty;
};

ty_isbad ::= func(t : ty) -> bool
{
	return (t.tag) == zero;
};

putqual ::= func(q : tyqual) -> v0
{
	if(q == zero)
	{
		return;
	}
	if(q & (tyqual.static))
	{
		putchar(' ');
		puts(__enumname(tyqual.static));
	}
	if(q & (tyqual.weak))
	{
		putchar(' ');
		puts(__enumname(tyqual.weak));
	}
	if(q & (tyqual.mut))
	{
		putchar(' ');
		puts(__enumname(tyqual.mut));
	}
};

putprim ::= func(t : primty) -> v0
{
	puts(__enumname(t));
};

putty ::= func(t : ty) -> v0
{
	if(ty_isbad(t))
	{
		puts("badtype");
	}
	tag ::= t.tag;
	if(tag == (tytag.prim))
	{
		putprim(t.prim);
	}
	if(tag == (tytag.ptr))
	{
		ptr ::= t.ptr;
		underlying ::= (ptr.underlying)@ty&;
		putty(deref underlying);
		putchar('&');
	}
	if(tag == (tytag.arr))
	{
		arr ::= t.arr;
		underlying ::= (arr.underlying)@ty&;
		putty(deref underlying);
		putchar('[');
		putuint(arr.len);
		putchar(']');
	}
	if(tag == (tytag.strct))
	{
		str ::= t.strct;
		putss(str.name, str.name_len);
	}
	if(tag == (tytag.enm))
	{
		en ::= t.enm;
		putss(en.name, en.name_len);
	}
	if(tag == (tytag.fn))
	{
		puts("func(");
		fn ::= t.fn;
		i : u64 mut;
		ptr ::= (fn.param_types)@ty&;
		for(i = 0, i < (fn.param_count), i = i + 1)
		{
			putty(deref(ptr at i));
			if(i != ((fn.param_count) - 1))
			{
				puts(", ");
			}
		}
		puts(") -> ");
		retty ::= (fn.return_type)@ty&;
		putty(deref retty);
	}
	putqual(t.qual);
};

// make a pointer to an existing type
ty_ref ::= func(t : ty, q : tyqual) -> ty
{
	underlying_data ::= arena_push(tyar, __sizeof(ty));
	__memcpy(underlying_data, ref t, __sizeof(ty));
	return ty
	{
		.tag := tytag.ptr;
		.qual := q;
		.ptr := ptrty
		{
			.underlying := underlying_data;
		};
	};
};

// deref a pointer. must be a pointer type
ty_deref ::= func(t : ty) -> ty
{
	ptr ::= t.ptr;
	u ::= (ptr.underlying)@ty&;
	return deref u;
};

ty_arr ::= func(t : ty, len : u64, q : tyqual) -> ty
{
	underlying_data ::= arena_push(tyar, __sizeof(ty));
	__memcpy(underlying_data, ref t, __sizeof(ty));
	return ty
	{
		.tag := tytag.arr;
		.qual := q;
		.arr := arrty
		{
			.underlying := underlying_data;
			.len := len;
		};
	};
};

// get the underlying type. must be a pointer or array type
ty_underlying ::= func(t : ty) -> ty
{
	tag ::= t.tag;
	if(tag == (tytag.ptr))
	{
		ptr ::= t.ptr;
		return deref((ptr.underlying)@ty&);
	}
	if(tag == (tytag.arr))
	{
		arr ::= t.arr;
		return deref((arr.underlying)@ty&);
	}
	psyc_panic(srcloc_current(), "failed get underlying type, you probably called ty_underlying on a type that doesnt have one");
	return zero;
};

// retrieve a primitive type that matches specifications. zero = no quals
ty_getprim ::= func(p : primty, q : tyqual) -> ty
{
	return ty
	{
		.tag := tytag.prim;
		.qual := q;
		.prim := p;
	};
};

// retrieve an array type t#len. zero = no quals
ty_getarr ::= func(t : ty, len : u64, q : tyqual) -> ty
{
	underlying_data ::= arena_push(tyar, __sizeof(ty));
	__memcpy(underlying_data, ref t, __sizeof(ty));
	return ty
	{
		.tag := tytag.arr;
		.qual := q;
		.arr := arrty
		{
			.underlying := underlying_data;
			.len := len;
		};
	};
};

ty_getfn ::= func(retty : ty, param_count : u64, q : tyqual) -> ty
{
	retty_alloc : ty mut& := arena_push(tyar, __sizeof(ty));
	deref(retty_alloc) = retty;
	params_alloc : ty mut& := arena_push(tyar, __sizeof(ty) * param_count);
	// note: this zero'ing out is not strictly necessary. todo: debug only?
	i : u64 mut;
	for(i = 0, i < param_count, i = i + 1)
	{
		deref(params_alloc at i) = zero@ty;
	}
	return ty
	{
		.tag := tytag.fn;
		.qual := q;
		.fn := fnty
		{
			.return_type := retty_alloc@_;
			.param_count := param_count;
			.param_types := params_alloc@_;
		};
	};
};

ty_fn_set_param ::= func(t : ty mut&, param_idx : u64, param_ty : ty) -> v0
{
	fn ::= ref(t->fn);
	ptr ::= (fn->param_types)@ty mut&;
	deref(ptr at param_idx) = param_ty;
};

ty_noquals ::= func(t : ty) -> bool
{
	return (t.qual) == zero;
};

// query as to whether a type has a given qualifier.
ty_hasqual ::= func(t : ty, q : tyqual) -> bool
{
	return ((t.qual) & q) != 0;
};

ty_is ::= func(t : ty, tag : tytag) -> bool
{
	return (t.tag) == tag;
};

ty_is_boolean ::= func(t : ty) -> bool
{
	if(!ty_is(t, tytag.prim))
	{
		return false;
	}
	prim ::= t.prim;
	return prim == (primty.bool);
};

ty_is_floating_point ::= func(t : ty) -> bool
{
	if(!ty_is(t, tytag.prim))
	{
		return false;
	}
	prim ::= t.prim;
	if(prim == (primty.f64))
	{
		return true;
	}
	if(prim == (primty.f32))
	{
		return true;
	}
	return false;
};

ty_is_v0 ::= func(t : ty) -> bool
{
	if(!ty_is(t, tytag.prim))
	{
		return false;
	}
	prim ::= t.prim;
	return prim == (primty.v0);
};

ty_is_integral ::= func(t : ty) -> bool
{
	if(!ty_is(t, tytag.prim))
	{
		return false;
	}
	if(ty_is_boolean(t))
	{
		return false;
	}
	if(ty_is_floating_point(t))
	{
		return false;
	}
	if(ty_is_v0(t))
	{
		return false;
	}
	return true;
};

ty_is_signed_integral ::= func(t : ty) -> bool
{
	p ::= t.prim;
	if(p == (primty.s64))
	{
		return true;
	}
	if(p == (primty.s32))
	{
		return true;
	}
	if(p == (primty.s16))
	{
		return true;
	}
	if(p == (primty.s8))
	{
		return true;
	}
	return false;
};

ty_integral_size ::= func(t : ty) -> u64
{
	p ::= t.prim;
	if(p == (primty.s64))
	{
		return 64;
	}
	if(p == (primty.u64))
	{
		return 64;
	}

	if(p == (primty.s32))
	{
		return 32;
	}
	if(p == (primty.u32))
	{
		return 32;
	}

	if(p == (primty.s16))
	{
		return 16;
	}
	if(p == (primty.u16))
	{
		return 16;
	}

	if(p == (primty.s8))
	{
		return 8;
	}
	if(p == (primty.u8))
	{
		return 8;
	}

	return 0;
};

ty_floating_point_size ::= func(t : ty) -> u64
{
	p ::= t.prim;
	if(p == (primty.f64))
	{
		return 64;
	}
	if(p == (primty.f32))
	{
		return 32;
	}
	return 0;
};

tyconv ::= enum
{
	.cant := 0; // conversion cannot be done
	.could_if_weak := 1;
	.i2i := 2; // integral to integral
	.i2f := 3; // integral to floating point
	.i2p := 4; // integral to pointer (u64 only)
	.i2e := 5; // integral to enum
	.i2b := 6; // integral to bool
	.e2i := 7; // enum to integral
	.p2i := 8; // pointer to integral
	.p2fn := 9; // pointer to function
	.p2p := 10; // pointer to pointer
	.fn2p := 11; // function to pointer
	.f2i := 12; // floating point to integral
	.f2f := 13; // floating point to floating point
	.b2i := 14; // bool to integral
	.same := 15; // conversion is unnecessary as the types are the same
};

ty_get_conv ::= func(lhs : ty, rhs : ty) -> tyconv
{
	lhs_weak ::= ty_hasqual(lhs, tyqual.weak);
	rhs_weak ::= ty_hasqual(rhs, tyqual.weak);
	either_is_weak : bool mut := lhs_weak;
	if(rhs_weak)
	{
		either_is_weak = true;
	}
	if(ty_is(lhs, tytag.prim))
	{
		if(ty_is(rhs, tytag.prim))
		{
			if((lhs.prim) == (rhs.prim))
			{
				return tyconv.same;
			}
		}
	}
	// struct doesnt convert to anything
	// unless the names match
	if(ty_is(lhs, tytag.strct))
	{
		if(ty_is(rhs, tytag.strct))
		{
			lhs_struct ::= lhs.strct;
			rhs_struct ::= rhs.strct;
			if((lhs_struct.name_len) == (rhs_struct.name_len))
			{
				if(cstreql_n(lhs_struct.name, rhs_struct.name, lhs_struct.name_len))
				{
					// they are the same struct
					return tyconv.same;
				}
			}
		}
		// structs dont convert to anything at all. only the very same struct can tyconv.same.
		return tyconv.cant;
	}
	if(ty_is(lhs, tytag.ptr))
	{
		// pointers can: p2i (integral), p2fn (function), p2p (other pointer)
		if(ty_is_integral(rhs))
		{
			if(either_is_weak)
			{
				return tyconv.p2i;
			}
			return tyconv.could_if_weak;
		}
		if(ty_is(rhs, tytag.fn))
		{
			if(either_is_weak)
			{
				return tyconv.p2fn;
			}
			return tyconv.could_if_weak;
		}
		if(ty_is(rhs, tytag.ptr))
		{
			// what if theyre the exact same pointer? ugh.
			lhs_ptr ::= lhs.ptr;
			rhs_ptr ::= rhs.ptr;
			lhs_u ::= deref (lhs_ptr.underlying@ty&);
			rhs_u ::= deref (rhs_ptr.underlying@ty&);
			if(ty_get_conv(lhs_u, rhs_u) == (tyconv.same))
			{
				// they point to the same thing.
				return tyconv.same;
			}
			if(either_is_weak)
			{
				return tyconv.p2p;
			}
			return tyconv.could_if_weak;
		}
		return tyconv.cant;
	}
	if(ty_is(lhs, tytag.enm))
	{
		if(ty_is_integral(rhs))
		{
			rhsprim ::= rhs.prim;
			if(rhsprim == (primty.s64))
			{
				return tyconv.e2i;
			}
			return tyconv.could_if_weak;
		}
		if(ty_is(rhs, tytag.enm))
		{
			lhs_enum ::= lhs.enm;
			rhs_enum ::= rhs.enm;
			if((lhs_enum.name_len) == (rhs_enum.name_len))
			{
				if(cstreql_n(lhs_enum.name, rhs_enum.name, lhs_enum.name_len))
				{
					return tyconv.same;
				}
			}
		}
		return tyconv.cant;
	}
	if(ty_is(lhs, tytag.fn))
	{
		if(ty_is(rhs, tytag.ptr))
		{
			if(either_is_weak)
			{
				return tyconv.fn2p;
			}
			return tyconv.could_if_weak;
		}
		if(ty_is(rhs, tytag.fn))
		{
			// todo: should we allow unrelated function types to be explicitly convertible? maybe. right now i dont.
			// true iff they're the same exact signature
			lhs_fn ::= lhs.fn;
			rhs_fn ::= rhs.fn;
			lhs_ret ::= deref((lhs_fn.return_type)@ty&);
			rhs_ret ::= deref((rhs_fn.return_type)@ty&);
			if(ty_get_conv(lhs_ret, rhs_ret) != (tyconv.same))
			{
				return tyconv.cant;
			}
			// return type matches.
			if((lhs_fn.param_count) == (rhs_fn.param_count))
			{
				i : u64 mut;
				lhs_params ::= (lhs_fn.param_types)@ty&;
				rhs_params ::= (rhs_fn.param_types)@ty&;
				for(i = 0, i < (lhs_fn.param_count), i = i + 1)
				{
					lhs_param ::= deref(lhs_params at i);
					rhs_param ::= deref(rhs_params at i);
					if(ty_get_conv(lhs_param, rhs_param) != (tyconv.same))
					{
						return tyconv.cant;
					}
				}
			}
			return tyconv.same;
		}
	}
	if(ty_is(lhs, tytag.arr))
	{
		if(ty_is(rhs, tytag.arr))
		{
			// if the underlying types are exactly the same, then yes
			lhsarr ::= lhs.arr;
			rhsarr ::= rhs.arr;
			lhslen ::= lhsarr.len;
			rhslen ::= rhsarr.len;
			if(lhslen != rhslen)
			{
				return tyconv.cant;
			}
			lhs_u : ty mut := deref((lhsarr.underlying)@ty&);
			(lhs_u.qual) = zero;
			rhs_u : ty mut := deref((rhsarr.underlying)@ty&);
			(rhs_u.qual) = zero;
			// this is subtle.
			// i dont care if the underlyings are convertible, i want *exactly* the same
			// so we force-remove all quals and then return if theyre convertible
			return ty_get_conv(lhs_u, rhs_u);
		}
	}
	if(ty_is_integral(lhs))
	{
		if(ty_is_integral(rhs))
		{
			if(either_is_weak)
			{
				return tyconv.i2i;
			}
			return tyconv.could_if_weak;
		}
		if(ty_is_floating_point(rhs))
		{
			if(either_is_weak)
			{
				return tyconv.i2f;
			}
			return tyconv.could_if_weak;
		}
		if(ty_is(rhs, tytag.ptr))
		{
			if((lhs.prim) == (primty.u64))
			{
				if(either_is_weak)
				{
					return tyconv.i2p;
				}
				return tyconv.could_if_weak;
			}
			return tyconv.cant;
		}
		if(ty_is(rhs, tytag.enm))
		{
			if(either_is_weak)
			{
				return tyconv.i2e;
			}
			return tyconv.could_if_weak;
		}
		if(ty_is_boolean(rhs))
		{
			if(either_is_weak)
			{
				return tyconv.i2b;
			}
			return tyconv.could_if_weak;
		}
	}

	if(ty_is_floating_point(lhs))
	{
		if(ty_is_floating_point(rhs))
		{
			if(either_is_weak)
			{
				return tyconv.f2f;
			}
			return tyconv.could_if_weak;
		}
		if(ty_is_integral(rhs))
		{
			if(either_is_weak)
			{
				return tyconv.f2i;
			}
			return tyconv.could_if_weak;
		}
	}
	
	if(ty_is_boolean(lhs))
	{
		if(ty_is_integral(rhs))
		{
			if(either_is_weak)
			{
				return tyconv.b2i;
			}
			return tyconv.could_if_weak;
		}
	}

	if(ty_is(lhs, tytag.arr))
	{
		if(ty_is(rhs, tytag.arr))
		{
			// convertible iff they're the exact same array
			lhs_arr ::= lhs.arr;
			rhs_arr ::= rhs.arr;
			lhs_underlying ::= deref((lhs_arr.underlying)@ty&);
			rhs_underlying ::= deref((rhs_arr.underlying)@ty&);
			if(ty_get_conv(lhs_underlying, rhs_underlying) != (tyconv.same))
			{
				if((lhs_arr.len) == (rhs_arr.len))
				{
					return tyconv.same;
				}
			}
		}
	}
	return tyconv.cant;
};

tybox_struct_info ::= struct
{
	ty : structty;
	defined_at : srcloc;
};

tybox_enum_info ::= struct
{
	ty : enumty;
	defined_at : srcloc;
};

// box of types. used to store all types defined in a given lexical scope
tybox ::= struct
{
	structs : tybox_struct_info mut&;
	structs_size : u64;
	structs_cap : u64;

	enums : tybox_enum_info mut&;
	enums_size : u64;
	enums_cap : u64;
};

// create an empty tybox with some sensible preallocation of resources.
tybox_empty ::= func() -> tybox
{
	ret : tybox mut := zero;
	(ret.structs_cap) = 8;
	structs_bytes ::= __sizeof(deref (ret.structs)) * (ret.structs_cap);
	(ret.structs) = arena_push(tyar, structs_bytes);
	__memset(ret.structs, 0, structs_bytes);

	(ret.enums_cap) = 8;
	enums_bytes ::= __sizeof(deref (ret.enums)) * (ret.enums_cap);
	(ret.enums) = arena_push(tyar, enums_bytes);
	__memset(ret.enums, 0, enums_bytes);
	return ret;
};

// tell me if a struct already exists in this box with the same name.
// returns the index of the struct in the array, or -1 if it couldnt find one.
tybox_find_struct ::= func(box : tybox&, structname : u8&, structname_len : u64) -> u64
{
	n ::= box->structs_size;
	i : u64 mut;
	ptr ::= box->structs;
	for(i = 0, i < n, i = i + 1)
	{
		curinfo ::= deref(ptr at i);
		cur ::= curinfo.ty;
		if((cur.name_len) == (structname_len))
		{
			if(cstreql_n(cur.name, structname, cur.name_len))
			{
				return i;
			}
		}
	}
	return -1;
};

[[private]]
impl_tybox_increase_struct_capacity ::= func(box : tybox mut&) -> v0
{
	oldcap ::= box->structs_cap;
	olddata ::= box->structs;
	(box->structs_cap) = (box->structs_cap) * 2;
	(box->structs) = arena_push(tyar, __sizeof(deref olddata) * (box->structs_cap));
	__memcpy(box->structs, olddata, oldcap);
};

// this will not even try to see if a struct by that name already exists
// dont add that functionality here - its complex, tangles with error messages and has a cost to it
// let it be implemented deeper in semal and handle errors properly there
tybox_add_struct ::= func(box : tybox mut&, s : structty, loc : srcloc) -> v0
{
	if((box->structs_cap) == 0)
	{
		(box->structs_cap) = 8;
		(box->structs) = arena_push(tyar, __sizeof(deref (box->structs)) * (box->structs_cap));
	}
	if((box->structs_size) >= (box->structs_cap))
	{
		impl_tybox_increase_struct_capacity(box);
	}
	id ::= (box->structs_size);
	(box->structs_size) = (box->structs_size) + 1;
	ptr ::= box->structs;
	deref(ptr at id) = tybox_struct_info
	{
		.ty := s;
		.defined_at := loc;
	};
};

// get the struct info at a given index.
// no bounds checking.
tybox_get_struct ::= func(box : tybox mut&, id : u64) -> tybox_struct_info&
{
	ptr ::= box->structs;
	return ptr at id;
};

// tell me if a enum already exists in this box with the same name.
// returns the index of the enum in the array, or -1 if it couldnt find one.
tybox_find_enum ::= func(box : tybox&, enumname : u8&, enumname_len : u64) -> u64
{
	n ::= box->enums_size;
	i : u64 mut;
	ptr ::= box->enums;
	for(i = 0, i < n, i = i + 1)
	{
		curinfo ::= deref(ptr at i);
		cur ::= curinfo.ty;
		if((cur.name_len) == (enumname_len))
		{
			if(cstreql_n(cur.name, enumname, cur.name_len))
			{
				return i;
			}
		}
	}
	return -1;
};

[[private]]
impl_tybox_increase_enum_capacity ::= func(box : tybox mut&) -> v0
{
	oldcap ::= box->enums_cap;
	olddata ::= box->enums;
	(box->enums_cap) = (box->enums_cap) * 2;
	(box->enums) = arena_push(tyar, __sizeof(deref olddata) * (box->enums_cap));
	__memcpy(box->enums, olddata, oldcap);
};

// this will not even try to see if a enum by that name already exists
// dont add that functionality here - its complex, tangles with error messages and has a cost to it
// let it be implemented deeper in semal and handle errors properly there
tybox_add_enum ::= func(box : tybox mut&, s : enumty, loc : srcloc) -> v0
{
	if((box->enums_cap) == 0)
	{
		(box->enums_cap) = 8;
		(box->enums) = arena_push(tyar, __sizeof(deref (box->enums)) * (box->enums_cap));
	}
	if((box->enums_size) >= (box->enums_cap))
	{
		impl_tybox_increase_enum_capacity(box);
	}
	id ::= (box->enums_size);
	(box->enums_size) = (box->enums_size) + 1;
	ptr ::= box->enums;
	deref(ptr at id) = tybox_enum_info
	{
		.ty := s;
		.defined_at := loc;
	};
};

// get the enum info at a given index.
// no bounds checking.
tybox_get_enum ::= func(box : tybox mut&, id : u64) -> tybox_enum_info&
{
	ptr ::= box->enums;
	return ptr at id;
};

== build ==
{
	add_source_file("stdlib/io.psy");
}
