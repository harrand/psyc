psyc_deduced_typename ::= "auto";

tyar : arena mut& mut;

type_setup ::= func(a : arena mut&) -> v0
{
	tyar = a;
};

tyqual ::= enum
{
	.none := 0;
	.static := 1;
	.mut := 2;
	.weak := 4;
};

primty ::= enum
{
	.unknown := 0;
	.s64 := 1;
	.s32 := 2;
	.s16 := 3;
	.s8 := 4;

	.u64 := 5;
	.u32 := 6;
	.u16 := 7;
	.u8 := 8;

	.bool := 9;
	.f64 := 10;
	.f32 := 11;

	.v0 := 12;
};

ptrty ::= struct
{
	underlying : v0&;
};

arrty ::= struct
{
	underlying : v0&;
	len : u64;
};

structty ::= struct
{
	member_count : u64;
	member_types : v0&&;
	member_names : u8&&;
	name : u8&;
	name_len : u64;
};

enumty ::= struct
{
	entry_count : u64;
	entry_values : u64&;
	entry_names : u8&&;
	name : u8&;
	name_len : u64;
};

fnty ::= struct
{
	return_type : v0&;
	param_count : u64;
	param_types : v0&&;
};

tytag ::= enum
{
	.prim := 0;
	.ptr := 1;
	.arr := 2;
	.strct := 3;
	.enm := 4;
	.fn := 5;
	.badtype := 6;
};

ty ::= struct
{
	tag : tytag;
	qual : tyqual;

	prim : primty;
	ptr : ptrty;
	arr : arrty;
	strct : structty;
	enm : enumty;
	fn : fnty;
};

ty_badtype ::= func() -> ty
{
	return ty
	{
		.tag := tytag.badtype;
	};
};

putqual ::= func(q : tyqual) -> v0
{
	if(q == (tyqual.none))
	{
		return;
	}
	if(q & (tyqual.static))
	{
		putchar(' ');
		puts(__enumname(tyqual.static));
	}
	if(q & (tyqual.weak))
	{
		putchar(' ');
		puts(__enumname(tyqual.weak));
	}
	if(q & (tyqual.mut))
	{
		putchar(' ');
		puts(__enumname(tyqual.mut));
	}
};

putprim ::= func(t : primty) -> v0
{
	puts(__enumname(t));
};

putty ::= func(t : ty&) -> v0
{
	tag ::= t->tag;
	if(tag == (tytag.prim))
	{
		putprim(t->prim);
	}
	if(tag == (tytag.ptr))
	{
		ptr ::= t->ptr;
		underlying ::= (ptr.underlying)@ty&;
		putty(underlying);
		putchar('&');
	}
	if(tag == (tytag.badtype))
	{
		puts("<badtype>");
	}
	putqual(t->qual);
};

// make a pointer to an existing type:w
ty_ref ::= func(t : ty) -> ty
{
	underlying_data ::= arena_push(tyar, __sizeof(ty));
	__memcpy(underlying_data, ref t, __sizeof(ty));
	return ty
	{
		.tag := tytag.ptr;
		.ptr := ptrty
		{
			.underlying := underlying_data;
		};
	};
};

== build ==
{
	add_source_file("stdlib/io.psy");
}
