setup_arenas ::= macro() -> v0
{
	permanent_arena_val : arena mut := arena_create(4096 * 1024);
	permanent_arena ::= ref permanent_arena_val;
	defer puts("arena free: ");
	defer putuint(permanent_arena_val.cursor);
	defer puts("B");
	defer putchar(10);
	defer arena_destroy(permanent_arena_val);

	frame_arena_val : arena mut := arena_create(4096 * 1024);
	frame_arena ::= ref frame_arena_val;
	defer arena_destroy(frame_arena_val);
};

// read a file path. allocates for the whole file data. returns null if file didnt exist.
fully_read_file ::= func(path : u8&, a : arena mut&) -> u8 mut&
{
	if(!file_exists(path))
	{
		psyc_error_begin(zero);
		puts("file ");
		putchar('"');
		puts(path);
		putchar('"');
		puts(" could not be located");
		psyc_diag_end();
		psyc_exit_failure();
	}
	len ::= file_size_bytes(path);
	if(len == 0)
	{
		return null;
	}
	data : u8 mut& := arena_push(a, len + 1);
	file_read(path, data, len);
	deref(data at len) = 0;
	return data;
};

precompile_build_file ::= func(prog : program mut&, path : u8&, a : arena mut&) -> v0
{
	source ::= fully_read_file(path, a);
	args ::= ref(prog->compile_args);
	l ::= lex(path, source, a, args->verbose_lex);
	p ::= parse(ref l, args->verbose_parse);
	file_scope ::= progwalk_file(prog, ref(p.root));

	region ::= scope_find_region(file_scope, args->build_config, cstrlen(args->build_config));
	interpret_build_region(prog, region);
};

add_source_file ::= func(progptr : v0& weak, path : u8&, len : u64, a : arena mut&) -> v0
{
	prog ::= progptr@program mut&;
	args ::= ref(prog->compile_args);
	// unfortunately file will need the path as a null terminated string.
	// alloc time
	pathstr : u8 mut& := arena_push(a, len + 1);
	__memcpy(pathstr, path, len);
	deref(pathstr at (len)) = 0;

	source ::= fully_read_file(pathstr, a);
	l ::= lex(pathstr, source, a, args->verbose_lex);
	p ::= parse(ref l, args->verbose_parse);
	progwalk_file(prog, ref(p.root));
};

compile_program ::= func(prog : program mut&, a : arena mut&) -> v0
{
	args ::= ref(prog->compile_args);
	precompile_build_file(prog, args->build_file, a);
	semal(prog);
	codegen(prog);
};

main ::= func() -> s32
{
	setup_arenas();

	lex_setup();
	grammar_setup(permanent_arena);
	type_setup(permanent_arena);
	progwalk_setup(permanent_arena);
	build_setup(permanent_arena);
	semal_setup(permanent_arena);

	prog : program mut := zero;
	(prog.on_add_source_file) = add_source_file;
	args ::= ref(prog.compile_args);
	deref(args) = psyc_parse_args(permanent_arena);
	if(args->verbose_parse)
	{
		puts("grammar size: ");
		putuint(grammar_install_count);
		putchar(10);
	}
	defer psyc_report_timings();

	if(!file_exists(args->build_file))
	{
		psyc_error_begin(zero);
		puts("build file ");
		putchar('"');
		puts(args->build_file);
		putchar('"');
		puts(" could not be located");
		psyc_diag_end();
		psyc_exit_failure();
	}
	compile_program(ref prog, permanent_arena);
	return 0;
};

== build ==
{
	add_source_file("args.psy");
	add_source_file("stdlib/file.psy");
	add_source_file("diag.psy");

	add_source_file("stdlib/hash.psy");
	add_source_file("grammar.psy");

	add_source_file("ast.psy");
	add_source_file("parse.psy");

	add_source_file("program.psy");
	add_source_file("progwalk.psy");
	add_source_file("build.psy");

	add_source_file("semal.psy");
	add_source_file("codegen.psy");

	set_output_directory("build");
	set_executable("psyc");

	add_link_library("Kernel32.lib");
	add_link_library("Shell32.lib");
	add_link_library("libcmt.lib");
}
