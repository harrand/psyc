setup_arenas ::= macro() -> v0
{
	permanent_arena_val : arena mut := arena_create(4096 * 1024);
	permanent_arena ::= ref permanent_arena_val;
	defer puts("arena free: ");
	defer putuint(permanent_arena_val.cursor);
	defer puts("B");
	defer putchar(10);
	defer arena_destroy(permanent_arena_val);

	frame_arena_val : arena mut := arena_create(4096 * 1024);
	frame_arena ::= ref frame_arena_val;
	defer arena_destroy(frame_arena_val);
};

// read a file path. allocates for the whole file data. returns null if file didnt exist.
fully_read_file ::= func(path : u8&, a : arena mut&) -> u8 mut&
{
	len ::= file_size_bytes(path);
	if(len == 0)
	{
		return null;
	}
	data : u8 mut& := arena_push(a, len);
	file_read(path, data, len);
	return data;
};

main ::= func() -> s32
{
	setup_arenas();
	args ::= psyc_parse_args(permanent_arena);
	defer psyc_report_timings();

	if(args.build_file == null)
	{
		psyc_fatal_error(zero, "no build file!");
	}
	if(!file_exists(args.build_file))
	{
		psyc_fatal_error(zero, "build file does not exist.");
	}
	psyc_message(zero, args.build_file);
	buildfile_data ::= fully_read_file(args.build_file, permanent_arena);

	puts(buildfile_data);

	lex();

	return 0;
};

== build ==
{
	add_source_file("args.psy");
	add_source_file("file.psy");
	add_source_file("diag.psy");

	add_source_file("lex.psy");

	set_output_directory("build");
	set_executable("psyc");

	add_link_library("Kernel32.lib");
	add_link_library("Shell32.lib");
}
