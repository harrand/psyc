cgvtag ::= enum
{
	.misc := 1;
	.var := 2;
	.valzero := 3;
};

cgv ::= struct
{
	tag : cgvtag;
	ll : u64;
	type : ty;
};

cgv_is_zero ::= func(v : cgv -> bool)
{
	return (v.tag) == (cgvtag.valzero);
};

cgv_conv_fn ::= struct
{
	fn : func(v : cgv, to : ty, loc : srcloc -> cgv);
};
cgv_conv_table : cgv_conv_fn mut[16] mut;

cgv_zero_as ::= func(type : ty -> cgv)
{
	ret : cgv mut := cgv
	{
		.tag := cgvtag.misc;
		.type := type;
	};
	if((type.tag) == (tytag.ptr))
	{
		ptr ::= type.ptr;
		underlying ::= deref((ptr.underlying)@ty?);
		cg_u ::= cg_type(underlying);
		(ret.ll) = LLVMConstPointerNull(LLVMPointerType(cg_u, 0));
		return ret;
	}
	cg_t ::= cg_type(type);
	(ret.ll) = LLVMConstNull(cg_t);
	return ret;
};

cgv_convert ::= func(v : cgv, to : ty, loc : srcloc, typecheck_only : bool -> cgv)
{
	if(typecheck_only)
	{
		return cgv
		{
			.tag := v.tag;
			.ll := 0;
			.type := to;
		};
	}
	if(cgv_is_zero(v))
	{
		return cgv_zero_as(to);
	}
	from ::= v.type;
	conv ::= ty_get_conv(from, to);

	do_conv ::= deref(cgv_conv_table # (conv@s64));
	ret : cgv mut := do_conv.fn(v, to, loc);
	(ret.type) = to;
	return ret;
};

cgv_load ::= func(v : cgv mut -> cgv)
{
	(v.ll) = LLVMBuildLoad2(ir, cg_type(v.type), v.ll, "");
	(v.tag) = (cgvtag.misc);
	return v;
};

cgv_load_if_variable ::= func(v : cgv mut? -> v0)
{
	if((v->tag) == (cgvtag.var))
	{
		deref(v) = cgv_load(deref v);
	}
};

putll ::= func(ll : u64 -> v0)
{
	putzstr(LLVMPrintValueToString(ll));
};
