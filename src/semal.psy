semal_program ::= struct
{
	root : ast&;
};

semal_is_build_region ::= func(n : ast&) -> bool
{
	if((n->type) != (ast_type.stmt))
	{
		return false;
	}
	stmt ::= n->stmt;
	if((stmt.type) != (ast_stmt_type.region_stmt))
	{
		return false;
	}
	region ::= stmt.region;
	build_region_name ::= "build";
	len ::= cstrlen(build_region_name);
	return cstreql_n(region.name, build_region_name, len);
};

semal_find_build_region ::= func(source : ast&) -> ast&
{
	idx ::= ast_child_find_if(source, semal_is_build_region);
	if(idx == (-1@u64))
	{
		return null;
	}
	return ast_get_child(source@_, idx);
};

semal_file ::= func(prog : semal_program mut&, source : ast&) -> v0
{
	build_region ::= semal_find_build_region(source);
	if(build_region == null)
	{
		psyc_warning(source->loc, "File had no build region");
	}
};

== build ==
{
	add_source_file("ast.psy");
	add_source_file("diag.psy");
}
