semar : arena mut? mut;

semal_setup ::= func(a : arena mut? -> v0)
{
	semar = a;
};

decl_ty ::= func(node : ast?, s : scope mut? -> ty)
{
	return zero;
};

semal_fnptrnode ::= func(node : ast?, s : scope mut?, prog : program mut? -> ty)
{
	decl ::= node->decl;
	bn_end : u64 mut;
	maybe_struct : structdef? mut;
	if((decl.typename_len) == zstrlen(psyc_function_placeholder_typename))
	{
		if(streql_n(decl.typename, psyc_function_placeholder_typename, decl.typename_len))
		{
			// function placeholder typename detected.
			wipfn_node ::= ast_get_child(node@_, 0);
			wipfn ::= wipfn_node->fn;
			fn_retty : ty mut := scope_parse_typename(s, wipfn.ret_typename, wipfn.ret_typename_len);
			if(ty_isbad(fn_retty))
			{
				bn_end = typarse_basename_end(wipfn.ret_typename, wipfn.ret_typename_len);
				maybe_struct = scope_find_struct(s, wipfn.ret_typename, bn_end);
				if(maybe_struct != zero)
				{
					semal_struct(maybe_struct@_, ref(prog->global), prog);
					fn_retty = scope_parse_typename(s, wipfn.ret_typename, wipfn.ret_typename_len);
				}
			}
			if(ty_isbad(fn_retty))
			{
				psyc_error_begin(wipfn_node->loc);
				putzstr("return-type ");
				putchar('"');
				putbytes(wipfn.ret_typename, wipfn.ret_typename_len);
				putchar('"');
				putzstr(" of function-pointer ");
				putbytes(decl.name, decl.name_len);
				putzstr(" yielded badtype");
				psyc_diag_end();
				psyc_exit_failure();
			}
			fnty : ty mut := ty_getfn(fn_retty, wipfn_node->childcount, zero);
			i : u64 mut;
			for(i = 0, i < (wipfn_node->childcount), i = i + 1)
			{
				cur_param_node ::= ast_get_child(wipfn_node@_, i);
				cur_param_decl ::= cur_param_node->decl;
				paramty : ty mut := scope_parse_typename(s, cur_param_decl.typename, cur_param_decl.typename_len);
				if(ty_isbad(paramty))
				{
					bn_end = typarse_basename_end(cur_param_decl.typename, cur_param_decl.typename_len);
					maybe_struct = scope_find_struct(s, cur_param_decl.typename, bn_end);
					putbytes(cur_param_decl.typename, bn_end);
					putchar(10);
					if(maybe_struct != zero)
					{
						putzstr("doing a delayed semal_struct...");
						putchar(10);
						semal_struct(maybe_struct@_, ref(prog->global), prog);
						paramty = scope_parse_typename(s, cur_param_decl.typename, cur_param_decl.typename_len);
					}
				}
				if(ty_isbad(paramty))
				{
					psyc_error_begin(cur_param_node->loc);
					putzstr("parameter ");
					putuint(i);
					putzstr(" of function-pointer ");
					putchar('"');
					putbytes(decl.name, decl.name_len);
					putchar('"');
					putzstr(" with typename: ");
					putchar('"');
					putbytes(cur_param_decl.typename, cur_param_decl.typename_len);
					putchar('"');
					putzstr(" yielded badtype");
					psyc_diag_end();
					psyc_exit_failure();
				}
				ty_fn_set_param(ref fnty, i, paramty);
			}
			return ty_ref(fnty, zero);
		}
	}
	return zero;
};

// semal struct is a bit complicated...
// one of its data members could be another struct - one that we haven't semal'd yet either
semal_struct ::= func(def : structdef mut?, s : scope mut?, prog : program mut? -> v0)
{
	node ::= def->node;

	if(!ty_isbad(def->type))
	{
		// we already did this earlier, probably due to it being a dependency of an earlier struct.
		return;
	}
	(def->in_progress) = true;

	retstruct : structty mut := zero;
	(retstruct.member_count) = (def->member_count);
	(retstruct.name) = (def->name);
	(retstruct.name_len) = (def->name_len);

	(retstruct.member_types) = arena_alloc(semar, __sizeof(ty) * (def->member_count));
	(retstruct.member_names) = arena_alloc(semar, __sizeof(u8?) * (def->member_count));
	(retstruct.member_name_lens) = arena_alloc(semar, __sizeof(u64) * (def->member_count));
	memtypes ::= (retstruct.member_types)@ty mut?;

	i : u64 mut;

	for(i = 0, i < (def->member_count), i = i + 1)
	{
		memnode ::= ast_get_child(node@_, i);
		memdecl ::= (memnode->decl);
		base_end ::= typarse_basename_end(memdecl.typename, memdecl.typename_len);
		maybe_struct_member ::= scope_find_struct(s, memdecl.typename, base_end);
		memty ::= zero@ty mut;
		
		if(maybe_struct_member != zero)
		{
			// if the current data members typename is a struct
			// we have to be really careful
			// a.) it could mean a recursive struct
			if(maybe_struct_member == def)
			{
				psyc_error_begin(node->loc);
				putzstr("recursive struct detected - data member ");
				putchar('"');
				putbytes(def->name, def->name_len);
				putchar('"');
				putzstr("::");
				putbytes(memdecl.name, memdecl.name_len);
				putzstr(" is itself of type ");
				putchar('"');
				putbytes(memdecl.typename, memdecl.typename_len);
				putchar('"');
				psyc_diag_end();
				psyc_exit_failure();
			}
			// b.) it could be another struct that we haven't semal'd yet
			if(ty_isbad(maybe_struct_member->type))
			{
				// note: this has the potential to recurse forever if we have a circular dependency.
				// so we check that it isn't already in progress
				if(maybe_struct_member->in_progress)
				{
					psyc_error_begin(node->loc);
					putzstr("struct circular dependency detected - data member ");
					putchar('"');
					putbytes(def->name, def->name_len);
					putzstr("::");
					putbytes(memdecl.name, memdecl.name_len);
					putchar('"');
					putzstr(" is of type ");
					putchar('"');
					putbytes(maybe_struct_member->name, maybe_struct_member->name_len);
					putchar('"');
					putzstr(" which itself appears to rely on the definition of ");
					putchar('"');
					putbytes(def->name, def->name_len);
					putchar('"');
					psyc_diag_end();
					psyc_exit_failure();
				}
				semal_struct(maybe_struct_member@_, s, prog);
			}
			memty = (maybe_struct_member->type);
			mem_tyname_extras ::= (memdecl.typename) # base_end;
			mem_tyname_extras_len ::= (memdecl.typename_len) - base_end;
			typarse_extras(mem_tyname_extras, mem_tyname_extras_len, ref memty);
		}
		if(maybe_struct_member == zero)
		{
			memty = scope_parse_typename(s, memdecl.typename, memdecl.typename_len);
		}
		if(ty_isbad(memty))
		{
			memty = semal_fnptrnode(memnode, s, prog);
		}
		if(typarse_extras(memdecl.extras, memdecl.extras_size, ref memty) < (memdecl.extras_size))
		{
			psyc_error_begin(node->loc);
			putzstr("struct data member ");
			putchar('"');
			putbytes(def->name, def->name_len);
			putzstr("::");
			putbytes(memdecl.name, memdecl.name_len);
			putchar('"');
			putzstr(" yielded badtype");
			psyc_diag_end();
			psyc_exit_failure();
			memty = zero;
		}
		if(ty_isbad(memty))
		{
			psyc_error_begin(node->loc);
			putzstr("struct data member ");
			putchar('"');
			putbytes(def->name, def->name_len);
			putzstr("::");
			putbytes(memdecl.name, memdecl.name_len);
			putchar('"');
			putzstr(" with typename ");
			putchar('"');
			putbytes(memdecl.typename, memdecl.typename_len);
			putchar('"');
			putzstr(" yielded badtype");
			psyc_diag_end();
			psyc_exit_failure();
		}
		deref(memtypes # i) = memty;
		deref((retstruct.member_names) # i) = (memdecl.name);
		deref((retstruct.member_name_lens) # i) = (memdecl.name_len);
	}

	retty ::= ref(def->type);
	(retty->tag) = (tytag.strct);
	(retty->strct) = retstruct;

	scope_declare_struct_type(s, retstruct, node->loc);
};

semal_enum ::= func(def : enumdef mut?, s : scope mut?, prog : program mut? -> v0)
{
	node ::= def->node;
	enumdata ::= node->enumdef;

	retenum : enumty mut := zero;
	(retenum.entry_count) = (def->entry_count);
	(retenum.entry_values) = arena_alloc(semar, __sizeof(deref (retenum.entry_values)) * (def->entry_count));
	(retenum.entry_names) = arena_alloc(semar, __sizeof(deref (retenum.entry_names)) * (def->entry_count));
	(retenum.entry_name_lens) = arena_alloc(semar, __sizeof(deref (retenum.entry_name_lens)) * (def->entry_count));
	(retenum.name) = (enumdata.enumname);
	(retenum.name_len) = (enumdata.enumname_len);

	i : u64 mut;
	for(i = 0, i < (def->entry_count), i = i + 1)
	{
		entnode ::= ast_get_child(node@_, i);
		entinit ::= entnode->init;
		entval ::= ast_get_child(entnode@_, 0);
		entinitval ::= sval_node(context
		{
			.node := entval;
			.local := s;
		}, prog);
		// todo: assert that this is an integer literal
		entinitlit ::= entinitval.literal;

		deref((retenum.entry_names) # i) = (entinit.name);
		deref((retenum.entry_name_lens) # i) = (entinit.name_len);
		deref((retenum.entry_values) # i) = ((entinitlit.integral)@_);
	}

	(def->type) = ty
	{
		.tag := tytag.enm;
		.enm := retenum;
	};
	scope_declare_enum_type(s, retenum, node->loc);
};

semal_func ::= func(f : function mut?, s : scope mut?, prog : program mut? -> v0)
{
	node ::= f->node;
	fn ::= node->fn;
	// start with the return type.
	fn_retty ::= scope_parse_typename(s, fn.ret_typename, fn.ret_typename_len);
	if(ty_isbad(fn_retty))
	{
		psyc_error_begin(node->loc);
		putzstr("return-type ");
		putchar('"');
		putbytes(fn.ret_typename, fn.ret_typename_len);
		putchar('"');
		putzstr(" of function ");
		putbytes(f->name, f->name_len);
		putzstr(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}
	fnty : ty mut := ty_getfn(fn_retty, f->param_count, zero);
	// go through all params.
	i : u64 mut;
	for(i = 0, i < (f->param_count), i = i + 1)
	{
		cur_param_node ::= ast_get_child(node@_, i);
		cur_param_decl ::= cur_param_node->decl;

		declty : ty mut := scope_parse_typename(s, cur_param_decl.typename, cur_param_decl.typename_len);
		if(ty_isbad(declty))
		{
			declty = semal_fnptrnode(cur_param_node, s, prog);
		}
		if(typarse_extras(cur_param_decl.extras, cur_param_decl.extras_size, ref declty) < (cur_param_decl.extras_size))
		{
			psyc_error_begin(cur_param_node->loc);
			putzstr("parameter ");
			putuint(i);
			putzstr(" of function ");
			putchar('"');
			putbytes(f->name, f->name_len);
			putchar('"');
			putzstr(" yielded badtype");
			psyc_diag_end();
			psyc_exit_failure();
			declty = zero;
		}
		if(ty_isbad(declty))
		{
			psyc_error_begin(cur_param_node->loc);
			putzstr("parameter ");
			putuint(i);
			putzstr(" of function ");
			putchar('"');
			putbytes(f->name, f->name_len);
			putchar('"');
			putzstr(" with typename: ");
			putchar('"');
			putbytes(cur_param_decl.typename, cur_param_decl.typename_len);
			if((cur_param_decl.extras) != zero)
			{
				putchar(' ');
				putbytes(cur_param_decl.extras, cur_param_decl.extras_size);
			}
			putchar('"');
			putzstr(" yielded badtype");
			psyc_diag_end();
			psyc_exit_failure();
		}
		ty_fn_set_param(ref fnty, i, declty);
	}

	(f->type) = fnty;
};

semal_macro ::= func(m : macrodef mut?, s : scope mut?, prog : program mut? -> v0)
{
	putzstr("semal'ing macro ");
	putbytes(m->name, m->name_len);
	putchar(10);
};

semal ::= func(prog : program mut? -> v0)
{
	psyc_timed_begin(psyc_stage.semal);
	defer psyc_timed_end();
	glob ::= ref(prog->global);
	structs ::= ref(glob->structs);
	enums ::= ref(glob->enums);
	funcs ::= ref(glob->funcs);
	macros ::= ref(glob->macros);

	i : u64 mut;

	for(i = 0, i < (enums->size), i = i + 1)
	{
		semal_enum((enums->data) # i, glob, prog);
	}

	for(i = 0, i < (structs->size), i = i + 1)
	{
		semal_struct((structs->data) # i, glob, prog);
	}

	for(i = 0, i < (funcs->size), i = i + 1)
	{
		semal_func((funcs->data) # i, glob, prog);
	}

	for(i = 0, i < (macros->size), i = i + 1)
	{
		semal_macro((macros->data) # i, glob, prog);
	}
};

 == build ==
 {
 	add_source_file("program.psy");
 }
