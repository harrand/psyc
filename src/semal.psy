semal_function ::= struct
{
	fn : func(ctx : context mut, prog : program mut&) -> ty;
};

semal_expr_function ::= struct
{
	fn : func(expr : ast_expr, ctx : context mut, prog : program mut&) -> ty;
};

semal_biop_function ::= struct
{
	fn : func(lhs_ty : ty, rhs_ty : ty, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> ty;
};

semal_unop_function ::= struct
{
	fn : func(operand_ty : ty, operand_loc : srcloc, ctx : context mut, prog : program mut&) -> ty;
};

semar : arena mut& mut;
semal_jump_table : semal_function mut#4;
stmt_jump_table : semal_function mut#6;
expr_jump_table : semal_expr_function mut#5;
biop_jump_table : semal_biop_function mut#6;
unop_jump_table : semal_unop_function mut#4;

literal_types : ty mut#4;

semal_expr_common ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> ty
{
	pre_transform_idx ::= (expr.type)@s64;
	subtraction ::= (ast_expr_type.symbol)@s64;

	idx ::= pre_transform_idx - subtraction;
	jump ::= deref(expr_jump_table at idx);
	return jump.fn(expr, ctx, prog);
};

semal_symbol_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> ty
{
	sym ::= expr.symbol;
	return zero;
};

semal_literal_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> ty
{
	lit ::= expr.literal;
	return deref(literal_types at ((lit.type)@s64));
};

semal_unop_minus ::= func(operand_ty : ty, operand_loc : srcloc, ctx : context mut, prog : program mut&) -> ty
{
	if(!ty_is_integral(operand_ty))
	{
		if(!ty_is_floating_point(operand_ty))
		{
			psyc_error_begin(operand_loc);
			puts("operand of unary minus is of type ");
			putchar('"');
			putty(operand_ty);
			putchar('"');
			puts(", but it must be either an 'integral' or 'floating-point' type");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}
	return operand_ty;
};

semal_unop_ref ::= func(operand_ty : ty, operand_loc : srcloc, ctx : context mut, prog : program mut&) -> ty
{
	// todo: do not allow refs on non-lvalues
	return ty_ref(operand_ty, zero);
};

semal_unop_deref ::= func(operand_ty : ty, operand_loc : srcloc, ctx : context mut, prog : program mut&) -> ty
{
	if(!ty_is(operand_ty, tytag.ptr))
	{
			psyc_error_begin(operand_loc);
			puts("operand of deref is of type ");
			putchar('"');
			putty(operand_ty);
			putchar('"');
			puts(", but it must be a 'pointer' type");
			psyc_diag_end();
			psyc_exit_failure();
	}
	return ty_deref(operand_ty);
};

semal_unop_defer ::= func(operand_ty : ty, operand_loc : srcloc, ctx : context mut, prog : program mut&) -> ty
{
	psyc_panic(operand_loc, "unop defer NYI");
	return zero;
};

semal_unop_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> ty
{
	unop ::= expr.unop;
	node ::= ctx.node;
	if((node->childcount) != 1)
	{
		psyc_error_begin(node->loc);
		puts("unop expr expects exactly 1 child representing operand. this unop expr node has ");
		putuint(node->childcount);
		puts(" children.");
		psyc_diag_end();
		psyc_exit_failure();
	}

	operand ::= ast_unop_get_operand(deref node);
	operand_ty ::= semal_expr_common(operand.expr, context{.node := ref operand; .local := ctx.local;}, prog);
	if(ty_isbad(operand_ty))
	{
		psyc_error_begin(operand.loc);
		puts("operand of unary operator ");
		puts(__enumname(unop.type));
		puts(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}
	pre_transform_idx ::= (unop.type)@s64;
	subtraction ::= 0;
	idx ::= pre_transform_idx - subtraction;
	jump ::= deref(unop_jump_table at idx);
	return jump.fn(operand_ty, operand.loc, ctx, prog);
};


semal_biop_assign ::= func(lhs_ty : ty, rhs_ty : ty, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> ty
{
	psyc_panic(lhs_loc, "assign biop NYI");
	return zero;
};

semal_biop_arithmetic_common ::= func(op_name : u8&, lhs_ty : ty, rhs_ty : ty, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> ty
{
	if(!ty_is_integral(lhs_ty))
	{
		if(!ty_is_floating_point(lhs_ty))
		{
			psyc_error_begin(lhs_loc);
			puts("lhs of ");
			puts(op_name);
			puts(" is of type ");
			putchar('"');
			putty(lhs_ty);
			putchar('"');
			puts(", but it must be either an 'integral' or 'floating-point' type");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}
	if(!ty_is_integral(rhs_ty))
	{
		if(!ty_is_floating_point(rhs_ty))
		{
			psyc_error_begin(rhs_loc);
			puts("rhs of ");
			puts(op_name);
			puts(" is of type ");
			putchar('"');
			putty(rhs_ty);
			putchar('"');
			puts(", but it must be either an 'integral' or 'floating-point' type");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}
	// assert(ty_can_convert(lhs_ty, rhs_ty))
	return lhs_ty;
};

semal_biop_plus ::= func(lhs_ty : ty, rhs_ty : ty, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> ty
{
	return semal_biop_arithmetic_common("addition", lhs_ty, rhs_ty, lhs_loc, rhs_loc, ctx, prog);
};

semal_biop_minus ::= func(lhs_ty : ty, rhs_ty : ty, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> ty
{
	return semal_biop_arithmetic_common("subtraction", lhs_ty, rhs_ty, lhs_loc, rhs_loc, ctx, prog);
};

semal_biop_multiply ::= func(lhs_ty : ty, rhs_ty : ty, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> ty
{
	return semal_biop_arithmetic_common("multiply", lhs_ty, rhs_ty, lhs_loc, rhs_loc, ctx, prog);
};

semal_biop_divide ::= func(lhs_ty : ty, rhs_ty : ty, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> ty
{
	return semal_biop_arithmetic_common("divide", lhs_ty, rhs_ty, lhs_loc, rhs_loc, ctx, prog);
};

semal_biop_at ::= func(lhs_ty : ty, rhs_ty : ty, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> ty
{
	node ::= ctx.node;
	// lhs must be:
	//	- a ptr
	//	- an array
	retty : ty mut := zero;
	acceptable : bool mut := false;
	if(ty_is(lhs_ty, tytag.ptr))
	{
		acceptable = true;
		// return type is the same type as lhs in this case
		retty = lhs_ty;
	}
	if(ty_is(lhs_ty, tytag.arr))
	{
		acceptable = true;
		// return type is a pointer to underlying instead of an array
		arr ::= lhs_ty.arr;
		underlying ::= deref((arr.underlying)@ty&);
		retty = ty_ref(underlying, zero);
	}
	if(!acceptable)
	{
		psyc_error_begin(lhs_loc);
		puts("lhs of 'at' operator is of type ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		puts(", but it must be either a 'pointer' or 'array' type.");
		psyc_diag_end();
		psyc_exit_failure();
	}

	// rhs must be:
	//	- an integral type
	if(!ty_is_integral(rhs_ty))
	{
		psyc_error_begin(rhs_loc);
		puts("rhs of 'at' operator is of type ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		puts(", but it must be an 'integral' type.");
		psyc_diag_end();
		psyc_exit_failure();
	}
	return retty;
};

semal_biop_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> ty
{
	biop ::= expr.biop;
	node ::= ctx.node;
	if((node->childcount) != 2)
	{
		psyc_error_begin(node->loc);
		puts("biop expr expects exactly 2 children representing lhs and rhs. this biop expr node has ");
		putuint(node->childcount);
		puts(" children.");
		psyc_diag_end();
		psyc_exit_failure();
	}
	lhs ::= ast_biop_get_lhs(deref node);
	rhs ::= ast_biop_get_rhs(deref node);

	lhs_ty ::= semal_expr_common(lhs.expr, context{.node := ref lhs; .local := ctx.local;}, prog);
	if(ty_isbad(lhs_ty))
	{
		psyc_error_begin(lhs.loc);
		puts("lhs of binary operator ");
		puts(__enumname(biop.type));
		puts(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}
	rhs_ty ::= semal_expr_common(rhs.expr, context{.node := ref rhs; .local := ctx.local;}, prog);
	if(ty_isbad(rhs_ty))
	{
		psyc_error_begin(rhs.loc);
		puts("rhs of binary operator ");
		puts(__enumname(biop.type));
		puts(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}

	pre_transform_idx ::= (biop.type)@s64;
	subtraction ::= 0;
	idx ::= pre_transform_idx - subtraction;
	jump ::= deref(biop_jump_table at idx);
	return jump.fn(lhs_ty, rhs_ty, lhs.loc, rhs.loc, ctx, prog);
};

semal_callfunc_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> ty
{
	callfunc ::= expr.callfunc;
	return zero;
};

semal_expr ::= func(ctx : context mut, prog : program mut&) -> ty
{
	node ::= ctx.node;
	return semal_expr_common(node->expr, ctx, prog);
};

semal_decl_common ::= func(decl : ast_decl, ctx : context mut, prog : program mut&) -> ty
{
	node ::= ctx.node;
	is_deduced_type ::= cstreql_n(decl.typename, psyc_deduced_typename, decl.typename_len);
	retty : ty mut := zero;
	if(!is_deduced_type)
	{
		retty = scope_parse_typename(ctx.local, decl.typename, decl.typename_len);
		if(ty_isbad(retty))
		{
			// try globally
			retty = program_parse_typename(prog, decl.typename, decl.typename_len);
		}
	}
	if(is_deduced_type)
	{
		// deduced type.
		if((node->childcount) == 0)
		{
			psyc_error_begin(node->loc);
			puts("type-deduced decl ");
			putss(decl.name, decl.name_len);
			puts(" did not seem to have an initialiser expression");
			psyc_diag_end();
			psyc_exit_failure();
		}
		init_node ::= ast_get_child(node@_, 0);
		retty = semal_expr(context{.node := init_node; .local := ctx.local;}, prog);
	}
	if(ty_isbad(retty))
	{
		psyc_error_begin(node->loc);
		puts("decl ");
		putchar('"');
		putss(decl.name, decl.name_len);
		putchar('"');
		puts(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}
	// todo: register variable if we need to do so.
	// struct data members and function parameters for example are both decls that dont register a variable in the usual way.
	return retty;
};

semal_decl ::= func(ctx : context mut, prog : program mut&) -> ty
{
	node ::= ctx.node;
	return semal_decl_common(node->decl, ctx, prog);
};

semal_structdef ::= func(ctx : context mut, prog : program mut&) -> ty
{
	node ::= ctx.node;
	def ::= node->structdef;
	putss(def.structname, def.structname_len);
	putchar(10);

	childcount ::= node->childcount;
	// todo: check if structname is already defined.
	retstruct : structty mut := zero;
	(retstruct.member_count) = childcount;
	(retstruct.name) = (def.structname);
	(retstruct.name_len) = (def.structname_len);

	(retstruct.member_types) = arena_push(semar, __sizeof(ty) * childcount);
	(retstruct.member_names) = arena_push(semar, __sizeof(u8&) * childcount);
	(retstruct.member_name_lens) = arena_push(semar, __sizeof(u64) * childcount);

	i : u64 mut;

	cur_member_node : ast& mut;
	cur_decl : ast_decl mut;
	cur_member_type : ty mut;
	for(i = 0, i < childcount, i = i + 1)
	{
		cur_member_node = ast_get_child(node@_, i);
		cur_decl = (cur_member_node->decl);
		cur_member_type = semal_decl_common(cur_decl, context
		{
			.node := cur_member_node;
			.local := ctx.local;
		}, prog);
		if(ty_isbad(cur_member_type))
		{
			psyc_error_begin(cur_member_node->loc);
			if(cstreql_n(cur_decl.typename, def.structname, cur_decl.name_len))
			{
				putss(def.structname, def.structname_len);
				puts("::");
				putss(cur_decl.name, cur_decl.name_len);
				puts(" was of type ");
				putss(def.structname, def.structname_len);
				puts(" - struct's data member cannot be itself");
				psyc_diag_end();
				psyc_exit_failure();
			}
			putss(def.structname, def.structname_len);
			puts("::");
			putss(cur_decl.name, cur_decl.name_len);
			puts(" yielded badtype");
			psyc_diag_end();
			psyc_exit_failure();
		}
		memty_ptr ::= (retstruct.member_types)@ty mut&;
		deref(memty_ptr at i) = cur_member_type;
		deref((retstruct.member_names) at i) = (cur_decl.name);
		deref((retstruct.member_name_lens) at i) = (cur_decl.name_len);
	}

	// note: local scope is going to be (at the very most) file scope
	// this means that other files will not currently be able to see this definition
	// this can be fixed by simply using program_declare_struct, but i don't feel comfortable just doing that willy-nilly
	already ::= scope_find_struct(ctx.local, def.structname, def.structname_len);
	if(already != null)
	{
		psyc_error_begin(node->loc);
		puts("a struct named ");
		putchar('"');
		putss(def.structname, def.structname_len);
		putchar('"');
		puts(" was already defined ");
		print_srcloc(already->defined_at);
		psyc_diag_end();
		psyc_exit_failure();
	}
	scope_declare_struct(ctx.local, retstruct, node->loc);
	return zero;
};

semal_fn ::= func(ctx : context mut, prog : program mut&) -> ty
{
	node ::= ctx.node;
	fn ::= node->fn;

	ret_ty : ty mut := scope_parse_typename(ctx.local, fn.ret_typename, fn.ret_typename_len);
	// so the param count is *not* just equal to the childcount if the function is not extern.
	// the statements within are also child nodes.
	// however, all ast_fn children will start off as decls (all the params) and then the contents of the implementation will follow
	i : u64 mut;
	childcount ::= node->childcount;
	param_count : u64 mut := 0;
	for(i = 0, i < childcount, i = i + 1)
	{
		cur_param_node ::= ast_get_child(node@_, i);
		if((cur_param_node->type) == (ast_type.decl))
		{
			param_count = param_count + 1;
		}
		if((cur_param_node->type) != (ast_type.decl))
		{
			// early out
			i = childcount;
		}
	}
	type : ty mut := ty_getfn(ret_ty, param_count, zero);
	for(i = 0, i < param_count, i = i + 1)
	{
		cur_param_node ::= ast_get_child(node@_, i);
		cur_param_decl ::= cur_param_node->decl;

		declty : ty mut := scope_parse_typename(ctx.local, cur_param_decl.typename, cur_param_decl.typename_len);
		ty_fn_set_param(ref type, i, declty);
	}
	if(param_count > 8)
	{
		psyc_panic(node->loc, "function had too many arguments. more than 8 params is NYI");
	}

	// note: local scope is going to be (at the very most) file scope
	// this means that other files will not currently be able to see this definition
	// this can be fixed by simply using program_declare_function, but i don't feel comfortable just doing that willy-nilly
	scope_declare_function(ctx.local, semar, function{.node := ctx.node;});

	putss(fn.fn_name, fn.fn_name_len);
	putchar(' ');
	print_srcloc(node->loc);
	puts(" => ");
	putty(type);
	putchar(10);
	return type;
};

semal_region_stmt ::= func(ctx : context mut, prog : program mut&) -> ty
{
	// remember - we handle build metaregions in its own special way
// so when we iterate and find a region stmt manually we simply ignore it.
	return zero;
};

semal_blk_stmt ::= func(ctx : context mut, prog : program mut&) -> ty
{
	puts("block statement");
	putchar(10);
	return zero;
};

semal_stmt ::= func(ctx : context mut, prog : program mut&) -> ty
{
	node ::= ctx.node;
	pre_transform_idx ::= (node->stmt)@s64;
	subtraction ::= (ast_stmt.expr_stmt)@s64;

	idx ::= pre_transform_idx - subtraction;
	jump ::= deref(stmt_jump_table at idx);
	return jump.fn(ctx, prog);
};

semal_setup ::= func(a : arena mut&) -> v0
{
	psyc_timed(psyc_stage.setup);
	semar = a;

	deref(semal_jump_table at 0) = semal_function{.fn := semal_stmt;};
	deref(semal_jump_table at 1) = semal_function{.fn := semal_expr;};
	deref(semal_jump_table at 2) = semal_function{.fn := semal_decl;};
	deref(semal_jump_table at 3) = semal_function{.fn := semal_structdef;};

	deref(stmt_jump_table at 0) = semal_function{.fn := semal_expr;};
	deref(stmt_jump_table at 1) = semal_function{.fn := semal_decl;};
	deref(stmt_jump_table at 2) = semal_function{.fn := semal_region_stmt;};
	deref(stmt_jump_table at 3) = semal_function{.fn := semal_structdef;};
	deref(stmt_jump_table at 4) = semal_function{.fn := semal_fn;};
	deref(stmt_jump_table at 5) = semal_function{.fn := semal_blk_stmt;};

	deref(expr_jump_table at 0) = semal_expr_function{.fn := semal_symbol_expr;};
	deref(expr_jump_table at 1) = semal_expr_function{.fn := semal_literal_expr;};
	deref(expr_jump_table at 2) = semal_expr_function{.fn := semal_biop_expr;};
	deref(expr_jump_table at 3) = semal_expr_function{.fn := semal_unop_expr;};
	deref(expr_jump_table at 4) = semal_expr_function{.fn := semal_callfunc_expr;};

	litqual ::= (tyqual.weak) | (tyqual.static);
	deref(literal_types at ((ast_literal_type.integral)@s64)) =
		ty_getprim(primty.s64, litqual);
	deref(literal_types at ((ast_literal_type.floating_point)@s64)) =
		ty_getprim(primty.f64, litqual);
	deref(literal_types at ((ast_literal_type.char_literal)@s64)) =
		ty_getprim(primty.u8, litqual);
	deref(literal_types at ((ast_literal_type.string_literal)@s64)) =
		ty_ref(ty_getprim(primty.u8, zero), tyqual.static);

	deref(biop_jump_table at 0) = semal_biop_function{.fn := semal_biop_assign;};
	deref(biop_jump_table at 1) = semal_biop_function{.fn := semal_biop_plus;};
	deref(biop_jump_table at 2) = semal_biop_function{.fn := semal_biop_minus;};
	deref(biop_jump_table at 3) = semal_biop_function{.fn := semal_biop_multiply;};
	deref(biop_jump_table at 4) = semal_biop_function{.fn := semal_biop_divide;};
	deref(biop_jump_table at 5) = semal_biop_function{.fn := semal_biop_at;};

	deref(unop_jump_table at 0) = semal_unop_function{.fn := semal_unop_minus;};
	deref(unop_jump_table at 1) = semal_unop_function{.fn := semal_unop_ref;};
	deref(unop_jump_table at 2) = semal_unop_function{.fn := semal_unop_deref;};
	deref(unop_jump_table at 3) = semal_unop_function{.fn := semal_unop_defer;};
};

semal_is_build_region ::= func(n : ast&) -> bool
{
	if((n->type) != (ast_type.stmt))
	{
		return false;
	}
	if((n->stmt) != (ast_stmt.region_stmt))
	{
		return false;
	}
	region ::= n->region;
	build_region_name ::= "build";
	len ::= cstrlen(build_region_name);
	return cstreql_n(region.name, build_region_name, len);
};

semal_find_build_region ::= func(source : ast&) -> ast&
{
	idx ::= ast_child_find_if(source, semal_is_build_region);
	if(idx == (-1@u64))
	{
		return null;
	}
	return ast_get_child(source@_, idx);
};

semal_node ::= func(ctx : context mut, prog : program mut&) -> v0
{
	node ::= ctx.node;

	pre_transform_idx ::= (node->type)@s64;
	subtraction ::= (ast_type.stmt)@s64;

	idx ::= pre_transform_idx - subtraction;
	jump ::= deref(semal_jump_table at idx);
	jump.fn(ctx, prog);
};

semal_children ::= func(ctx : context mut, prog : program mut&) -> v0
{
	node ::= ctx.node;
	childrenptr ::= (node->children)@ast&;
	count ::= node->childcount;
	i : u64 mut;
	for(i = 0, i < count, i = i + 1)
	{
		semal_node(context
		{
			.node := childrenptr at i;
			.local := ctx.local;
		}, prog);
	}
};

semal_children_recursive ::= func(ctx : context mut, prog : program mut&) -> v0
{
	node ::= ctx.node;
	childrenptr ::= (node->children)@ast&;
	count ::= node->childcount;
	i : u64 mut;
	for(i = 0, i < count, i = i + 1)
	{
		semal_node(context
		{
			.node := childrenptr at i;
			.local := ctx.local;
		}, prog);
		semal_children_recursive(context
		{
			.node := childrenptr at i;
			.local := ctx.local;
		}, prog);
	}
};

semal_build_region ::= func(ctx : context mut, prog : program mut&) -> v0
{
	node ::= ctx.node;
	(prog->in_metaregion) = true;

	semal_children(context
	{
		.node := ctx.node;
		.local := program_new_scope(prog, semar, ctx.local, scope_type.build_region, node->loc);
	}, prog);
	
	(prog->in_metaregion) = false;
};

semal_file ::= func(prog : program mut&, source : ast&) -> v0
{
	psyc_timed(psyc_stage.semal);
	build_region ::= semal_find_build_region(source);
	if(build_region == null)
	{
		psyc_warning_begin(source->loc);
		puts("file had no build region");
		psyc_diag_end();
		return;
	}
	global ::= prog->global;

	// file scope is a child of the program scope
	file_scope ::= program_new_scope(prog, semar, ref global, scope_type.file, source->loc);

	semal_build_region(context
	{
		.node := build_region;
		.local := file_scope;
	}, prog);
	semal_children_recursive(context
	{
		.node := source;
		.local := file_scope;
	}, prog);
};

== build ==
{
	add_source_file("program.psy");
	add_source_file("diag.psy");

	add_source_file("sval.psy");
	add_source_file("builtin.psy");
}
