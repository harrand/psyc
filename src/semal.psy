builtin ::= enum
{
	.message := 0;
	.warning := 1;
};

builtin_fn ::= struct
{
	fn : func(call : ast_callfunc_expr, ctx : context mut, prog : program mut&) -> sval;
	type : fnty;
};

builtins : builtin_fn mut#2;

semal_function ::= struct
{
	fn : func(ctx : context mut, prog : program mut&) -> sval;
};

semal_expr_function ::= struct
{
	fn : func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval;
};

semal_biop_function ::= struct
{
	fn : func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval;
};

semal_unop_function ::= struct
{
	fn : func(operand_val : sval mut, operand_loc : srcloc, ctx : context mut, prog : program mut&) -> sval;
};

semar : arena mut& mut;
semal_jump_table : semal_function mut#4;
stmt_jump_table : semal_function mut#9;
expr_jump_table : semal_expr_function mut#7;
biop_jump_table : semal_biop_function mut#12;
unop_jump_table : semal_unop_function mut#4;

literal_types : ty mut#5;

node_is_return_stmt ::= func(node : ast&) -> bool
{
	if((node->type) == (ast_type.expr))
	{
		expr ::= node->expr;
		if((expr.type) == (ast_expr_type.ret))
		{
			return true;
		}
	}
	return false;
};

node_get_idx_of_first_return ::= func(node : ast mut&) -> u64
{
	i : u64 mut;
	for(i = 0, i < (node->childcount), i = i + 1)
	{
		if(node_is_return_stmt(ast_get_child(node, i)))
		{
			return i;
		}
	}
	return i - 1;
};


// if the node is deferred, return the actual node as if it wasnt deferred. if the node isnt deferred at all, return null
deferred_node_get ::= func(node : ast&) -> ast&
{
	if((node->type) != (ast_type.stmt))
	{
		return null;
	}
	stmt ::= node->stmt;
	if(stmt != (ast_stmt.expr_stmt))
	{
		return null;
	}
	expr ::= node->expr;
	if((expr.type) == (ast_expr_type.unop))
	{
		unop ::= expr.unop;
		if((unop.type) == (ast_unop_type.op_defer))
		{
			// yes we are a deferred node.
			// return our child
			return ast_get_child(node@_, 0);
		}
	}
	return null;
};

defer_children ::= func(node : ast mut&) -> v0
{
	if((node->childcount) == 0)
	{
		return;
	}
	// re-arrange children to deal with deferred nodes.
	i : u64 mut := 0;
	curchild : ast& mut;
	cur_deferred : ast& mut;
	cache : ast mut;
	last_id ::= node_get_idx_of_first_return(node);
	last ::= ast_get_child(node@_, last_id);
	while(i < (node->childcount))
	{
		curchild = ast_get_child(node, i);
		cur_deferred = deferred_node_get(curchild);
		if(cur_deferred != null)
		{
			cache = (deref cur_deferred);
			// move all subsequent children down to replace us
			__memcpy(curchild, curchild at 1, __sizeof(ast) * (last_id));
			(deref last) = cache;
		}
		if(cur_deferred == null)
		{
			i = i + 1;
		}
	}
};

semal_node ::= func(ctx : context mut, prog : program mut&) -> v0
{
	node ::= ctx.node;

	pre_transform_idx ::= (node->type)@s64;
	subtraction ::= (ast_type.stmt)@s64;

	idx ::= pre_transform_idx - subtraction;
	jump ::= deref(semal_jump_table at idx);
	jump.fn(ctx, prog);
};

semal_children ::= func(ctx : context mut, prog : program mut&) -> v0
{
	node ::= ctx.node;
	defer_children(node@_);
	childrenptr ::= (node->children)@ast&;
	count ::= node->childcount;
	i : u64 mut;
	for(i = 0, i < count, i = i + 1)
	{
		semal_node(context
		{
			.node := childrenptr at i;
			.local := ctx.local;
		}, prog);
	}
};

semal_children_recursive ::= func(ctx : context mut, prog : program mut&) -> v0
{
	node ::= ctx.node;
	childrenptr ::= (node->children)@ast&;
	count ::= node->childcount;
	i : u64 mut;
	for(i = 0, i < count, i = i + 1)
	{
		semal_node(context
		{
			.node := childrenptr at i;
			.local := ctx.local;
		}, prog);
		semal_children_recursive(context
		{
			.node := childrenptr at i;
			.local := ctx.local;
		}, prog);
	}
};


semal_expr_common ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval
{
	pre_transform_idx ::= (expr.type)@s64;
	subtraction ::= (ast_expr_type.symbol)@s64;

	idx ::= pre_transform_idx - subtraction;
	jump ::= deref(expr_jump_table at idx);
	return jump.fn(expr, ctx, prog);
};

semal_symbol_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	sym ::= expr.symbol;
	maybe_variable ::= scope_find_variable(ctx.local, sym.symbol, sym.len);
	if(maybe_variable != null)
	{
		return just_type(maybe_variable->type);
	}
	psyc_error_begin(node->loc);
	puts("unknown symbol");
	putchar('"');
	putss(sym.symbol, sym.len);
	putchar('"');
	psyc_diag_end();
	psyc_exit_failure();
	return zero;
};

semal_literal_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	lit ::= expr.literal;
	if((lit.type) == (ast_literal_type.zero_literal))
	{
		return sval
		{
			.type := zero;
			.tag := sval_tag.val_zero;
		};
	}
	return sval
	{
		.type := deref(literal_types at ((lit.type)@s64));
		.tag := sval_tag.literal;
		.literal := lit;
	};
};

semal_unop_minus ::= func(operand : sval mut, operand_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	if(!ty_is_integral(operand.type))
	{
		if(!ty_is_floating_point(operand.type))
		{
			psyc_error_begin(operand_loc);
			puts("operand of unary minus is of type ");
			putchar('"');
			putty(operand.type);
			putchar('"');
			puts(", but it must be either an 'integral' or 'floating-point' type");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}
	literal ::= ref(operand.literal);
	(literal->integral) = -(literal->integral);
	(literal->floating_point) = -(literal->floating_point);
	return operand;
};

semal_unop_ref ::= func(operand : sval mut, operand_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	return just_type(ty_ref(operand.type, zero));
};

semal_unop_deref ::= func(operand : sval mut, operand_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	if(!ty_is(operand.type, tytag.ptr))
	{
		psyc_error_begin(operand_loc);
		puts("operand of deref is of type ");
		putchar('"');
		putty(operand.type);
		putchar('"');
		puts(", but it must be a 'pointer' type");
		psyc_diag_end();
		psyc_exit_failure();
	}
	return just_type(ty_deref(operand.type));
};

semal_unop_defer ::= func(operand : sval mut, operand_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;

	puts("unop defer NYI ");
	print_srcloc(node->loc);
	putchar(10);
	return zero;
};

semal_unop_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval
{
	unop ::= expr.unop;
	node ::= ctx.node;
	if((node->childcount) != 1)
	{
		psyc_error_begin(node->loc);
		puts("unop expr expects exactly 1 child representing operand. this unop expr node has ");
		putuint(node->childcount);
		puts(" children.");
		psyc_diag_end();
		psyc_exit_failure();
	}

	operand ::= ast_unop_get_operand(deref node);
	operand_val ::= semal_expr_common(operand.expr, context{.node := ref operand; .local := ctx.local;}, prog);
	if((unop.type) == (ast_unop_type.op_defer))
	{
		psyc_panic(node->loc, "defer unary operator was encountered without having been preprocessed. this is a serious compiler bug.");
	}
	if(ty_isbad(operand_val.type))
	{
		psyc_error_begin(operand.loc);
		puts("operand of unary operator ");
		puts(__enumname(unop.type));
		puts(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}
	pre_transform_idx ::= (unop.type)@s64;
	subtraction ::= 0;
	idx ::= pre_transform_idx - subtraction;
	jump ::= deref(unop_jump_table at idx);
	return jump.fn(operand_val, operand.loc, ctx, prog);
};


semal_biop_assign ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_ty ::= lhs_val.type;
	rhs_ty ::= rhs_val.type;
	if(ty_hasqual(lhs_ty, tyqual.static))
	{
		psyc_error_begin(lhs_loc);
		puts("cannot assign to type with the 'static' qualifier. lhs type was ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(!ty_hasqual(lhs_ty, tyqual.mut))
	{
		psyc_error_begin(lhs_loc);
		puts("cannot assign to type without the 'mut' qualifier. lhs type was ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	conv ::= ty_get_conv(rhs_ty, lhs_ty);
	if(conv == (tyconv.cant))
	{
		psyc_error_begin(lhs_loc);
		puts("assignment is invalid because rhs type ");
		putchar('"');
		putty(rhs_ty);
		putchar('"');
		puts(" cannot be converted to lhs type ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(conv == (tyconv.could_if_weak))
	{
		psyc_error_begin(lhs_loc);
		puts("assignment is invalid because rhs type ");
		putchar('"');
		putty(rhs_ty);
		putchar('"');
		puts(" cannot be converted to lhs type ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		puts(" (but it could with a cast)");
		psyc_diag_end();
		psyc_exit_failure();
	}
	return just_type(lhs_ty);
};

semal_biop_arithmetic_common ::= func(op_name : u8&, lhs_ty : ty, rhs_ty : ty, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> ty
{
	if(!ty_is_integral(lhs_ty))
	{
		if(!ty_is_floating_point(lhs_ty))
		{
			psyc_error_begin(lhs_loc);
			puts("lhs of ");
			puts(op_name);
			puts(" is of type ");
			putchar('"');
			putty(lhs_ty);
			putchar('"');
			puts(", but it must be either an 'integral' or 'floating-point' type");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}
	if(!ty_is_integral(rhs_ty))
	{
		if(!ty_is_floating_point(rhs_ty))
		{
			psyc_error_begin(rhs_loc);
			puts("rhs of ");
			puts(op_name);
			puts(" is of type ");
			putchar('"');
			putty(rhs_ty);
			putchar('"');
			puts(", but it must be either an 'integral' or 'floating-point' type");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}
	conv ::= ty_get_conv(lhs_ty, rhs_ty);
	if(conv == (tyconv.cant))
	{
		psyc_error_begin(rhs_loc);
		puts(op_name);
		puts(" is invalid because rhs type ");
		putchar('"');
		putty(rhs_ty);
		putchar('"');
		puts(" is not convertible to lhs type ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(conv == (tyconv.could_if_weak))
	{
		psyc_error_begin(rhs_loc);
		puts(op_name);
		puts(" is invalid because rhs type ");
		putchar('"');
		putty(rhs_ty);
		putchar('"');
		puts(" is not convertible to lhs type ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		puts(" (but it could with a cast)");
		psyc_diag_end();
		psyc_exit_failure();
	}
	return lhs_ty;
};

both ::= func(a : bool, b : bool) -> bool
{
	if(a)
	{
		if(b)
		{
			return true;
		}
	}
	return false;
};

semal_biop_compare ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	rhscpy : sval mut := rhs_val;

	lhs_lit ::= lhs_val.literal;
	both_are_static : bool mut := ty_hasqual(lhs_val.type, tyqual.static);
	if(!ty_hasqual(rhscpy.type, tyqual.static))
	{
		both_are_static = false;
	}
	conv ::= ty_get_conv(rhscpy.type, lhs_val.type);
	if(conv == (tyconv.cant))
	{
		psyc_error_begin(lhs_loc);
		puts("invalid comparison operator: rhs type");
		putchar('"');
		putty(rhscpy.type);
		putchar('"');
		puts(" is not convertible to lhs type ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		puts(" (but it could with a cast)");
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(conv == (tyconv.could_if_weak))
	{
		// bad
		psyc_error_begin(rhs_loc);
		puts("invalid comparison operator: rhs type");
		putchar('"');
		putty(rhscpy.type);
		putchar('"');
		puts(" is not convertible to lhs type ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	rhscpy = sval_convert(rhscpy, lhs_val.type);
	rhs_lit ::= rhscpy.literal;

	retqual : tyqual mut := zero;
	ret_tag : sval_tag mut := zero;
	ret_lit : sval_literal mut := zero;

	if(both_are_static)
	{
		retqual = (tyqual.static);
		ret_tag = (sval_tag.literal);

		if(both(ty_is_integral(lhs_val.type), ty_is_integral(rhscpy.type)))
		{
			(ret_lit.boolean) = ((lhs_lit.integral) == (rhs_lit.integral));
		}
		if(both(ty_is_boolean(lhs_val.type), ty_is_boolean(rhscpy.type)))
		{
			(ret_lit.boolean) = ((lhs_lit.boolean) == (rhs_lit.boolean));
		}
		if(both(ty_is_floating_point(lhs_val.type), ty_is_floating_point(rhscpy.type)))
		{
			(ret_lit.boolean) = ((lhs_lit.floating_point) == (rhs_lit.floating_point));
		}
	}

	return sval
	{
		.type := ty_getprim(primty.bool, retqual);
		.tag := ret_tag;
		.literal := ret_lit;
	};
};

semal_biop_comparen ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	rhscpy : sval mut := rhs_val;

	lhs_lit ::= lhs_val.literal;
	both_are_static : bool mut := ty_hasqual(lhs_val.type, tyqual.static);
	if(!ty_hasqual(rhscpy.type, tyqual.static))
	{
		both_are_static = false;
	}
	conv ::= ty_get_conv(rhscpy.type, lhs_val.type);
	if(conv == (tyconv.cant))
	{
		psyc_error_begin(lhs_loc);
		puts("invalid comparison operator: rhs type");
		putchar('"');
		putty(rhscpy.type);
		putchar('"');
		puts(" is not convertible to lhs type ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		puts(" (but it could with a cast)");
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(conv == (tyconv.could_if_weak))
	{
		// bad
		psyc_error_begin(rhs_loc);
		puts("invalid comparison operator: rhs type");
		putchar('"');
		putty(rhscpy.type);
		putchar('"');
		puts(" is not convertible to lhs type ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	rhscpy = sval_convert(rhscpy, lhs_val.type);
	rhs_lit ::= rhscpy.literal;

	retqual : tyqual mut := zero;
	ret_tag : sval_tag mut := zero;
	ret_lit : sval_literal mut := zero;

	if(both_are_static)
	{
		retqual = (tyqual.static);
		ret_tag = (sval_tag.literal);

		if(both(ty_is_integral(lhs_val.type), ty_is_integral(rhscpy.type)))
		{
			(ret_lit.boolean) = ((lhs_lit.integral) != (rhs_lit.integral));
		}
		if(both(ty_is_boolean(lhs_val.type), ty_is_boolean(rhscpy.type)))
		{
			(ret_lit.boolean) = ((lhs_lit.boolean) != (rhs_lit.boolean));
		}
		if(both(ty_is_floating_point(lhs_val.type), ty_is_floating_point(rhscpy.type)))
		{
			(ret_lit.boolean) = ((lhs_lit.floating_point) != (rhs_lit.floating_point));
		}
	}

	return sval
	{
		.type := ty_getprim(primty.bool, retqual);
		.tag := ret_tag;
		.literal := ret_lit;
	};
};

semal_biop_plus ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	ret : sval mut := just_type(semal_biop_arithmetic_common("addition", lhs_val.type, rhs_val.type, lhs_loc, rhs_loc, ctx, prog));
	ret_lit ::= ref(ret.literal);
	(ret_lit->integral) = (lhs_lit.integral) + (rhs_lit.integral);
	(ret_lit->floating_point) = (lhs_lit.floating_point) + (rhs_lit.floating_point);
	return ret;
};

semal_biop_minus ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	ret : sval mut := just_type(semal_biop_arithmetic_common("subtraction", lhs_val.type, rhs_val.type, lhs_loc, rhs_loc, ctx, prog));
	ret_lit ::= ref(ret.literal);
	(ret_lit->integral) = (lhs_lit.integral) - (rhs_lit.integral);
	(ret_lit->floating_point) = (lhs_lit.floating_point) - (rhs_lit.floating_point);
	return ret;
};

semal_biop_multiply ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	ret : sval mut := just_type(semal_biop_arithmetic_common("multiplication", lhs_val.type, rhs_val.type, lhs_loc, rhs_loc, ctx, prog));
	ret_lit ::= ref(ret.literal);
	(ret_lit->integral) = (lhs_lit.integral) * (rhs_lit.integral);
	(ret_lit->floating_point) = (lhs_lit.floating_point) * (rhs_lit.floating_point);
	return ret;
};

semal_biop_divide ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	ret : sval mut := just_type(semal_biop_arithmetic_common("division", lhs_val.type, rhs_val.type, lhs_loc, rhs_loc, ctx, prog));
	ret_lit ::= ref(ret.literal);
	(ret_lit->integral) = (lhs_lit.integral) / (rhs_lit.integral);
	(ret_lit->floating_point) = (lhs_lit.floating_point) / (rhs_lit.floating_point);
	return ret;
};

semal_biop_bitwise_or ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	ret : sval mut := just_type(semal_biop_arithmetic_common("bitwise-or", lhs_val.type, rhs_val.type, lhs_loc, rhs_loc, ctx, prog));
	if(ty_is_floating_point(lhs_val.type))
	{
		psyc_error_begin(lhs_loc);
		puts("lhs of bitwise-or was floating point type ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		puts(", only integral types can be used in a bitwise-or.");
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(ty_is_floating_point(rhs_val.type))
	{
		psyc_error_begin(rhs_loc);
		puts("rhs of bitwise-or was floating point type ");
		putchar('"');
		putty(rhs_val.type);
		putchar('"');
		puts(", only integral types can be used in a bitwise-or.");
		psyc_diag_end();
		psyc_exit_failure();
	}
	ret_lit ::= ref(ret.literal);
	(ret_lit->integral) = (lhs_lit.integral) | (rhs_lit.integral);
	return ret;
};

semal_biop_logical_or ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	if(!ty_is_boolean(lhs_val.type))
	{
		psyc_error_begin(lhs_loc);
		puts("both sides of a logical-or binary operation must be boolean types. the lhs was ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(!ty_is_boolean(rhs_val.type))
	{
		psyc_error_begin(rhs_loc);
		puts("both sides of a logical-or binary operation must be boolean types. the rhs was ");
		putchar('"');
		putty(rhs_val.type);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	retqual : tyqual mut := zero;
	if(ty_hasqual(lhs_val.type, tyqual.static))
	{
		if(ty_hasqual(rhs_val.type, tyqual.static))
		{
			retqual = (tyqual.static);
		}
	}
	ret : sval mut := just_type(ty_getprim(primty.bool, retqual));
	ret_lit ::= ref(ret.literal);
	(ret_lit->boolean) = (lhs_lit.boolean);
	if(rhs_lit.boolean)
	{
		(ret_lit->boolean) = true;
	}
	return ret;
};

semal_biop_bitwise_and ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	ret : sval mut := just_type(semal_biop_arithmetic_common("bitwise-and", lhs_val.type, rhs_val.type, lhs_loc, rhs_loc, ctx, prog));
	if(ty_is_floating_point(lhs_val.type))
	{
		psyc_error_begin(lhs_loc);
		puts("lhs of bitwise-and was floating point type ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		puts(", only integral types can be used in a bitwise-and.");
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(ty_is_floating_point(rhs_val.type))
	{
		psyc_error_begin(rhs_loc);
		puts("rhs of bitwise-and was floating point type ");
		putchar('"');
		putty(rhs_val.type);
		putchar('"');
		puts(", only integral types can be used in a bitwise-and.");
		psyc_diag_end();
		psyc_exit_failure();
	}
	ret_lit ::= ref(ret.literal);
	(ret_lit->integral) = (lhs_lit.integral) & (rhs_lit.integral);
	return ret;
};

semal_biop_logical_and ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_lit ::= lhs_val.literal;
	rhs_lit ::= rhs_val.literal;

	if(!ty_is_boolean(lhs_val.type))
	{
		psyc_error_begin(lhs_loc);
		puts("both sides of a logical-and binary operation must be boolean types. the lhs was ");
		putchar('"');
		putty(lhs_val.type);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(!ty_is_boolean(rhs_val.type))
	{
		psyc_error_begin(rhs_loc);
		puts("both sides of a logical-and binary operation must be boolean types. the rhs was ");
		putchar('"');
		putty(rhs_val.type);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	retqual : tyqual mut := zero;
	if(ty_hasqual(lhs_val.type, tyqual.static))
	{
		if(ty_hasqual(rhs_val.type, tyqual.static))
		{
			retqual = (tyqual.static);
		}
	}
	ret : sval mut := just_type(ty_getprim(primty.bool, retqual));
	ret_lit ::= ref(ret.literal);
	(ret_lit->boolean) = false;
	if(lhs_lit.boolean)
	{
		if(rhs_lit.boolean)
		{
			(ret_lit->boolean) = true;
		}
	}
	return ret;
};

semal_biop_at ::= func(lhs_val : sval, rhs_val : sval, lhs_loc : srcloc, rhs_loc : srcloc, ctx : context mut, prog : program mut&) -> sval
{
	lhs_ty ::= lhs_val.type;
	rhs_ty ::= rhs_val.type;
	node ::= ctx.node;
	// lhs must be:
	//	- a ptr
	//	- an array
	retty : ty mut := zero;
	acceptable : bool mut := false;
	if(ty_is(lhs_ty, tytag.ptr))
	{
		acceptable = true;
		// return type is the same type as lhs in this case
		retty = lhs_ty;
	}
	if(ty_is(lhs_ty, tytag.arr))
	{
		acceptable = true;
		// return type is a pointer to underlying instead of an array
		arr ::= lhs_ty.arr;
		underlying ::= deref((arr.underlying)@ty&);
		retty = ty_ref(underlying, zero);
	}
	if(!acceptable)
	{
		psyc_error_begin(lhs_loc);
		puts("lhs of 'at' operator is of type ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		puts(", but it must be either a 'pointer' or 'array' type.");
		psyc_diag_end();
		psyc_exit_failure();
	}

	// rhs must be:
	//	- an integral type
	if(!ty_is_integral(rhs_ty))
	{
		psyc_error_begin(rhs_loc);
		puts("rhs of 'at' operator is of type ");
		putchar('"');
		putty(lhs_ty);
		putchar('"');
		puts(", but it must be an 'integral' type.");
		psyc_diag_end();
		psyc_exit_failure();
	}
	return just_type(retty);
};

semal_biop_field ::= func(lhs : ast, rhs : ast, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	puts("todo: implement biop field ");
	print_srcloc(node->loc);
	putchar(10);
	return zero;
};

semal_biop_ptr_field ::= func(lhs : ast, rhs : ast, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	puts("todo: implement biop ptr field ");
	print_srcloc(node->loc);
	putchar(10);
	return zero;
};

weakening_idiom ::= "_";

semal_biop_cast ::= func(lhs : ast, rhs : ast, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	lhs_expr ::= lhs.expr;
	rhs_expr ::= rhs.expr;
	// rhs must be a symbol expression
	if((rhs_expr.type) != (ast_expr_type.symbol))
	{
		psyc_error_begin(node->loc);
		puts("rhs of cast expression must be a 'symbol expression'. instead it is a '");
		puts(__enumname(rhs_expr.type));
		puts(" expression'");
		psyc_diag_end();
		psyc_exit_failure();
	}

	lhs_val ::= semal_expr_common(lhs_expr, context{.node := ref lhs; .local := ctx.local;}, prog);
	lhs_ty ::= lhs_val.type;
	if(ty_isbad(lhs_ty))
	{
		psyc_error_begin(lhs.loc);
		puts("lhs of binary operator cast yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}

	retty : ty mut;

	rhs_sym ::= rhs_expr.symbol;
	if((rhs_sym.len) == cstrlen(weakening_idiom))
	{
		if(cstreql_n(rhs_sym.symbol, weakening_idiom, rhs_sym.len))
		{
			// it is the weakening idiom. apply weak qualifier to lhs type and return it.
			retty = lhs_ty;
			(retty.qual) = ((retty.qual) | tyqual.weak);
			return just_type(retty);
		}
	}
	// not the weakening idiom.
	retty = scope_parse_typename(ctx.local, rhs_sym.symbol, rhs_sym.len);
	if(ty_isbad(retty))
	{
		psyc_error_begin(rhs.loc);
		puts("rhs of binary operator cast was typename ");
		putchar('"');
		putss(rhs_sym.symbol, rhs_sym.len);
		putchar('"');
		puts(" which yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}
	return just_type(retty);
};

semal_biop_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval
{
	biop ::= expr.biop;
	node ::= ctx.node;
	if((node->childcount) != 2)
	{
		psyc_error_begin(node->loc);
		puts("biop expr expects exactly 2 children representing lhs and rhs. this biop expr node has ");
		putuint(node->childcount);
		puts(" children.");
		psyc_diag_end();
		psyc_exit_failure();
	}
	lhs ::= ast_biop_get_lhs(deref node);
	rhs ::= ast_biop_get_rhs(deref node);

	if((biop.type) == (ast_biop_type.cast))
	{
		return semal_biop_cast(lhs, rhs, ctx, prog);
	}
	if((biop.type) == (ast_biop_type.field))
	{
		return semal_biop_field(lhs, rhs, ctx, prog);
	}
	if((biop.type) == (ast_biop_type.ptr_field))
	{
		return semal_biop_ptr_field(lhs, rhs, ctx, prog);
	}

	lhs_val ::= semal_expr_common(lhs.expr, context{.node := ref lhs; .local := ctx.local;}, prog);
	if(ty_isbad(lhs_val.type))
	{
		psyc_error_begin(lhs.loc);
		puts("lhs of binary operator ");
		puts(__enumname(biop.type));
		puts(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}
	rhs_val ::= semal_expr_common(rhs.expr, context{.node := ref rhs; .local := ctx.local;}, prog);
	if(ty_isbad(rhs_val.type))
	{
		psyc_error_begin(rhs.loc);
		puts("rhs of binary operator ");
		puts(__enumname(biop.type));
		puts(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}

	pre_transform_idx ::= (biop.type)@s64;
	subtraction ::= 0;
	idx ::= pre_transform_idx - subtraction;
	jump ::= deref(biop_jump_table at idx);
	return jump.fn(lhs_val, rhs_val, lhs.loc, rhs.loc, ctx, prog);
};


semal_expr ::= func(ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	return semal_expr_common(node->expr, ctx, prog);
};

semal_builtin ::= func(call : ast_callfunc_expr, ctx : context mut, prog : program mut&, found : bool mut&) -> sval
{
	prefix_len ::= cstrlen("__");
	if((call.funcname_len) <= prefix_len)
	{
		return zero;
	}
	len ::= (call.funcname_len) - prefix_len;
	offset_name ::= (call.funcname) at prefix_len;

	i : u64 mut;
	builtin_count ::= __sizeof(builtins) / __sizeof(deref(builtins at 0));
	for(i = 0, i < builtin_count, i = i + 1)
	{
		cur_builtin_name ::= __enumname(i@builtin);
		cur_builtin_len ::= cstrlen(cur_builtin_name);
		if(cur_builtin_len == len)
		{
			if(cstreql_n(cur_builtin_name, offset_name, len))
			{
				fn ::= deref(builtins at i);
				deref(found) = true;
				return fn.fn(call, ctx, prog);
			}
		}
	}
	return zero;
};

semal_callfunc_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	callfunc ::= expr.callfunc;

	did_builtin : bool mut := false;
	builtin_result ::= semal_builtin(callfunc, ctx, prog, ref did_builtin);
	if(did_builtin)
	{
		return builtin_result;
	}

	fn ::= scope_find_function(ctx.local, callfunc.funcname, callfunc.funcname_len);
	if(fn == null)
	{
		psyc_error_begin(node->loc);
		puts("could not find a declared function named ");
		putchar('"');
		putss(callfunc.funcname, callfunc.funcname_len);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	func_type ::= fn->type;
	func_payload ::= func_type.fn;
	return_type ::= deref((func_payload.return_type)@ty&);

	call_param_count ::= node->childcount;
	def_param_count ::= func_payload.param_count;
	if(call_param_count != def_param_count)
	{
		psyc_error_begin(node->loc);
		puts("invalid call to function ");
		putchar('"');
		putss(callfunc.funcname, callfunc.funcname_len);
		putchar('"');
		puts(": called with ");
		putuint(call_param_count);
		puts(" params, but expects ");
		putuint(def_param_count);
		puts(".");
		psyc_diag_end();
		psyc_exit_failure();
	}

	i : u64 mut;
	cur_param_val : sval mut;

	def_param_ty : ty mut;
	types_ptr ::= (func_payload.param_types)@ty&;
	cur_child : ast& mut;
	cur_conv : tyconv mut;
	for(i = 0, i < def_param_count, i = i + 1)
	{
		def_param_ty = deref(types_ptr at i);
		cur_child = ast_get_child(node@_, i);
		cur_param_val = semal_expr(context
		{
			.node := cur_child@_;
			.local := ctx.local;
		}, prog);
		
		cur_conv = ty_get_conv(cur_param_val.type, def_param_ty);
		if(cur_conv == (tyconv.cant))
		{
			psyc_error_begin(node->loc);
			puts("invalid call to function ");
			putchar('"');
			putss(callfunc.funcname, callfunc.funcname_len);
			putchar('"');
			puts(": parameter ");
			putuint(i);
			puts(" was of type ");
			putchar('"');
			putty(cur_param_val.type);
			putchar('"');
			puts(", which is not convertible to ");
			putchar('"');
			putty(def_param_ty);
			putchar('"');
			psyc_diag_end();
			psyc_exit_failure();
		}
		if(cur_conv == (tyconv.could_if_weak))
		{
			psyc_error_begin(node->loc);
			puts("invalid call to function ");
			putchar('"');
			putss(callfunc.funcname, callfunc.funcname_len);
			putchar('"');
			puts(": parameter ");
			putuint(i);
			puts(" was of type ");
			putchar('"');
			putty(cur_param_val.type);
			putchar('"');
			puts(", which is not convertible to ");
			putchar('"');
			putty(def_param_ty);
			putchar('"');
			puts(" (but it could with a cast)");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}
	// type-check params.
	return just_type(return_type);
};

semal_ret_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	parentfn ::= scope_get_parent_function(ctx.local);
	if(parentfn == null)
	{
		psyc_error_begin(node->loc);
		puts("invalid 'return' expression - only valid within a function implementation block");
		psyc_diag_end();
		psyc_exit_failure();
	}

	if((node->childcount) > 1)
	{
		psyc_error_begin(node->loc);
		puts("return expression node had ");
		putuint(node->childcount);
		puts(" child nodes, but it should have either 0 (retvoid) or exactly 1 (retval)");
		psyc_diag_end();
		psyc_exit_failure();
	}

	parentfn_ty ::= parentfn->type;
	parentfn_fnty ::= parentfn_ty.fn;
	parentfn_retty ::= deref((parentfn_fnty.return_type)@ty&);
	if((node->childcount) == 0)
	{
		// retvoid
		// parent fn better be return type v0
		if(!ty_is_v0(parentfn_retty))
		{
			psyc_error_begin(node->loc);
			puts("return expression is invalid because enclosing function");
			putchar('"');
			putss(parentfn->name, parentfn->name_len);
			putchar('"');
			puts(" expects to return a ");
			putchar('"');
			putty(parentfn_retty);
			putchar('"');
			puts(" - you must return a value");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}

	if((node->childcount) == 1)
	{
		// get the return type.
		childnode ::= ast_get_child(node@_, 0);
		// assume its an expression
		retval ::= semal_expr(context{.node := childnode; .local := ctx.local;}, prog);
		retvalty ::= retval.type;
		if(ty_isbad(retvalty))
		{
			psyc_error_begin(node->loc);
			puts("return expression yielded badtype");
			psyc_diag_end();
			psyc_exit_failure();
		}
		if(ty_is_v0(parentfn_retty))
		{
			psyc_error_begin(node->loc);
			puts("return expression is invalid because enclosing function ");
			putchar('"');
			putss(parentfn->name, parentfn->name_len);
			putchar('"');
			puts(" returns ");
			putchar('"');
			putty(parentfn_retty);
			putchar('"');
			puts(" - you cannot return a value");
			psyc_diag_end();
			psyc_exit_failure();
		}

		conv ::= ty_get_conv(retvalty, parentfn_retty);
		if(conv == (tyconv.cant))
		{
			psyc_error_begin(childnode->loc);
			puts("return expression is invalid because expression's type ");
			putchar('"');
			putty(retvalty);
			putchar('"');
			puts(" cannot be converted to enclosing function ");
			putchar('"');
			putss(parentfn->name, parentfn->name_len);
			putchar('"');
			puts("'s return type ");
			putchar('"');
			putty(parentfn_retty);
			putchar('"');
			psyc_diag_end();
			psyc_exit_failure();
		}
		if(conv == (tyconv.could_if_weak))
		{
			psyc_error_begin(childnode->loc);
			puts("return expression is invalid because expression's type ");
			putchar('"');
			putty(retvalty);
			putchar('"');
			puts(" cannot be converted to enclosing function ");
			putchar('"');
			putss(parentfn->name, parentfn->name_len);
			putchar('"');
			puts("'s return type ");
			putchar('"');
			putty(parentfn_retty);
			putchar('"');
			puts(" (but it could with a cast)");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}

	return zero;
};

semal_structinit_expr ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	init ::= node->init;
	type ::= scope_parse_typename(ctx.local, init.name, init.name_len);
	if(ty_isbad(type))
	{
		psyc_error_begin(node->loc);
		puts("structinit type ");
		putchar('"');
		putss(init.name, init.name_len);
		putchar('"');
		puts(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(!ty_is(type, tytag.strct))
	{
		psyc_error_begin(node->loc);
		puts("structinit type ");
		putchar('"');
		putss(init.name, init.name_len);
		putchar('"');
		puts(" was not a struct");
		psyc_diag_end();
		psyc_exit_failure();
	}
	structinit_scope ::= program_new_scope(prog, semar, ctx.local, scope_type.structinit, node->loc, init.name, init.name_len);
	semal_children(context
	{
		.node := node;
		.local := structinit_scope;
	}, prog);

	// todo: return proper sval
	return just_type(type);
};

semal_decl_common ::= func(decl : ast_decl, ctx : context mut, prog : program mut&) -> ty
{
	node ::= ctx.node;
	is_deduced_type ::= cstreql_n(decl.typename, psyc_deduced_typename, decl.typename_len);
	retty : ty mut := zero;
	if(!is_deduced_type)
	{
		retty = scope_parse_typename(ctx.local, decl.typename, decl.typename_len);
		if(ty_isbad(retty))
		{
			// try globally
			retty = program_parse_typename(prog, decl.typename, decl.typename_len);
		}
	}
	init_val : sval mut := zero;
	if((node->childcount) > 0)
	{
		init_val = semal_expr(context{.node := ast_get_child(node@_, 0); .local := ctx.local;}, prog);
	}
	if(is_deduced_type)
	{
		// deduced type.
		if(ty_isbad(init_val.type))
		{
			psyc_error_begin(node->loc);
			puts("type-deduced decl ");
			putss(decl.name, decl.name_len);
			puts(" did not have a deduceable initialiser");
			psyc_diag_end();
			psyc_exit_failure();
		}
		retty = (init_val.type);
	}
	if(ty_isbad(retty))
	{
		psyc_error_begin(node->loc);
		puts("decl ");
		putchar('"');
		putss(decl.name, decl.name_len);
		putchar('"');
		puts(" yielded badtype");
		psyc_diag_end();
		psyc_exit_failure();
	}
	if(ty_is_v0(retty))
	{
		psyc_error_begin(node->loc);
		puts("decl ");
		putchar('"');
		putss(decl.name, decl.name_len);
		putchar('"');
		puts(" cannot be of type");
		putchar('"');
		putty(retty);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}
	if((node->childcount) > 0)
	{
		// we have an initialiser set in init_val
		// we know its not badtype
		// lets make sure its convertible to the decl type.
		conv ::= ty_get_conv(init_val.type, retty);
		if(conv == (tyconv.cant))
		{
			psyc_error_begin(node->loc);
			puts("decl ");
			putchar('"');
			putss(decl.name, decl.name_len);
			putchar('"');
			puts("'s initialiser of type ");
			putchar('"');
			putty(init_val.type);
			putchar('"');
			puts(" is not convertible to ");
			putchar('"');
			putty(retty);
			putchar('"');
			psyc_diag_end();
			psyc_exit_failure();
		}
		if(conv == (tyconv.could_if_weak))
		{
			psyc_error_begin(node->loc);
			puts("decl ");
			putchar('"');
			putss(decl.name, decl.name_len);
			putchar('"');
			puts("'s initialiser of type ");
			putchar('"');
			putty(init_val.type);
			putchar('"');
			puts(" is not convertible to ");
			putchar('"');
			putty(retty);
			putchar('"');
			puts(" (but it could with a cast)");
			psyc_diag_end();
			psyc_exit_failure();
		}
	}

	scope_declare_variable(ctx.local, semar, variable
	{
		.name := decl.name;
		.name_len := decl.name_len;
		.type := retty;
		.location := node->loc;
	});
	return retty;
};

semal_decl ::= func(ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	return sval
	{
		.type := semal_decl_common(node->decl, ctx, prog);
	};
};

semal_structdef ::= func(ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	def ::= node->structdef;

	childcount ::= node->childcount;
	// todo: check if structname is already defined.
	retstruct : structty mut := zero;
	(retstruct.member_count) = childcount;
	(retstruct.name) = (def.structname);
	(retstruct.name_len) = (def.structname_len);

	(retstruct.member_types) = arena_push(semar, __sizeof(ty) * childcount);
	(retstruct.member_names) = arena_push(semar, __sizeof(u8&) * childcount);
	(retstruct.member_name_lens) = arena_push(semar, __sizeof(u64) * childcount);

	i : u64 mut;

	cur_member_node : ast& mut;
	cur_decl : ast_decl mut;
	cur_member_type : ty mut;
	for(i = 0, i < childcount, i = i + 1)
	{
		cur_member_node = ast_get_child(node@_, i);
		cur_decl = (cur_member_node->decl);
		cur_member_type = scope_parse_typename(ctx.local, cur_decl.typename, cur_decl.typename_len);
		if(ty_isbad(cur_member_type))
		{
			psyc_error_begin(cur_member_node->loc);
			if(cstreql_n(cur_decl.typename, def.structname, cur_decl.name_len))
			{
				putss(def.structname, def.structname_len);
				puts("::");
				putss(cur_decl.name, cur_decl.name_len);
				puts(" was of type ");
				putss(def.structname, def.structname_len);
				puts(" - struct's data member cannot be itself");
				psyc_diag_end();
				psyc_exit_failure();
			}
			putss(def.structname, def.structname_len);
			puts("::");
			putss(cur_decl.name, cur_decl.name_len);
			puts(" yielded badtype");
			psyc_diag_end();
			psyc_exit_failure();
		}
		memty_ptr ::= (retstruct.member_types)@ty mut&;
		deref(memty_ptr at i) = cur_member_type;
		deref((retstruct.member_names) at i) = (cur_decl.name);
		deref((retstruct.member_name_lens) at i) = (cur_decl.name_len);
	}

	// note: local scope is going to be (at the very most) file scope
	// this means that other files will not currently be able to see this definition
	// this can be fixed by simply using program_declare_struct, but i don't feel comfortable just doing that willy-nilly
	already ::= scope_find_struct(ctx.local, def.structname, def.structname_len);
	if(already != null)
	{
		psyc_error_begin(node->loc);
		puts("a struct named ");
		putchar('"');
		putss(def.structname, def.structname_len);
		putchar('"');
		puts(" was already defined ");
		print_srcloc(already->defined_at);
		psyc_diag_end();
		psyc_exit_failure();
	}
	scope_declare_struct(ctx.local, retstruct, node->loc);
	return zero;
};

semal_fn ::= func(ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	fn ::= node->fn;

	ret_ty : ty mut := scope_parse_typename(ctx.local, fn.ret_typename, fn.ret_typename_len);
	// so the param count is *not* just equal to the childcount if the function is not extern.
	// the statements within are also child nodes.
	// however, all ast_fn children will start off as decls (all the params) and then the contents of the implementation will follow
	i : u64 mut;
	childcount ::= node->childcount;
	beyond_param_idx : u64 mut := 0;
	param_count : u64 mut := 0;
	for(i = 0, i < childcount, i = i + 1)
	{
		cur_param_node ::= ast_get_child(node@_, i);
		if((cur_param_node->type) == (ast_type.decl))
		{
			param_count = param_count + 1;
			beyond_param_idx = beyond_param_idx + 1;
		}
		if((cur_param_node->type) != (ast_type.decl))
		{
			// early out
			i = childcount;
		}
	}
	type : ty mut := ty_getfn(ret_ty, param_count, zero);
	for(i = 0, i < param_count, i = i + 1)
	{
		cur_param_node ::= ast_get_child(node@_, i);
		cur_param_decl ::= cur_param_node->decl;

		declty : ty mut := scope_parse_typename(ctx.local, cur_param_decl.typename, cur_param_decl.typename_len);
		ty_fn_set_param(ref type, i, declty);
	}
	if(param_count > 8)
	{
		psyc_panic(node->loc, "function had too many arguments. more than 8 params is NYI");
	}

	// note: local scope is going to be (at the very most) file scope
	// this means that other files will not currently be able to see this definition
	// this can be fixed by simply using program_declare_function, but i don't feel comfortable just doing that willy-nilly
	scope_declare_function(ctx.local, semar,
		function{
			.node := ctx.node;
			.name := fn.fn_name;
			.name_len := fn.fn_name_len;
			.type := type;
		});
	ret ::= just_type(type);

	if(fn.is_extern)
	{
		if(beyond_param_idx != childcount)
		{
			psyc_panic(node->loc, "extern fn expected all children to be decls representing params, but that seems to not be the case.");
		}
		return ret;
	}
	// go through the implementation
	impl_child_node : ast mut& mut;
	fn_scope ::= program_new_scope(prog, semar, ctx.local, scope_type.fn, node->loc, fn.fn_name, fn.fn_name_len);
	defer_children(node@_);
	for(i = beyond_param_idx, i < childcount, i = i + 1)
	{
		impl_child_node = ast_get_child(node@_, i);
		semal_node(context
		{
			.node := impl_child_node;
			.local := fn_scope;
		}, prog);
	}
	return ret;
};

semal_mac ::= func(ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	mac ::= node->mac;
	puts("macro detected: ");
	putss(mac.mac_name, mac.mac_name_len);
	putchar(10);
	return zero;
};

semal_region_stmt ::= func(ctx : context mut, prog : program mut&) -> sval
{
	// remember - we handle build metaregions in its own special way
// so when we iterate and find a region stmt manually we simply ignore it.
	return zero;
};

semal_blk_stmt ::= func(ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	semal_children(context
	{
		.node := node;
		.local := program_new_scope(prog, semar, ctx.local, scope_type.code, node->loc, null, zero);
	}, prog);
	return zero;
};

semal_if_stmt ::= func(ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	ifdef ::= node->ifdef;

	cond_node ::= ast_get_child(node@_, 0);
	cond_val ::= semal_expr(context{.node := cond_node; .local := ctx.local;}, prog);
	cond_ty ::= cond_val.type;
	if(!ty_is_boolean(cond_ty))
	{
		psyc_error_begin(cond_node->loc);
		puts("condition of an if statement must be a boolean type. you have provided a ");
		putchar('"');
		putty(cond_ty);
		putchar('"');
		psyc_diag_end();
		psyc_exit_failure();
	}

	else_node : ast& mut;
	else_node = null;
	last_node : ast& mut;
	last_idx ::= (node->childcount) - 1;
	if((node->childcount) > 1)
	{
		last_node = ast_get_child(node@_, last_idx);
		if((last_node->type) == (ast_type.elsedef))
		{
			else_node = last_node;
		}
	}
	should_do_children : bool mut := true;
	should_do_else : bool mut := true;

	if(ifdef.is_static)
	{
		if(!ty_hasqual(cond_ty, tyqual.static))
		{
			psyc_error_begin(cond_node->loc);
			puts("condition of a if-static must be static (known at compile time). you have provided non-static type ");
			putchar('"');
			putty(cond_ty);
			putchar('"');
			psyc_diag_end();
			psyc_exit_failure();
		}
		lit ::= cond_val.literal;
		should_do_children = (lit.boolean);
		should_do_else = (!(lit.boolean));
	}

	i : u64 mut;
	if(should_do_children)
	{
		end : u64 mut := node->childcount;
		if(else_node != null)
		{
			end = end - 1;
		}
		for(i = 1, i < end, i = i + 1)
		{
			defer_children(node@_);
			semal_node(context
			{
				.node := ast_get_child(node@_, i);
				.local := ctx.local;
			}, prog);
		}
	}

	if(should_do_else)
	{
		if(else_node != null)
		{
			semal_children(context
			{
				.node := else_node;
				.local := ctx.local;
			}, prog);
		}
	}

	print_srcloc(node->loc);
	putchar(10);
	return zero;
};

semal_init_stmt ::= func(ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	if((node->childcount) != 1)
	{
		psyc_error_begin(node->loc);
		puts("init stmt was expected to have exactly 1 child, but instead had ");
		putuint(node->childcount);
		puts(". this is likely a compiler bug");
		psyc_diag_end();
		psyc_exit_failure();
	}

	init ::= node->init;

	init_node ::= ast_get_child(node@_, 0);
	init_val ::= semal_expr(context
	{
		.node := init_node;
		.local := ctx.local;
	}, prog);

	scope ::= ctx.local;
	t ::= scope->type;
	if(t == (scope_type.structinit))
	{
		member_idx : u64 mut := -1;
		type ::= scope_parse_typename(scope, scope->scope_label, scope->scope_label_len);
		if(!ty_is(type, tytag.strct))
		{
			psyc_panic(scope->loc, "structinit label didnt match a struct tyname!");
		}
		structty ::= type.strct;
		struct_types ::= (structty.member_types)@ty&;

		i : u64 mut;
		conv : tyconv mut;
		for(i = 0, i < (structty.member_count), i = i + 1)
		{
			memname ::= deref((structty.member_names) at i);
			memlen ::= deref((structty.member_name_lens) at i);
			memty ::= deref(struct_types at i);
			if(memlen == (init.name_len))
			{
				if(cstreql_n(memname, init.name, memlen))
				{
					// this is the correct member.
					member_idx = i;
					// todo: type-check member
					conv = ty_get_conv(init_val.type, memty);
					if(conv == (tyconv.cant))
					{
						psyc_error_begin(node->loc);
						puts("struct member initialiser is invalid because the expression of type ");
						putchar('"');
						putty(init_val.type);
						putchar('"');
						puts(" cannot be converted to data member ");
						putchar('"');
						putss(scope->scope_label, scope->scope_label_len);
						puts("::");
						putss(init.name, init.name_len);
						putchar('"');
						puts("'s type of ");
						putchar('"');
						putty(memty);
						putchar('"');
						psyc_diag_end();
						psyc_exit_failure();
					}
					if(conv == (tyconv.could_if_weak))
					{
						psyc_error_begin(node->loc);
						puts("struct member initialiser is invalid because the expression of type ");
						putchar('"');
						putty(init_val.type);
						putchar('"');
						puts(" cannot be converted to data member ");
						putchar('"');
						putss(scope->scope_label, scope->scope_label_len);
						puts("::");
						putss(init.name, init.name_len);
						putchar('"');
						puts("'s type of ");
						putchar('"');
						putty(memty);
						putchar('"');
						puts(" (but it could with a cast)");
						psyc_diag_end();
						psyc_exit_failure();
					}
				}
			}
		}
		if(member_idx == -1)
		{
			psyc_error_begin(node->loc);
			puts("struct ");
			putchar('"');
			putss(scope->scope_label, scope->scope_label_len);
			putchar('"');
			puts(" had no such data member ");
			putchar('"');
			putss(init.name, init.name_len);
			putchar('"');
			psyc_diag_end();
			psyc_exit_failure();
		}
	}
	putchar(10);
	return zero;
};

semal_stmt ::= func(ctx : context mut, prog : program mut&) -> sval
{
	node ::= ctx.node;
	pre_transform_idx ::= (node->stmt)@s64;
	subtraction ::= (ast_stmt.expr_stmt)@s64;

	idx ::= pre_transform_idx - subtraction;
	jump ::= deref(stmt_jump_table at idx);
	return jump.fn(ctx, prog);
};

semal_setup ::= func(a : arena mut&) -> v0
{
	psyc_timed(psyc_stage.setup);
	semar = a;

	deref(semal_jump_table at 0) = semal_function{.fn := semal_stmt;};
	deref(semal_jump_table at 1) = semal_function{.fn := semal_expr;};
	deref(semal_jump_table at 2) = semal_function{.fn := semal_decl;};
	deref(semal_jump_table at 3) = semal_function{.fn := semal_structdef;};

	deref(stmt_jump_table at 0) = semal_function{.fn := semal_expr;};
	deref(stmt_jump_table at 1) = semal_function{.fn := semal_decl;};
	deref(stmt_jump_table at 2) = semal_function{.fn := semal_region_stmt;};
	deref(stmt_jump_table at 3) = semal_function{.fn := semal_structdef;};
	deref(stmt_jump_table at 4) = semal_function{.fn := semal_fn;};
	deref(stmt_jump_table at 5) = semal_function{.fn := semal_mac;};
	deref(stmt_jump_table at 6) = semal_function{.fn := semal_blk_stmt;};
	deref(stmt_jump_table at 7) = semal_function{.fn := semal_if_stmt;};
	deref(stmt_jump_table at 8) = semal_function{.fn := semal_init_stmt;};

	deref(expr_jump_table at 0) = semal_expr_function{.fn := semal_symbol_expr;};
	deref(expr_jump_table at 1) = semal_expr_function{.fn := semal_literal_expr;};
	deref(expr_jump_table at 2) = semal_expr_function{.fn := semal_biop_expr;};
	deref(expr_jump_table at 3) = semal_expr_function{.fn := semal_unop_expr;};
	deref(expr_jump_table at 4) = semal_expr_function{.fn := semal_callfunc_expr;};
	deref(expr_jump_table at 5) = semal_expr_function{.fn := semal_ret_expr;};
	deref(expr_jump_table at 6) = semal_expr_function{.fn := semal_structinit_expr;};

	litqual ::= (tyqual.weak) | (tyqual.static);
	deref(literal_types at ((ast_literal_type.integral)@s64)) =
		ty_getprim(primty.s64, litqual);
	deref(literal_types at ((ast_literal_type.floating_point)@s64)) =
		ty_getprim(primty.f64, litqual);
	deref(literal_types at ((ast_literal_type.char_literal)@s64)) =
		ty_getprim(primty.u8, zero);
	deref(literal_types at ((ast_literal_type.string_literal)@s64)) =
		ty_ref(ty_getprim(primty.u8, tyqual.static), tyqual.static);
	deref(literal_types at ((ast_literal_type.bool_literal)@s64)) =
		ty_getprim(primty.bool, tyqual.static);

	deref(biop_jump_table at 0) = semal_biop_function{.fn := semal_biop_assign;};
	deref(biop_jump_table at 1) = semal_biop_function{.fn := semal_biop_compare;};
	deref(biop_jump_table at 2) = semal_biop_function{.fn := semal_biop_comparen;};
	deref(biop_jump_table at 3) = semal_biop_function{.fn := semal_biop_plus;};
	deref(biop_jump_table at 4) = semal_biop_function{.fn := semal_biop_minus;};
	deref(biop_jump_table at 5) = semal_biop_function{.fn := semal_biop_multiply;};
	deref(biop_jump_table at 6) = semal_biop_function{.fn := semal_biop_divide;};
	deref(biop_jump_table at 7) = semal_biop_function{.fn := semal_biop_bitwise_or;};
	deref(biop_jump_table at 8) = semal_biop_function{.fn := semal_biop_logical_or;};
	deref(biop_jump_table at 9) = semal_biop_function{.fn := semal_biop_bitwise_and;};
	deref(biop_jump_table at 10) = semal_biop_function{.fn := semal_biop_logical_and;};
	deref(biop_jump_table at 11) = semal_biop_function{.fn := semal_biop_at;};

	deref(unop_jump_table at 0) = semal_unop_function{.fn := semal_unop_minus;};
	deref(unop_jump_table at 1) = semal_unop_function{.fn := semal_unop_ref;};
	deref(unop_jump_table at 2) = semal_unop_function{.fn := semal_unop_deref;};
	deref(unop_jump_table at 3) = semal_unop_function{.fn := semal_unop_defer;};
};

semal_is_build_region ::= func(n : ast&) -> bool
{
	if((n->type) != (ast_type.stmt))
	{
		return false;
	}
	if((n->stmt) != (ast_stmt.region_stmt))
	{
		return false;
	}
	region ::= n->region;
	build_region_name ::= "build";
	len ::= cstrlen(build_region_name);
	return cstreql_n(region.name, build_region_name, len);
};

semal_find_build_region ::= func(source : ast&) -> ast&
{
	idx ::= ast_child_find_if(source, semal_is_build_region);
	if(idx == (-1@u64))
	{
		return null;
	}
	return ast_get_child(source@_, idx);
};

semal_build_region ::= func(ctx : context mut, prog : program mut&) -> v0
{
	node ::= ctx.node;
	(prog->in_metaregion) = true;

	semal_children(context
	{
		.node := ctx.node;
		.local := program_new_scope(prog, semar, ctx.local, scope_type.build_region, node->loc, null, zero);
	}, prog);
	
	(prog->in_metaregion) = false;
};

semal_file ::= func(prog : program mut&, source : ast&) -> v0
{
	psyc_timed(psyc_stage.semal);
	build_region ::= semal_find_build_region(source);
	if(build_region == null)
	{
		psyc_warning_begin(source->loc);
		puts("file had no build region");
		psyc_diag_end();
		return;
	}
	global ::= prog->global;

	// file scope is a child of the program scope
	file_scope ::= program_new_scope(prog, semar, ref global, scope_type.file, source->loc, null, zero);

	semal_build_region(context
	{
		.node := build_region;
		.local := file_scope;
	}, prog);
	semal_children(context
	{
		.node := source;
		.local := file_scope;
	}, prog);
};

== build ==
{
	add_source_file("program.psy");
	add_source_file("diag.psy");

	add_source_file("sval.psy");
}
