cgar : arena mut& mut;

// LLVM IR CODE GENERATION BEGIN

// start with the absolute top-level stuff, as they rely on tables only
// and then make our way down to the simplest bits.

// node
cg_node ::= func(ctx : context mut, prog : program mut&) -> cgv
{
	node ::= ctx.node;

	cg_func ::= deref(cg_node_table at ((node->type)@s64));
	return cg_func.fn(ctx, prog);
};

// expressions
cg_expr_common ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> cgv
{
	node ::= ctx.node;
	cg_func ::= deref(cg_expr_table at ((expr.type)@s64));
	return cg_func.fn(expr, ctx, prog);
};

cg_expr ::= func(ctx : context mut, prog : program mut&) -> cgv
{
	node ::= ctx.node;
	return cg_expr_common(node->expr, ctx, prog);
};

// statements

cg_expr_stmt ::= func(ctx : context mut, prog : program mut&) -> cgv
{
	// happens to be exactly the same code as ast_type.expr, so just re-use it.
	return cg_expr(ctx, prog);
};

cg_stmt ::= func(ctx : context mut, prog : program mut&) -> cgv
{
	node ::= ctx.node;
	stmt ::= node->stmt;

	cg_func ::= deref(cg_stmt_table at (stmt@s64));
	return cg_func.fn(ctx, prog);
};

// now onto the lower level bits.

// literal

cg_integer_literal ::= func(lit : ast_literal_expr, ctx : context mut, prog : program mut&) -> cgv
{
	q ::= (tyqual.static) | (tyqual.weak);
	type ::= ty_getprim(primty.s64, q);
	return cgv
	{
		.tag := cgvtag.misc;
		.ll := LLVMConstInt(cg.type(type, prog), lit.integral, false@s32);
		.type := type;
	};
};

cg_floating_point_literal ::= func(lit : ast_literal_expr, ctx : context mut, prog : program mut&) -> cgv
{
	q ::= (tyqual.static) | (tyqual.weak);
	type ::= ty_getprim(primty.f64, q);
	return cgv
	{
		.tag := cgvtag.misc;
		.ll := LLVMConstReal(cg.type(type, prog), lit.floating_point);
		.type := type;
	};
};

cg_char_literal ::= func(lit : ast_literal_expr, ctx : context mut, prog : program mut&) -> cgv
{
	node ::= ctx.node;
	q ::= (tyqual.static) | (tyqual.weak);
	type ::= ty_getprim(primty.s8, q);

	chars ::= lit.chars;
	len ::= lit.chars_len;
	// todo: escape chars and len
	if(len != 1)
	{
		psyc_error_begin(node->loc);
		puts("char literal ");
		puts("'");
		putss(chars, len);
		puts("'");
		puts(" was of length ");
		putuint(len);
		puts(", but a char literal must have length exactly 1.");
		psyc_diag_end();
		psyc_exit_failure();
	}
	return cgv
	{
		.tag := cgvtag.misc;
		.ll := LLVMConstInt(cg.type(type, prog), deref(chars at 0), false@s32);
		.type := type;
	};
};

cg_string_literal ::= func(lit : ast_literal_expr, ctx : context mut, prog : program mut&) -> cgv
{
	chars ::= lit.chars;
	len ::= lit.chars_len;
	return cgv
	{
		.tag := cgvtag.misc;
		.ll := LLVMConstString(chars, len@_, false@s32); // let string literals be null terminated
		.type := ty_ref(ty_getprim(primty.u8, tyqual.static), zero);
	};
};

cg_bool_literal ::= func(lit : ast_literal_expr, ctx : context mut, prog : program mut&) -> cgv
{
	q ::= (tyqual.static) | (tyqual.weak);
	type ::= ty_getprim(primty.bool, q);
	return cgv
	{
		.tag := cgvtag.misc;
		.ll := LLVMConstInt(cg.type(type, prog), lit.boolean, false@s32);
		.type := type;
	};
};

cg_zero_literal ::= func(lit : ast_literal_expr, ctx : context mut, prog : program mut&) -> cgv
{
	node ::= ctx.node;
	psyc_warning_begin(node->loc);
	puts("zero literals currently have .ll := 0");
	psyc_diag_end();
	return cgv
	{
		.tag := cgvtag.valzero;
		.ll := 0;
		.type := zero;
	};
};

cg_literal ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> cgv
{
	lit ::= expr.literal;

	cg_func ::= deref(cg_literal_table at ((lit.type)@s64));
	return cg_func.fn(lit, ctx, prog);
};

// symbol
cg_symbol ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> cgv
{
	sym ::= expr.symbol;
	node ::= ctx.node;
	// most obvious choice: a variable
	maybe_var ::= scope_find_variable(ctx.local, sym.symbol, sym.len);
	if(maybe_var != null)
	{
		if(ty_isbad(maybe_var->type))
		{
			psyc_error_begin(node->loc);
			puts("type of decl ");
			putchar('"');
			putss(sym.symbol, sym.len);
			putchar('"');
			puts(" yielded badtype");
			psyc_diag_end();
			psyc_exit_failure();
		}
		if((maybe_var->codegen) == 0)
		{
			psyc_error_begin(node->loc);
			puts("internal cgv of decl ");
			putchar('"');
			putss(sym.symbol, sym.len);
			putchar('"');
			puts(" yielded .ll == 0");
			psyc_diag_end();
			psyc_exit_failure();
		}
		return cgv
		{
			.tag := cgvtag.var;
			.ll := maybe_var->codegen;
			.type := maybe_var->type;
		};
	}
	return zero;
};

// ret
cg_ret ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> cgv
{
	node ::= ctx.node;
	parentfn ::= scope_get_parent_function(ctx.local);
	if(parentfn == null)
	{
		psyc_error_begin(node->loc);
		puts("return statements are only valid within a function implementation block");
		psyc_diag_end();
		psyc_exit_failure();
	}
	fnty ::= parentfn->type;
	fnpayload ::= fnty.fn;
	fn_retty ::= deref((fnpayload.return_type)@ty&);
	// todo: get parent fn and ensure the return is suitable.
	if((node->childcount) == 0)
	{
		LLVMBuildRetVoid(ir);
	}
	if((node->childcount) == 1)
	{
		retval : cgv mut := cg_node(context
		{
			.node := ast_get_child(node@_, 0);
			.local := ctx.local;
		}, prog);
		retval = cgv_convert(retval, fn_retty, prog, node->loc);
		// do a convert
		LLVMBuildRet(ir, retval.ll);
	}
	if((node->childcount) > 1)
	{
		psyc_panic(node->loc, "ret-expr had more than 1 child, which is wrong. compiler bug.");
	}
	return zero;
};

// biop

cg_biop_process_param ::= func(param : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	pval ::= cg_node(context
	{
		.node := param;
		.local := ctx.local;
	}, prog);
	if((pval.tag) == zero)
	{
		// invalid
		psyc_error_begin(param->loc);
		puts("failed to process operand - yielded invalid value");
		psyc_diag_end();
		psyc_exit_failure();
	}
	return pval;
};

cg_biop_process_both ::= macro() -> v0
{
	lhs_val : cgv mut := cg_biop_process_param(lhs, ctx, prog);
	rhs_val ::= cgv_convert(cg_biop_process_param(rhs, ctx, prog), lhs_val.type, prog, rhs->loc);
};

cg_biop_assign ::= func(lhs : ast&, rhs : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	psyc_panic(lhs->loc, "todo: biop assign");
	return zero;
};

cg_biop_compare ::= func(lhs : ast&, rhs : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	psyc_panic(lhs->loc, "todo: biop compare");
	return zero;
};

cg_biop_comparen ::= func(lhs : ast&, rhs : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	psyc_panic(lhs->loc, "todo: biop comparen");
	return zero;
};

cg_biop_plus ::= func(lhs : ast&, rhs : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	psyc_panic(lhs->loc, "todo: biop plus");
	return zero;
};

cg_biop_minus ::= func(lhs : ast&, rhs : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	psyc_panic(lhs->loc, "todo: biop minus");
	return zero;
};

cg_biop_multiply ::= func(lhs : ast&, rhs : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	cg_biop_process_both();
	if(ty_is_integral(lhs_val.type))
	{
		(lhs_val.ll) = LLVMBuildMul(ir, lhs_val.ll, rhs_val.ll, "");
	}
	if(ty_is_floating_point(lhs_val.type))
	{
		(lhs_val.ll) = LLVMBuildFMul(ir, lhs_val.ll, rhs_val.ll, "");
	}

	return lhs_val;
};

cg_biop_divide ::= func(lhs : ast&, rhs : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	psyc_panic(lhs->loc, "todo: biop divide");
	return zero;
};

cg_biop_bitwise_or ::= func(lhs : ast&, rhs : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	psyc_panic(lhs->loc, "todo: biop bitwise_or");
	return zero;
};

cg_biop_logical_or ::= func(lhs : ast&, rhs : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	psyc_panic(lhs->loc, "todo: biop logical_or");
	return zero;
};

cg_biop_bitwise_and ::= func(lhs : ast&, rhs : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	psyc_panic(lhs->loc, "todo: biop bitwise_and");
	return zero;
};

cg_biop_logical_and ::= func(lhs : ast&, rhs : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	psyc_panic(lhs->loc, "todo: biop logical_and");
	return zero;
};

cg_biop_at ::= func(lhs : ast&, rhs : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	psyc_panic(lhs->loc, "todo: biop at");
	return zero;
};

cg_biop_field ::= func(lhs : ast&, rhs : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	psyc_panic(lhs->loc, "todo: biop field");
	return zero;
};

cg_biop_ptr_field ::= func(lhs : ast&, rhs : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	psyc_panic(lhs->loc, "todo: biop ptr_field");
	return zero;
};

cg_biop_cast ::= func(lhs : ast&, rhs : ast&, ctx : context mut, prog : program mut&) -> cgv
{
	psyc_panic(lhs->loc, "todo: biop cast");
	return zero;
};

cg_biop ::= func(expr : ast_expr, ctx : context mut, prog : program mut&) -> cgv
{
	biop ::= expr.biop;
	biop_ty ::= biop.type;
	node ::= ctx.node;

	lhs ::= ast_biop_get_lhs(deref node);
	rhs ::= ast_biop_get_rhs(deref node);

	cg_func ::= deref(cg_biop_table at (biop_ty@s64));
	return cg_func.fn(lhs, rhs, ctx, prog);
};

cg_decl ::= func(ctx : context mut, prog : program mut&) -> cgv
{
	node ::= ctx.node;
	decl ::= node->decl;

	init_node : ast& mut;
	init_node = null;
	if((node->childcount) > 0)
	{
		init_node = ast_get_child(node@_, 0);
	}

	var : variable mut& := scope_find_variable(ctx.local, decl.name, decl.name_len)@_;
	if(var == null)
	{
		psyc_panic(node->loc, "cg_decl could not verify that the decl actually existed. severe compiler bug.");
	}

	declty : ty mut := scope_parse_typename(ctx.local, decl.typename, decl.typename_len);

	init_val : cgv mut := zero;

	if(init_node != null)
	{
		init_val = cg_expr(context
		{
			.node := init_node;
			.local := ctx.local;
		}, prog);
	}

	if((decl.typename_len) == cstrlen(psyc_deduced_typename))
	{
		if(cstreql_n(decl.typename, psyc_deduced_typename, decl.typename_len))
		{
			// deduced typename
			if(init_node == null)
			{
				psyc_error_begin(node->loc);
				puts("deduced-decl ");
				putchar('"');
				putss(decl.name, decl.name_len);
				putchar('"');
				puts(" was missing an initialiser. decls with deduced-typenames must always have an initialiser");
				psyc_diag_end();
				psyc_exit_failure();
			}
			declty = (init_val.type);
		}
	}

	(var->type) = declty;
	cgty ::= cg.type(declty, prog);

	if((init_val.tag) != zero)
	{
		init_val = cgv_convert(init_val, declty, prog, node->loc);
	}
	if(!(var->is_global))
	{
		// local variable. cg alloca.
		name_zstr : u8 mut& := arena_push(cgar, 1 + (decl.name_len));
		__memcpy(name_zstr, decl.name, decl.name_len);
		deref(name_zstr at (decl.name_len)) = 0;
		(var->codegen) = LLVMBuildAlloca(ir, cgty, name_zstr);
	}
	if(var->is_global)
	{
		// global variable. cg global.
	}
	return zero;
};

// LLVM IR CODE GENERATION END

codegen_node_setup ::= func(a : arena mut&, h : cg_helper_functions) -> v0
{
	cgar = a;
	cg = h;
	i : u64 mut;

	// populate tables
	cg_node_table_size ::= __sizeof(cg_node_table) / __sizeof(deref(cg_node_table at 0));
	for(i = 0, i < cg_node_table_size, i = i + 1)
	{
		deref(cg_node_table at i) = cg_node_fn{.fn := cg_nodefn_error;};
	}
	deref(cg_node_table at ((ast_type.stmt)@s64)) = cg_node_fn{.fn := cg_stmt;};
	deref(cg_node_table at ((ast_type.expr)@s64)) = cg_node_fn{.fn := cg_expr;};

	cg_stmt_table_size ::= __sizeof(cg_stmt_table) / __sizeof(deref(cg_stmt_table at 0));
	for(i = 0, i < cg_stmt_table_size, i = i + 1)
	{
		deref(cg_stmt_table at i) = cg_stmt_fn{.fn := cg_stmtfn_error;};
	}
	deref(cg_stmt_table at ((ast_stmt.expr_stmt)@s64)) = cg_stmt_fn{.fn := cg_expr_stmt;};

	cg_expr_table_size ::= __sizeof(cg_expr_table) / __sizeof(deref(cg_expr_table at 0));
	for(i = 0, i < cg_expr_table_size, i = i + 1)
	{
		deref(cg_expr_table at i) = cg_expr_fn{.fn := cg_exprfn_error;};
	}
	deref(cg_expr_table at ((ast_expr_type.symbol)@s64)) = cg_expr_fn{.fn := cg_symbol;};
	deref(cg_expr_table at ((ast_expr_type.biop)@s64)) = cg_expr_fn{.fn := cg_biop;};
	deref(cg_expr_table at ((ast_expr_type.literal)@s64)) = cg_expr_fn{.fn := cg_literal;};
	deref(cg_expr_table at ((ast_expr_type.ret)@s64)) = cg_expr_fn{.fn := cg_ret;};

	cg_biop_table_size ::= __sizeof(cg_biop_table) / __sizeof(deref(cg_biop_table at 0));
	for(i = 0, i < cg_biop_table_size, i = i + 1)
	{
		deref(cg_biop_table at i) = cg_biop_fn{.fn := cg_biopfn_error;};
	}
	deref(cg_biop_table at ((ast_biop_type.assign)@s64)) = cg_biop_fn{.fn := cg_biop_assign;};
	deref(cg_biop_table at ((ast_biop_type.compare)@s64)) = cg_biop_fn{.fn := cg_biop_compare;};
	deref(cg_biop_table at ((ast_biop_type.comparen)@s64)) = cg_biop_fn{.fn := cg_biop_comparen;};
	deref(cg_biop_table at ((ast_biop_type.plus)@s64)) = cg_biop_fn{.fn := cg_biop_plus;};
	deref(cg_biop_table at ((ast_biop_type.minus)@s64)) = cg_biop_fn{.fn := cg_biop_minus;};
	deref(cg_biop_table at ((ast_biop_type.multiply)@s64)) = cg_biop_fn{.fn := cg_biop_multiply;};
	deref(cg_biop_table at ((ast_biop_type.divide)@s64)) = cg_biop_fn{.fn := cg_biop_divide;};
	deref(cg_biop_table at ((ast_biop_type.bitwise_or)@s64)) = cg_biop_fn{.fn := cg_biop_bitwise_or;};
	deref(cg_biop_table at ((ast_biop_type.logical_or)@s64)) = cg_biop_fn{.fn := cg_biop_logical_or;};
	deref(cg_biop_table at ((ast_biop_type.bitwise_and)@s64)) = cg_biop_fn{.fn := cg_biop_bitwise_and;};
	deref(cg_biop_table at ((ast_biop_type.logical_and)@s64)) = cg_biop_fn{.fn := cg_biop_logical_and;};
	deref(cg_biop_table at ((ast_biop_type.operator_at)@s64)) = cg_biop_fn{.fn := cg_biop_at;};
	deref(cg_biop_table at ((ast_biop_type.field)@s64)) = cg_biop_fn{.fn := cg_biop_field;};
	deref(cg_biop_table at ((ast_biop_type.ptr_field)@s64)) = cg_biop_fn{.fn := cg_biop_ptr_field;};
	deref(cg_biop_table at ((ast_biop_type.cast)@s64)) = cg_biop_fn{.fn := cg_biop_cast;};

	cg_literal_table_size ::= __sizeof(cg_literal_table) / __sizeof(deref(cg_literal_table at 0));
	for(i = 0, i < cg_literal_table_size, i = i + 1)
	{
		deref(cg_literal_table at i) = cg_literal_fn{.fn := cg_literalfn_error;};
	}
	deref(cg_literal_table at ((ast_literal_type.integral)@s64)) = cg_literal_fn{.fn := cg_integer_literal;};
	deref(cg_literal_table at ((ast_literal_type.floating_point)@s64)) = cg_literal_fn{.fn := cg_floating_point_literal;};
	deref(cg_literal_table at ((ast_literal_type.char_literal)@s64)) = cg_literal_fn{.fn := cg_char_literal;};
	deref(cg_literal_table at ((ast_literal_type.string_literal)@s64)) = cg_literal_fn{.fn := cg_string_literal;};
	deref(cg_literal_table at ((ast_literal_type.bool_literal)@s64)) = cg_literal_fn{.fn := cg_bool_literal;};
	deref(cg_literal_table at ((ast_literal_type.zero_literal)@s64)) = cg_literal_fn{.fn := cg_zero_literal;};
};

== build ==
{
	add_source_file("codegen_tables.psy");
	add_source_file("llvm.psy");
	add_source_file("program.psy");
}
