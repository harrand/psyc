cgv_conv_undef ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	psyc_error_begin(loc);
	putzstr("conversion logic not setup properly for conversion from ");
	putchar('"');
	putty(v.type);
	putchar('"');
	putzstr(" to ");
	putchar('"');
	putty(to);
	putchar('"');
	putzstr(" - please report this as a compiler bug.");
	psyc_diag_end();
	psyc_exit_failure();
	return zero;
};

cgv_conv_cant ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	from ::= v.type;

	psyc_error_begin(loc);
	putzstr("no valid conversion from ");
	putchar('"');
	putty(from);
	putchar('"');
	putzstr(" to ");
	putchar('"');
	putty(to);
	putchar('"');
	psyc_diag_end();
	psyc_exit_failure();
	return zero;
};

cgv_conv_could_if_weak ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	from ::= v.type;

	psyc_error_begin(loc);
	putzstr("no valid conversion from ");
	putchar('"');
	putty(from);
	putchar('"');
	putzstr(" to ");
	putchar('"');
	putty(to);
	putchar('"');
	putzstr(" (but there could be if you casted it)");
	psyc_diag_end();
	psyc_exit_failure();
	return zero;
};

cgv_conv_i2i ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	constant ::= LLVMIsConstant(v.ll)@bool;
	ret : cgv mut := v;
	cgto ::= cg.type(to, prog);

	from ::= v.type;
	from_signed ::= ty_is_signed_integral(from);
	to_signed ::= ty_is_signed_integral(to);
	from_size ::= ty_integral_size(from);
	to_size ::= ty_integral_size(to);

	llv ::= LLVMConstIntGetSExtValue(v.ll);
	if(from_size < to_size)
	{
		// expanding to larger size
		if(from_signed)
		{
			if(constant)
			{
				(ret.ll) = LLVMConstInt(cgto, llv, true@s32);
			}
			if(!constant)
			{
				(ret.ll) = LLVMBuildSExt(ir, v.ll, cgto, "");
			}
		}
		if(!from_signed)
		{
			if(constant)
			{
				(ret.ll) = LLVMConstInt(cgto, llv, false@s32);
			}
			if(!constant)
			{
				(ret.ll) = LLVMBuildZExt(ir, v.ll, cgto, "");
			}
		}
	}
	if(from_size > to_size)
	{
		// truncating to smaller size
		if(constant)
		{
			(ret.ll) = LLVMConstInt(cgto, llv, false@s32);
		}
		if(!constant)
		{
			(ret.ll) = LLVMBuildTrunc(ir, v.ll, cgto, "");
		}
	}
	return ret;
};

cgv_conv_i2f ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	constant ::= LLVMIsConstant(v.ll)@bool;
	ret : cgv mut := v;
	cgto ::= cg.type(to, prog);

	from ::= v.type;

	if(constant)
	{
		(ret.ll) = LLVMConstReal(cgto, LLVMConstIntGetSExtValue(v.ll));
		return ret;
	}
	from_signed ::= ty_is_signed_integral(from);
	if(from_signed)
	{
		(ret.ll) = LLVMBuildSIToFP(ir, v.ll, cgto, "");
	}
	if(!from_signed)
	{
		(ret.ll) = LLVMBuildUIToFP(ir, v.ll, cgto, "");
	}
	return ret;
};

cgv_conv_i2p ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	constant ::= LLVMIsConstant(v.ll)@bool;
	ret : cgv mut := v;
	if(constant)
	{
		(ret.ll) = LLVMConstIntToPtr(v.ll, cg.type(to, prog));
		return ret;
	}
	(ret.ll) = LLVMBuildIntToPtr(ir, v.ll, cg.type(to, prog), "");
	return ret;
};

cgv_conv_i2e ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	// i.e is trivial
	transformed : cgv mut := cgv_conv_i2i(v, ty_getprim(primty.s64, tyqual.weak), prog, loc);
	(transformed.type) = to;
	return transformed;
};

cgv_conv_i2b ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	constant ::= LLVMIsConstant(v.ll)@bool;
	// always trunc
	ret : cgv mut := v;
	if(constant)
	{
		(ret.ll) = LLVMConstInt(cg.type(to, prog), LLVMConstIntGetSExtValue(v.ll), false@s32);
		return ret;
	}
	(ret.ll) = LLVMBuildTrunc(ir, v.ll, cg.type(to, prog), "");
	return ret;
};

cgv_conv_e2i ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	// pretend enumty is an s64
	transformed : cgv mut := v;
	tty ::= v.type;
	(transformed.type) = ty_getprim(primty.s64, tty.qual);
	return cgv_conv_i2i(transformed, to, prog, loc);
};

cgv_conv_p2i ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	constant ::= LLVMIsConstant(v.ll)@bool;
	ret : cgv mut := v;
	if(constant)
	{
		(ret.ll) = LLVMConstPtrToInt(v.ll, cg.type(to, prog));
		return ret;
	}
	(ret.ll) = LLVMBuildPtrToInt(ir, v.ll, cg.type(to, prog), "");
	return ret;
};

cgv_conv_p2fn ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	ret : cgv mut := v;
	(ret.type) = to;
	return ret;
};

cgv_conv_p2p ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	ret : cgv mut := v;
	(ret.type) = to;
	return ret;
};

cgv_conv_fn2p ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	ret : cgv mut := v;
	(ret.type) = to;
	return ret;
};

cgv_conv_f2i ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	constant ::= LLVMIsConstant(v.ll)@bool;
	ret : cgv mut := v;
	cgto ::= cg.type(to, prog);
	loses_info : s32 mut;

	if(constant)
	{
		(ret.ll) = LLVMConstInt(cgto, LLVMConstRealGetDouble(v.ll, ref loses_info)@_, true@s32);
		if(loses_info != 0)
		{
			psyc_panic(loc, "loss-of-double precision");
		}
		return ret;
	}
	to_signed ::= ty_is_signed_integral(to);
	if(to_signed)
	{
		(ret.ll) = LLVMBuildFPToSI(ir, v.ll, cgto, "");
	}
	if(!to_signed)
	{
		(ret.ll) = LLVMBuildFPToUI(ir, v.ll, cgto, "");
	}
	return ret;
};

cgv_conv_f2f ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	constant ::= LLVMIsConstant(v.ll)@bool;
	ret : cgv mut := v;
	cgto ::= cg.type(to, prog);
	loses_info : s32 mut;

	if(constant)
	{
		(ret.ll) = LLVMConstReal(cgto, LLVMConstRealGetDouble(v.ll, ref loses_info)@_);
		if(loses_info != 0)
		{
			psyc_panic(loc, "loss-of-double precision");
		}
		return ret;
	}
	from ::= v.type;
	from_size ::= ty_floating_point_size(from);
	to_size ::= ty_floating_point_size(to);
	if(from_size == to_size)
	{
		return ret;
	}
	if(from_size > to_size)
	{
		(ret.ll) = LLVMBuildFPTrunc(ir, v.ll, cgto, "");
	}
	if(from_size < to_size)
	{
		(ret.ll) = LLVMBuildFPExt(ir, v.ll, cgto, "");
	}

	return ret;
};

cgv_conv_b2i ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	constant ::= LLVMIsConstant(v.ll)@bool;
	// bool to another integral type
	// bool is guaranteed to be smaller, so its always zext
	ret : cgv mut := v;
	if(constant)
	{
		(ret.ll) = LLVMConstInt(cg.type(to, prog), LLVMConstIntGetSExtValue(v.ll), false@s32);
		return ret;
	}
	(ret.ll) = LLVMBuildZExt(ir, v.ll, cg.type(to, prog), "");
	return ret;
};

cgv_conv_same ::= func(v : cgv, to : ty, prog : program mut?, loc : srcloc -> cgv)
{
	return v;
};

== build ==
{
	add_source_file("codegen_value.psy");
}
