123;
12345;

hio : i64 := 64;

mydata :: struct
{
	member : i64 := 5;
}

putchar :: (ch : i8) -> u0 := extern;
dub :: (val : i64) -> i64
{
	is_cringe : bool := (true == false);
	val = deref ref val;
	val = (val + val);
	v : i64&;
	val = (val * val * val * (deref v));
	deref v = 862;
	-deref v;
	your_mum : i64 := 0;
	// return val * 2
}

complicated :: (par1 : i64, par : i8, par3 : u32) -> i64
{
	putchar(-par);	
}

poggers : i64;
morb :: (par0 : i64) -> f64
{
	poggers1 : i64;
	poggers2 : i64;
	poggers3 : i64;
	//morb2 :: (par0 : i64) -> u0 := extern;
	complicated(poggers, dub(5), 3);
	complicated(--complicated(1, 2, 3), dub(5), 690);

	retval : f64;
	return retval;
	//return morb(5 * complicated(dub(5)));
}
morb(65);

== default : build ==
{
	set_optimisation(2);
}