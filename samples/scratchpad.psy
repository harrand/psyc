puts :: (str : i8& const) -> u0 := extern;
main :: () -> i64
{
	puts("hello world!");	
	greeting : string;
	defer greeting.cleanup();

	greeting.resize(5);
	greeting.print();
	greeting.set("hey!");
	greeting.print();

	print();
	return 0;
}

strlen :: (str : i8& const) -> i64 := extern;
strcpy :: (dst : i8& const, src : i8& const) -> i8& const := extern;
string :: struct
{
	str : i8& := null;
	resize :: (sz : i64) -> u0
	{
		if this.str != null
		{
			// free it first.
			__builtin_free(this.str);
		}
		this.str = __builtin_malloc(sz);
		i : i64;
		for i = 0, (i != sz), i = (i + 1)
		{
			this.str[i] = '\0';
		}
	}
	cleanup :: () -> u0
	{
		if this.str != null
		{
			__builtin_free(this.str);
		}
		this.str = null;
	}
	size :: () -> i64
	{
		if this.str == null
		{
			return 0;
		}
		return strlen(this.str);
	}
	set :: (literal : i8& const) -> u0
	{
		strcpy(this.str, literal);
	}
	print :: () -> u0
	{
		puts(this.str);
	}
}

print :: () -> u0
{
	puts("free-function print!");
}

== default : build ==
{
	set_linkage_type(executable);
	set_output_name("scratchpad");
}