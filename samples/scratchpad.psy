putchar :: (ch : i8 weak) -> u0 := extern;
print_digit :: (digit : i64 weak) -> u0
{
	// ascii 48 == '0'
	putchar(48 + digit);
}

is_odd :: (val : i64) -> bool
{
	half : i64 := (val / 2);	
	low_half : i64 := ((val - 1) / 2);
	return (half == low_half);
}

puts :: (str : i8&) -> u0 := extern;
print_hello :: () -> u0
{
	buffer : i8& := __builtin_malloc(6 * (sizeof i8));
	defer __builtin_free(buffer);

	three : i64 const := 3;

	// 97 = 'a'
	// so n'th letter of alphabet = (97 + (n - 1))
	buffer[0] = ((97 + 7)@i8); // h
	buffer[1] = ((97 + 4)@i8); // e
	buffer[2] = ((97 + 11)@i8); // l
	buffer[three] = ((97 + 11)@i8); // l
	buffer[4] = ((97 + 14)@i8); // o
	buffer[5] = (0@i8); // null terminator
	puts(buffer);
	print_digit(6);
}

main :: () -> i64
{
	print_hello();
	i : i64 weak := 0;
	for i = 0, i != 10, i = (i + 1)
	{
		j : i64 const := i;
		print_digit(i);
		print_digit(j);
	}
	putchar(10);
	print_digit(1);
	print_digit(2);
	print_digit(3);

	if is_odd(23456)
	{
		print_digit(8);
	}
	else
	{
		print_digit(9);
	}
	return 0;	
}

== default : build ==
{
	set_build_type(debug);
	set_linkage_type(executable);
}