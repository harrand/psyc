putchar : (c : i64) -> i64 = extern;
puts : (str : i8*) -> i64 = extern;
strcpy : (dst : i8*, src : i8*) -> i8* = extern;

secret : i64 = 68;
usecret : u64 = 69;

my_malloc : (sz : i64) -> i8*
{
	return __builtin_malloc(sz);
}

my_free : (ptr : i8*) -> u0
{
	__builtin_free(ptr);
}

main : (argc : i64, argv : i8**) -> i64
{
	= secret - usecret 4;
	putchar(secret);
	
	myval : i64 = 64;
	myptr : i64* = ref myval;
	= deref myptr 'E';
	putchar(myval);
	putchar(deref myptr);


	str : i8* = "hello there!";
	str2 : i8* = "good morbing.";

	puts(str);

	strptr : i8** = ref str;
	= deref strptr str2;
	= str deref strptr;

	puts(str);
	putchar(deref str);

	memblk : i8* = __builtin_malloc(1);
	putchar(10);
	= deref memblk 'T';
	putchar(deref memblk);
	= deref memblk 'H';
	putchar(deref memblk);
	putchar(10);
	//__builtin_free(memblk);
	my_free(memblk);

	= secret 100;
	
	harry : gamer;
	= harry.name 'h';
	= harry.age 25;
	= harry.based true;

	connor : gamer;
	= connor.name 'c';
	= connor.age 40;
	= connor.based false;

	will : gamer;
	= will.name 'w';
	= will.age connor.age;
	= will.based true;

	analyse(harry);
	analyse(connor);
	analyse(will);

	//unknown_ints : i64[...];
	ints : i64[5];

	putchar('x');
	putchar(secret);
	puts(__builtin_typename(harry));
	return 0;
}

analyse : (someone : gamer) -> u0
{
	putchar('n'); putchar(':'); putchar(' ');
	putchar(someone.name); putchar(' ');

	if(someone.based)
	{
		putchar('x');
	}

	//idx : i64 = 0;
	//for(= idx 0; != idx 8; = idx + idx 1)
	//{
	//	putchar('E');
	//}

	putchar(10);
}

morb : struct
{
	e : i64;
}

gamer : struct
{
	name: i8;
	age: i64;
	based : bool = true;
	m : morb;

	poggers : () -> u0
	{
		me : gamer* = this;
	}
}

== default : build ==
{
	set_optimisation(0);
	set_output("scratchpad.exe");
	set_linkage("executable");
}

== library : build ==
{
	set_optimisation(0);
	set_output("scratchpad.lib");
	set_output("scratchpad.exe");
}